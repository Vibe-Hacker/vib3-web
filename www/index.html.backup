<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VIB3 - Video Social App</title>
    
    <!-- CSS Imports -->
    <link rel="stylesheet" href="css/components/videoEditor.css">
    <link rel="stylesheet" href="css/components/musicLibrary.css">
    <link rel="stylesheet" href="css/components/duetStitch.css">
    <link rel="stylesheet" href="css/components/liveStream.css">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            color: white;
            overflow-x: hidden;
        }

        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header Styles */
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            padding: 15px 20px;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .logo {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
        }

        .search-bar {
            flex: 1;
            max-width: 400px;
            margin: 0 20px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 25px;
            color: white;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: #ff6b6b;
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.3);
        }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .user-actions {
            display: none; /* Hide on desktop - use sidebar instead */
            align-items: center;
            gap: 15px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        /* Loading skeleton animation */
        @keyframes skeleton {
            0% {
                background-position: -200px 0;
            }
            100% {
                background-position: calc(200px + 100%) 0;
            }
        }

        .video-skeleton {
            background: linear-gradient(90deg, #333 25%, #444 37%, #333 63%);
            background-size: 400px 100%;
            animation: skeleton 1.5s ease-in-out infinite;
        }

        /* Main Content */
        .main-content {
            margin-top: 80px;
            flex: 1;
            display: flex;
            max-width: 1200px;
            margin-left: auto;
            margin-right: auto;
            width: 100%;
        }

        /* Sidebar */
        .sidebar {
            width: 250px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            position: fixed;
            left: 0;
            top: 80px;
            bottom: 0;
            overflow-y: auto;
            z-index: 100;
            pointer-events: auto;
        }

        .nav-menu {
            list-style: none;
        }

        .nav-item {
            margin-bottom: 10px;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 15px;
            transition: all 0.3s ease;
            font-weight: 500;
            cursor: pointer;
            user-select: none;
            position: relative;
            z-index: 10;
            border: 1px solid transparent;
        }

        .nav-link:hover,
        .nav-link.active {
            background: linear-gradient(45deg, rgba(255, 107, 107, 0.2), rgba(78, 205, 196, 0.2));
            color: white;
            transform: translateX(5px);
        }

        .nav-icon {
            margin-right: 12px;
            font-size: 18px;
        }

        /* Feed Section */
        .feed-container {
            flex: 1;
            margin-left: 250px;
            padding: 0;
            height: 100vh;
            overflow: hidden;
            position: relative;
        }


        /* Video Feed - TikTok Style with Smooth Transitions */
        .video-feed {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
            margin: 0;
            padding: 0;
            scroll-behavior: none;
            overscroll-behavior: none;
            touch-action: none;
        }

        .video-container {
            position: relative;
            width: 100%;
            height: 100vh;
            transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            will-change: transform;
            overflow: hidden;
            overscroll-behavior: none;
        }

        .video-container.transitioning {
            filter: brightness(0.9);
        }

        .video-card {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: #000;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
            transition: opacity 0.3s ease;
        }

        .video-card.transitioning {
            opacity: 0.7;
        }

        .video-wrapper {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        .video-element {
            max-width: calc(100vw - 270px); /* Account for sidebar + padding */
            max-height: calc(100vh - 20px); /* Account for top padding */
            width: auto;
            height: auto;
            object-fit: contain;
            background: #000;
        }
        
        /* Hide all video controls for TikTok-like experience */
        .video-element::-webkit-media-controls {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-panel {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-play-button {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-volume-slider {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-mute-button {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-timeline {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-current-time-display {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-time-remaining-display {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-fullscreen-button {
            display: none !important;
        }
        
        .video-element::-webkit-media-controls-overlay-play-button {
            display: none !important;
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .video-element {
                max-width: 100vw;
                max-height: calc(100vh - 60px); /* Account for mobile browser UI */
            }
            
            .feed-container {
                margin-left: 0;
            }
            
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
        }

        .video-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            padding: 20px;
            color: white;
        }

        .video-user {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .username {
            font-weight: 600;
            margin-right: 10px;
        }

        .follow-btn {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            border: none;
            padding: 6px 15px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .follow-btn:hover {
            transform: scale(1.05);
        }

        .video-description {
            margin-bottom: 15px;
            line-height: 1.4;
        }

        .video-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .action-group {
            display: flex;
            gap: 15px;
        }

        .action-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            color: #ff6b6b;
            transform: scale(1.1);
        }

        .action-btn.liked {
            color: #ff6b6b;
        }

        /* Upload Button */
        .upload-btn {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 10px 30px rgba(255, 107, 107, 0.4);
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .upload-btn:hover {
            transform: scale(1.1) rotate(90deg);
            box-shadow: 0 15px 40px rgba(255, 107, 107, 0.6);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            z-index: 2000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            padding: 40px;
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: bold;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            color: #ff6b6b;
            transform: scale(1.2);
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
        }

        .form-input,
        .form-textarea {
            width: 100%;
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            color: white;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            resize: vertical;
        }

        .form-input:focus,
        .form-textarea:focus {
            background: rgba(255, 255, 255, 0.15);
            border-color: #ff6b6b;
            box-shadow: 0 0 20px rgba(255, 107, 107, 0.3);
        }

        .form-input::placeholder,
        .form-textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .file-upload {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-upload input[type=file] {
            position: absolute;
            left: -9999px;
        }

        .file-upload-label {
            display: block;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px dashed rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-upload-label:hover {
            background: rgba(255, 255, 255, 0.15);
            border-color: #ff6b6b;
        }

        .file-upload-icon {
            font-size: 48px;
            margin-bottom: 10px;
            display: block;
        }

        /* Loading and skeleton styles */
        .video-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 18px;
        }

        .video-skeleton {
            background: linear-gradient(90deg, rgba(255,255,255,0.1) 25%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
            height: 80vh;
            min-height: 600px;
            border-radius: 20px;
            margin-bottom: 20px;
        }

        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        .compress-progress {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            z-index: 10;
        }

        .progress-bar {
            width: 80%;
            height: 10px;
            background: rgba(255,255,255,0.3);
            border-radius: 5px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            transition: width 0.3s ease;
        }

        .feed-loading {
            text-align: center;
            padding: 40px;
            color: rgba(255,255,255,0.7);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .feed-container {
                margin-left: 0;
                padding: 15px;
            }

            .header-content {
                padding: 0 15px;
            }

            .search-bar {
                display: none;
            }

            .modal-content {
                margin: 20px;
                padding: 30px 20px;
            }

            .video-card {
                height: 100vh;
                min-height: 100vh;
                border-radius: 0;
                margin-bottom: 0;
            }

            .video-feed {
                padding: 0;
                max-width: 100%;
            }

            /* Show header buttons on mobile for TikTok-like experience */
            .user-actions {
                display: flex;
            }

            /* Add hamburger menu for mobile sidebar access */
            .logo {
                display: flex;
                align-items: center;
                gap: 15px;
                cursor: pointer;
            }
            
            .logo::before {
                content: "☰";
                font-size: 20px;
                color: white;
                opacity: 0.8;
            }
        }

        /* Additional animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">VIB3</div>
                <div class="search-bar">
                    <input type="text" class="search-input" placeholder="Search videos, users..." id="searchInput">
                </div>
                <div class="user-actions">
                    <button class="btn btn-live" id="liveStreamBtn" onclick="directLiveStreamStart()" style="background: linear-gradient(45deg, #ff2d55, #ff6b6b); border: none; color: white; margin-right: 10px;">
                        🔴 Go Live
                    </button>
                    <button class="btn btn-secondary" id="loginBtn">Login</button>
                    <button class="btn btn-primary" id="signupBtn">Sign Up</button>
                    <div class="user-menu" id="userMenu" style="display: none;">
                        <button class="btn btn-secondary" id="profileBtn">Profile</button>
                        <button class="btn btn-secondary" id="settingsBtn">Settings</button>
                        <button class="btn btn-secondary" id="logoutBtn">Logout</button>
                    </div>
                </div>
            </div>
        </header>

        <div class="main-content">
            <!-- Sidebar -->
            <nav class="sidebar" id="sidebar">
                <ul class="nav-menu">
                    <li class="nav-item">
                        <a href="#" class="nav-link active" data-page="foryou" onclick="handleNavigation('foryou'); return false;">
                            <span class="nav-icon">🏠</span>
                            <span>For You</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link" data-page="trending" onclick="handleNavigation('trending'); return false;">
                            <span class="nav-icon">🔥</span>
                            <span>Trending</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link" data-page="following" onclick="handleNavigation('following'); return false;">
                            <span class="nav-icon">👥</span>
                            <span>Following</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="nav-link" data-page="live" onclick="handleNavigation('live'); return false;">
                            <span class="nav-icon">📺</span>
                            <span>Live</span>
                        </a>
                    </li>
                    <li class="nav-item" id="sidebarProfileItem" style="display: none;">
                        <a href="#" class="nav-link" data-page="profile" onclick="handleNavigation('profile'); return false;">
                            <span class="nav-icon">👤</span>
                            <span>Profile</span>
                        </a>
                    </li>
                    <li class="nav-item" id="sidebarSettingsItem" style="display: none;">
                        <a href="#" class="nav-link" data-page="settings" onclick="handleNavigation('settings'); return false;">
                            <span class="nav-icon">⚙️</span>
                            <span>Settings</span>
                        </a>
                    </li>
                    <li class="nav-item" id="sidebarLoginItem">
                        <a href="#" class="nav-link" data-page="login" onclick="console.log('🔑 SIDEBAR LOGIN CLICKED'); testModalOpen('loginModal'); return false;">
                            <span class="nav-icon">🔑</span>
                            <span>Login</span>
                        </a>
                    </li>
                    <li class="nav-item" id="sidebarSignupItem">
                        <a href="#" class="nav-link" data-page="signup" onclick="console.log('➕ SIDEBAR SIGNUP CLICKED'); testModalOpen('signupModal'); return false;">
                            <span class="nav-icon">➕</span>
                            <span>Sign Up</span>
                        </a>
                    </li>
                    <li class="nav-item" id="sidebarLogoutItem" style="display: none;">
                        <a href="#" class="nav-link" data-page="logout" onclick="handleNavigation('logout'); return false;">
                            <span class="nav-icon">🚪</span>
                            <span>Logout</span>
                        </a>
                    </li>
                </ul>
            </nav>

            <!-- Feed Container -->
            <main class="feed-container">
                <!-- Video Feed -->
                <div class="video-feed" id="videoFeed">
                    <!-- Videos will be dynamically loaded here -->
                </div>
            </main>
        </div>

        <!-- Upload Button -->
        <button class="upload-btn" id="uploadBtn">+</button>

        <!-- Login Modal -->
        <div class="modal" id="loginModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Login to VIB3</h2>
                    <button class="close-btn" data-modal="loginModal">&times;</button>
                </div>
                <form id="loginForm">
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="loginEmail" placeholder="Enter your email" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-input" id="loginPassword" placeholder="Enter your password" required>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">Login</button>
                </form>
            </div>
        </div>

        <!-- Signup Modal -->
        <div class="modal" id="signupModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Join VIB3</h2>
                    <button class="close-btn" data-modal="signupModal">&times;</button>
                </div>
                <form id="signupForm">
                    <div class="form-group">
                        <label class="form-label">Username</label>
                        <input type="text" class="form-input" id="signupUsername" placeholder="Choose a username" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="signupEmail" placeholder="Enter your email" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-input" id="signupPassword" placeholder="Create a password" required>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">Sign Up</button>
                </form>
            </div>
        </div>

        <!-- Upload Modal -->
        <div class="modal" id="uploadModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Upload Video</h2>
                    <button class="close-btn" data-modal="uploadModal">&times;</button>
                </div>
                <div style="margin-bottom: 20px;">
                    <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                        <button type="button" id="recordVideoBtn" class="btn btn-primary" style="flex: 1;">
                            🎥 Record Video
                        </button>
                        <button type="button" id="uploadFileBtn" class="btn btn-secondary" style="flex: 1;">
                            📁 Upload File
                        </button>
                    </div>
                </div>

                <!-- Camera Recording Section -->
                <div id="recordingSection" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">Camera Preview</label>
                        <div style="position: relative; background: #000; border-radius: 10px; overflow: hidden;">
                            <video id="cameraPreview" autoplay muted style="width: 100%; height: 300px; object-fit: cover;"></video>
                            <div id="recordingControls" style="position: absolute; bottom: 15px; left: 50%; transform: translateX(-50%); display: flex; gap: 10px;">
                                <button type="button" id="startRecordBtn" class="btn btn-primary">
                                    🔴 Start Recording
                                </button>
                                <button type="button" id="stopRecordBtn" class="btn btn-secondary" style="display: none;">
                                    ⏹️ Stop Recording
                                </button>
                            </div>
                            <div id="recordingIndicator" style="position: absolute; top: 15px; left: 15px; background: rgba(255,0,0,0.8); color: white; padding: 5px 10px; border-radius: 15px; display: none;">
                                🔴 Recording...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- File Upload Section -->
                <div id="fileUploadSection">
                    <div class="form-group">
                        <label class="form-label">Video File</label>
                        <div class="file-upload">
                            <input type="file" id="videoFile" accept="video/*">
                            <label for="videoFile" class="file-upload-label">
                                <span class="file-upload-icon">📹</span>
                                <div>Click to select a video</div>
                                <small>MP4, MOV, AVI up to 100MB</small>
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Video Preview Section -->
                <div id="videoPreviewSection" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">Video Preview</label>
                        <video id="videoPreview" controls style="width: 100%; height: 200px; background: #000; border-radius: 10px;"></video>
                        <button type="button" id="clearVideoBtn" class="btn btn-secondary" style="margin-top: 10px;">
                            🗑️ Clear Video
                        </button>
                    </div>
                </div>

                <form id="uploadForm">
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" id="videoDescription" placeholder="Describe your video..." rows="4"></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Tags</label>
                        <input type="text" class="form-input" id="videoTags" placeholder="#hashtag1 #hashtag2">
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;" disabled id="uploadSubmitBtn">
                        📤 Upload Video
                    </button>
                </form>
            </div>
        </div>

        <!-- Profile Modal -->
        <div class="modal" id="profileModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Profile</h2>
                    <button class="close-btn" data-modal="profileModal">&times;</button>
                </div>
                <div id="profileContent">
                    <!-- Profile content will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Settings Modal -->
        <div class="modal" id="settingsModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Settings</h2>
                    <button class="close-btn" data-modal="settingsModal">&times;</button>
                </div>
                <div id="settingsContent">
                    <div class="form-group">
                        <label class="form-label">Privacy</label>
                        <select class="form-input">
                            <option>Public</option>
                            <option>Friends Only</option>
                            <option>Private</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Notifications</label>
                        <input type="checkbox" checked> Push Notifications<br>
                        <input type="checkbox" checked> Email Notifications<br>
                        <input type="checkbox"> SMS Notifications
                    </div>
                    <div class="form-group">
                        <label class="form-label">Theme</label>
                        <select class="form-input">
                            <option>Dark Mode</option>
                            <option>Light Mode</option>
                            <option>Auto</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Comments Modal -->
        <div class="modal" id="commentsModal">
            <div class="modal-content" style="max-width: 600px;">
                <div class="modal-header">
                    <h2 class="modal-title">Comments</h2>
                    <button class="close-btn" data-modal="commentsModal">&times;</button>
                </div>
                <div id="commentsContainer" style="max-height: 400px; overflow-y: auto; margin-bottom: 20px;">
                    <!-- Comments will be loaded here -->
                </div>
                <div id="commentInputSection" style="display: none;">
                    <form id="commentForm" style="display: flex; gap: 10px;">
                        <input type="text" 
                               id="commentText" 
                               class="form-input" 
                               placeholder="Add a comment..." 
                               style="flex: 1;"
                               maxlength="500">
                        <button type="submit" class="btn btn-primary" style="width: auto;">Post</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase Scripts -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-storage-compat.js"></script>
    
    <script>
        console.log('🚀 JavaScript is running!');
        
        // IMMEDIATE TAB PAUSE TEST - RUNS FIRST
        console.log('🚨 IMMEDIATE TAB PAUSE SETUP STARTING...');
        
        // Clean DOM ready handler
        document.addEventListener('DOMContentLoaded', function() {
            console.log('✅ VIB3 App DOM Ready');
        });
        
        // Simple tab visibility setup with resume
        let videosPlayingBeforeHide = [];
        
        document.addEventListener('visibilitychange', function() {
            console.log('🚨 TAB VISIBILITY CHANGED!');
            console.log('Hidden:', document.hidden);
            
            if (document.hidden) {
                // Tab is now hidden - pause and remember which videos were playing
                console.log('🚨 TAB HIDDEN - PAUSING VIDEOS');
                videosPlayingBeforeHide = [];
                
                const videos = document.querySelectorAll('video');
                console.log('Found videos:', videos.length);
                
                videos.forEach((v, i) => {
                    if (!v.paused) {
                        videosPlayingBeforeHide.push(i);
                        v.pause();
                        console.log('Paused video', i);
                    }
                });
                
                console.log('Videos that were playing:', videosPlayingBeforeHide);
            } else {
                // Tab is now visible - resume videos that were playing
                console.log('👁️ TAB VISIBLE - RESUMING VIDEOS');
                console.log('Videos to resume:', videosPlayingBeforeHide);
                
                const videos = document.querySelectorAll('video');
                videosPlayingBeforeHide.forEach(index => {
                    if (videos[index]) {
                        console.log('Resuming video', index);
                        // Make sure audio state is correct
                        if (audioEnabled) {
                            videos[index].muted = false;
                            videos[index].volume = 1.0;
                        }
                        videos[index].play().then(() => {
                            console.log('✅ Successfully resumed video', index);
                        }).catch(err => {
                            console.log('❌ Failed to resume video', index, err);
                        });
                    }
                });
            }
        });
        
        console.log('🚨 BASIC TAB PAUSE SETUP COMPLETE');
        
        // SIMPLE AUDIO ENABLE SYSTEM
        let audioEnabled = false;
        
        // Simple function to enable audio system
        function enableAllAudio() {
            console.log('🔊 ENABLING AUDIO SYSTEM');
            audioEnabled = true;
            
            // Only unmute the current playing video, not all videos
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (currentCard) {
                const currentVideo = currentCard.querySelector('.video-element');
                if (currentVideo && !currentVideo.hasAttribute('data-user-muted')) {
                    currentVideo.muted = false;
                    currentVideo.volume = 1.0;
                    console.log('🔊 Unmuted current video only');
                }
            }
            
            // Sound enabled (notification removed per user request)
        }
        
        // Handle individual video clicks for audio - FIXED
        function handleVideoAudio(video, event) {
            console.log('🎬 Handling video audio');
            
            // If audio not enabled globally, enable it (but only affects current video)
            if (!audioEnabled) {
                enableAllAudio(); // This now only unmutes current video
            }
            
            // If this specific video is muted and user hasn't explicitly muted it, unmute it
            if ((video.muted || video.volume === 0) && !video.hasAttribute('data-user-muted')) {
                console.log('🔊 Unmuting this specific video');
                video.muted = false;
                video.volume = 1.0;
                
                // Prevent the default play/pause behavior
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
            } else if (video.hasAttribute('data-user-muted')) {
                console.log('🔇 Not unmuting - user has explicitly muted this video');
            }
                
                // If video is paused, play it
                if (video.paused) {
                    video.play().catch(e => console.log('Play failed:', e));
                }
                
                // Show quick notification
                const note = document.createElement('div');
                note.innerHTML = '🔊 Audio On';
                note.style.cssText = 'position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.8); color: white; padding: 10px 20px; border-radius: 20px; font-size: 18px; z-index: 99999;';
                document.body.appendChild(note);
                setTimeout(() => note.remove(), 1500);
            }
        }
        
        // Enable audio on ANY interaction - CONSERVATIVE VERSION
        function setupAggressiveAudioEnable() {
            console.log('🔊 Setting up CONSERVATIVE audio enable system...');
            
            const enableAudioOnInteraction = function(e) {
                console.log('🔊 Interaction detected:', e.type);
                if (!audioEnabled) {
                    enableAllAudio(); // Now only affects current video
                }
            };
            
            // Add listeners but only for major interactions
            ['click', 'touchstart'].forEach(eventType => {
                document.addEventListener(eventType, enableAudioOnInteraction, { once: true });
            });
            
            console.log('🔊 Conservative audio system ready');
        }
        
        // Add audio button to video
        function addAudioButtonToVideo(video) {
            // Check if button already exists
            if (video.hasAttribute('data-audio-button-added')) return;
            video.setAttribute('data-audio-button-added', 'true');
            
            // Find the video's parent container
            const parent = video.parentElement;
            if (!parent) return;
            
            // Create audio button
            const audioBtn = document.createElement('button');
            audioBtn.innerHTML = '🔇';
            audioBtn.style.cssText = `
                position: absolute;
                bottom: 20px;
                right: 20px;
                width: 50px;
                height: 50px;
                border-radius: 50%;
                background: rgba(0, 0, 0, 0.7);
                color: white;
                border: 2px solid white;
                font-size: 24px;
                cursor: pointer;
                z-index: 100;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            `;
            
            // Update button based on mute state
            const updateButton = () => {
                if (video.muted) {
                    audioBtn.innerHTML = '🔇';
                    audioBtn.style.background = 'rgba(255, 0, 0, 0.7)';
                } else {
                    audioBtn.innerHTML = '🔊';
                    audioBtn.style.background = 'rgba(0, 255, 0, 0.7)';
                }
            };
            
            // Button click handler
            audioBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                e.preventDefault();
                
                console.log('🔊 Audio button clicked');
                
                // Enable global audio if needed
                if (!audioEnabled) {
                    enableAllAudio(); // This now only affects current video
                }
                
                // Toggle this video's audio
                video.muted = !video.muted;
                video.volume = video.muted ? 0 : 1.0;
                
                updateButton();
                
                // Show notification
                const msg = video.muted ? 'Audio Off' : 'Audio On';
                const note = document.createElement('div');
                note.innerHTML = msg;
                note.style.cssText = 'position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.8); color: white; padding: 10px 20px; border-radius: 20px; font-size: 18px; z-index: 99999;';
                document.body.appendChild(note);
                setTimeout(() => note.remove(), 1500);
            });
            
            // Initial button state
            updateButton();
            
            // Watch for mute changes
            video.addEventListener('volumechange', updateButton);
            
            // Add button to parent
            parent.style.position = 'relative';
            parent.appendChild(audioBtn);
            
            console.log('🔊 Audio button added to video');
        }
        
        // Debug function to check navigation state
        window.checkNavigationState = function() {
            console.log('🔍 Navigation State Check:');
            console.log('  isScrolling:', typeof isScrolling !== 'undefined' ? isScrolling : 'undefined');
            console.log('  isTransitioning:', typeof isTransitioning !== 'undefined' ? isTransitioning : 'undefined');
            console.log('  allVideos:', typeof allVideos !== 'undefined' ? allVideos.length : 'undefined');
            console.log('  currentVideoIndex:', typeof currentVideoIndex !== 'undefined' ? currentVideoIndex : 'undefined');
            console.log('  videoContainer:', typeof videoContainer !== 'undefined' ? !!videoContainer : 'undefined');
            
            // Try to reset if stuck
            if (typeof isScrolling !== 'undefined') isScrolling = false;
            if (typeof isTransitioning !== 'undefined') isTransitioning = false;
            console.log('✅ Reset navigation flags');
        };
        
        // Check for videos periodically and unmute them
        function periodicAudioCheck() {
            setInterval(() => {
                if (audioEnabled) {
                    const videos = document.querySelectorAll('video');
                    videos.forEach((v, i) => {
                        // Only unmute if video doesn't have user mute preference
                        if (v.muted && !v.hasAttribute('data-user-muted')) {
                            v.muted = false;
                            v.volume = 1.0;
                            console.log(`🔊 Found auto-muted video ${i} - unmuting it`);
                        } else if (v.hasAttribute('data-user-muted')) {
                            console.log(`🔇 Keeping video ${i} muted (user preference)`);
                        }
                    });
                }
            }, 1000); // Check every second
        }
        
        // Call this when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                setupAggressiveAudioEnable(); // Now disabled
                periodicAudioCheck(); // Now respects user mute preferences
                
                // Watch for new videos and add click handlers
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        mutation.addedNodes.forEach((node) => {
                            if (node.tagName === 'VIDEO' || node.querySelector?.('video')) {
                                // Handle new videos
                                if (audioEnabled) {
                                    setTimeout(() => {
                                        // Only unmute the current video, not all videos
                                        const currentCard = videoContainer?.querySelector('[data-position="0"]');
                                        if (currentCard) {
                                            const currentVideo = currentCard.querySelector('.video-element');
                                            if (currentVideo && !currentVideo.hasAttribute('data-user-muted')) {
                                                currentVideo.muted = false;
                                                currentVideo.volume = 1.0;
                                            }
                                        }
                                    }, 100);
                                }
                                
                                // Add audio button overlay to videos
                                if (node.querySelector) {
                                    const videoElements = node.querySelectorAll('video');
                                    videoElements.forEach(video => {
                                        addAudioButtonToVideo(video);
                                    });
                                } else if (node.tagName === 'VIDEO') {
                                    addAudioButtonToVideo(node);
                                }
                            }
                        });
                    });
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                
                console.log('🔊 Aggressive audio system fully armed');
            }, 2000);
        });
        
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDm3RODqsYRB1P9Lrri497FmMA0IIklvwM",
            authDomain: "vib3-a293b.firebaseapp.com",
            projectId: "vib3-a293b",
            storageBucket: "vib3-a293b.firebasestorage.app",
            messagingSenderId: "916623805957",
            appId: "1:916623805957:web:09e9de341bc490004fd66c",
            measurementId: "G-KW08F2608Q"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();
        const storage = firebase.storage();

        // Global variables
        let currentUser = null;
        let currentFeed = 'foryou';
        let loadingMore = false;
        let videoIntersectionObserver = null;

        // ========================================
        // CORE FEED FUNCTIONS - Define early to ensure availability
        // ========================================
        
        // Feed functions - Make globally available
        window.loadVideoFeed = function loadVideoFeed() {
            console.log('📺 LOADING VIDEO FEED');
            const videoFeed = document.getElementById('videoFeed');
            if (!videoFeed) {
                console.error('❌ videoFeed element not found');
                return;
            }

            // Simple working feed - show welcome screen that works
            videoFeed.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; height: 100vh; text-align: center; color: rgba(255,255,255,0.7); background: linear-gradient(135deg, #1a1a2e, #16213e);">
                    <div>
                        <div style="font-size: 72px; margin-bottom: 30px;">📹</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px; color: white;">Welcome to VIB3!</h2>
                        <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                            Your TikTok-style video social platform is ready.<br>
                            Join the community and start sharing videos!
                        </p>
                        <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                            <button onclick="testModalOpen('signupModal')" class="btn btn-primary" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); border: none; border-radius: 25px; color: white; cursor: pointer;">
                                🎬 Join VIB3
                            </button>
                            <button onclick="testModalOpen('loginModal')" class="btn btn-secondary" style="padding: 15px 30px; font-size: 18px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 25px; color: white; cursor: pointer;">
                                🔑 Login
                            </button>
                            <button onclick="testModalOpen('uploadModal')" class="btn btn-secondary" style="padding: 15px 30px; font-size: 18px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 25px; color: white; cursor: pointer;">
                                📤 Upload
                            </button>
                        </div>
                        <div style="margin-top: 30px; font-size: 14px; color: rgba(255,255,255,0.5);">
                            All features including live streaming, video effects, and social interactions are ready!
                        </div>
                    </div>
                </div>
            `;
            
            console.log('✅ Welcome screen loaded successfully');
        };

        window.updateFeedForGuest = function updateFeedForGuest() {
            console.log('👥 Loading guest feed');
            // For now, just call the main loadVideoFeed function
            window.loadVideoFeed();
        };

        // Feed control functions
        window.switchFeedTab = function switchFeedTab(feedType) {
            currentFeed = feedType;
            window.loadVideoFeed();
        }

        window.loadTrendingVideos = function loadTrendingVideos() {
            currentFeed = 'trending';
            window.loadVideoFeed();
        }

        window.loadFollowingVideos = function loadFollowingVideos() {
            if (!currentUser) {
                openModal('loginModal');
                return;
            }
            currentFeed = 'following';
            window.loadVideoFeed();
        }

        window.updateFeedForUser = function updateFeedForUser() {
            console.log('👤 Loading user feed');
            // For now, just call the main loadVideoFeed function
            window.loadVideoFeed();
        };

        // ========================================
        // END CORE FEED FUNCTIONS
        // ========================================

        // Utility function to show notifications
        function showNotification(message, type = 'info', duration = 3000) {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            
            // Style the notification
            notification.style.cssText = `
                position: fixed;
                top: 100px;
                right: 20px;
                padding: 15px 25px;
                background: ${type === 'success' ? '#4ecdc4' : type === 'error' ? '#ff6b6b' : '#45b7d1'};
                color: white;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 500;
                z-index: 9999;
                animation: slideInRight 0.3s ease;
                box-shadow: 0 5px 20px rgba(0,0,0,0.2);
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, duration);
        }

        // Add notification animations
        const notificationStyles = document.createElement('style');
        notificationStyles.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(notificationStyles);

        // Modal functions
        function openModal(modalId) {
            console.log('🪟 Opening modal:', modalId);
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
                
                if (modalId === 'uploadModal') {
                    setupRecordButtonDirect();
                }
                console.log('✅ Modal opened:', modalId);
            } else {
                console.error('❌ Modal not found:', modalId);
            }
        }
        
        // Make openModal globally accessible
        window.openModal = openModal;

        // Simple test function for modals
        window.testModalOpen = function(modalId) {
            console.log('🧪 Testing modal open:', modalId);
            console.log('  - Modal element exists:', !!document.getElementById(modalId));
            openModal(modalId);
        };

        function closeModal(modalId) {
            console.log('🪟 Closing modal:', modalId);
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('show');
                document.body.style.overflow = 'auto'; // Restore scrolling
                
                // Stop camera when closing upload modal
                if (modalId === 'uploadModal') {
                    stopCamera();
                }
                console.log('✅ Modal closed successfully:', modalId);
            } else {
                console.error('❌ Modal not found for closing:', modalId);
            }
        }
        
        // Make closeModal globally accessible
        window.closeModal = closeModal;
        
        // Direct, simple record button setup
        function setupRecordButtonDirect() {
            console.log('🎬 ENHANCED: Direct record button setup...');
            
            // Enhanced setup attempt
            const trySetup = () => {
                // Try multiple selectors
                const selectors = [
                    '#recordVideoBtn',
                    'button[id="recordVideoBtn"]',
                    '.record-btn',
                    'button:contains("Record Video")',
                    '[data-action="record"]'
                ];
                
                let btn = null;
                for (const selector of selectors) {
                    btn = document.querySelector(selector);
                    if (btn) {
                        console.log(`✅ Found record button using selector: ${selector}`);
                        break;
                    }
                }
                
                console.log('🔍 Record button search result:', {
                    found: !!btn,
                    id: btn?.id,
                    className: btn?.className,
                    textContent: btn?.textContent?.trim()
                });
                
                if (btn) {
                    console.log('✅ Setting up enhanced record button handler');
                    
                    // Remove any existing handlers completely
                    btn.removeAttribute('onclick');
                    btn.onclick = null;
                    
                    // Clone button to remove all event listeners
                    const newBtn = btn.cloneNode(true);
                    btn.parentNode.replaceChild(newBtn, btn);
                    
                    // Add new enhanced handler
                    newBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('🎥 ENHANCED RECORD BUTTON CLICKED!');
                        
                        // Show immediate feedback
                        showNotification('📹 Starting camera...', 'info');
                        
                        // Comprehensive browser support check
                        if (!navigator.mediaDevices) {
                            showNotification('❌ Camera API not supported', 'error');
                            return;
                        }
                        
                        if (!navigator.mediaDevices.getUserMedia) {
                            showNotification('❌ getUserMedia not supported', 'error');
                            return;
                        }
                        
                        if (!window.MediaRecorder) {
                            showNotification('❌ MediaRecorder not supported', 'error');
                            return;
                        }
                        
                        console.log('✅ All browser APIs supported, proceeding...');
                        
                        // Find UI sections with multiple approaches
                        const recordingSection = document.getElementById('recordingSection') || 
                                                document.querySelector('.recording-section') ||
                                                document.querySelector('[data-section="recording"]');
                        
                        const fileSection = document.getElementById('fileUploadSection') ||
                                           document.querySelector('.file-upload-section') ||
                                           document.querySelector('[data-section="upload"]');
                        
                        console.log('🔍 UI sections found:', {
                            recording: !!recordingSection,
                            fileUpload: !!fileSection
                        });
                        
                        if (recordingSection && fileSection) {
                            console.log('🔄 Switching to camera interface...');
                            recordingSection.style.display = 'block';
                            fileSection.style.display = 'none';
                            
                            // Enhanced camera start
                            startCameraEnhanced();
                        } else {
                            console.error('❌ UI sections not found, trying alternative approach');
                            
                            // Alternative: direct camera access without UI switch
                            console.log('📷 Attempting direct camera access...');
                            startCameraEnhanced();
                        }
                    });
                    
                    // Add visual feedback on hover
                    newBtn.addEventListener('mouseenter', () => {
                        newBtn.style.backgroundColor = '#ff4444';
                    });
                    
                    newBtn.addEventListener('mouseleave', () => {
                        newBtn.style.backgroundColor = '';
                    });
                    
                    console.log('✅ Enhanced record button handler attached successfully');
                    return true;
                } else {
                    console.log('❌ Record button not found with any selector');
                    return false;
                }
            };
            
            // Try immediately and with multiple delays
            if (!trySetup()) {
                const delays = [100, 300, 500, 1000, 2000, 3000];
                delays.forEach(delay => {
                    setTimeout(() => {
                        if (!trySetup()) {
                            console.log(`⏳ Record button setup attempt after ${delay}ms failed`);
                        }
                    }, delay);
                });
            }
        }
        
        // Enhanced camera start with better error handling
        async function startCameraEnhanced() {
            console.log('📷 ENHANCED: Starting camera...');
            
            try {
                // Request camera access with specific constraints
                console.log('🔐 Requesting camera permissions...');
                
                const constraints = {
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'user'
                    },
                    audio: true
                };
                
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                console.log('✅ Camera stream obtained:', {
                    videoTracks: stream.getVideoTracks().length,
                    audioTracks: stream.getAudioTracks().length
                });
                
                // Find camera preview element with multiple approaches
                let preview = document.getElementById('cameraPreview') ||
                             document.querySelector('.camera-preview') ||
                             document.querySelector('[data-element="camera-preview"]') ||
                             document.querySelector('video.preview');
                
                console.log('🔍 Camera preview element search:', {
                    found: !!preview,
                    id: preview?.id,
                    tagName: preview?.tagName
                });
                
                if (preview) {
                    preview.srcObject = stream;
                    preview.autoplay = true;
                    preview.muted = true; // Prevent feedback
                    
                    // Wait for video to load
                    preview.addEventListener('loadedmetadata', () => {
                        console.log('✅ Camera preview loaded successfully');
                        showNotification('✅ Camera ready! Click "Start Recording" to begin.', 'success');
                    });
                    
                    console.log('✅ Camera stream attached to preview');
                } else {
                    console.error('❌ Camera preview element not found');
                    
                    // Create a temporary preview element
                    preview = document.createElement('video');
                    preview.id = 'tempCameraPreview';
                    preview.style.cssText = 'width: 100%; height: 300px; background: black; border-radius: 10px;';
                    preview.srcObject = stream;
                    preview.autoplay = true;
                    preview.muted = true;
                    
                    // Try to add it to the upload modal
                    const uploadModal = document.getElementById('uploadModal');
                    if (uploadModal) {
                        const modalContent = uploadModal.querySelector('.modal-content');
                        if (modalContent) {
                            modalContent.appendChild(preview);
                            console.log('✅ Created temporary camera preview');
                            showNotification('✅ Camera ready! Preview created.', 'success');
                        }
                    }
                }
                
                // Store stream globally for recording
                window.currentCameraStream = stream;
                
            } catch (error) {
                console.error('❌ Enhanced camera access failed:', error);
                
                let errorMessage = 'Camera access failed';
                if (error.name === 'NotAllowedError') {
                    errorMessage += ': Permission denied. Please allow camera access.';
                } else if (error.name === 'NotFoundError') {
                    errorMessage += ': No camera found.';
                } else if (error.name === 'NotReadableError') {
                    errorMessage += ': Camera is already in use by another application.';
                } else {
                    errorMessage += ': ' + error.message;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            }
        }
        
        // Legacy function for compatibility
        async function startCameraDirect() {
            return startCameraEnhanced();
        }

        // Navigation functions
        function handleNavigation(page) {
            console.log(`🧭 Navigation to: ${page}`);
            console.log('🔍 Navigation debug info:');
            console.log('  - page:', page);
            console.log('  - handleNavigation function called successfully');
            
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            document.querySelector(`[data-page="${page}"]`)?.classList.add('active');

            switch(page) {
                case 'foryou':
                case 'home':
                    console.log('📺 Loading For You feed...');
                    switchFeedTab('foryou');
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    break;
                case 'trending':
                    console.log('🔥 Loading Trending feed...');
                    loadTrendingVideos();
                    break;
                case 'following':
                    console.log('👥 Loading Following feed...');
                    loadFollowingVideos();
                    break;
                case 'profile':
                    if (currentUser) {
                        loadUserProfile();
                        openModal('profileModal');
                    } else {
                        openModal('loginModal');
                    }
                    break;
                case 'settings':
                    openModal('settingsModal');
                    break;
                case 'login':
                    console.log('🔑 Login case triggered - opening loginModal');
                    openModal('loginModal');
                    break;
                case 'signup':
                    console.log('➕ Signup case triggered - opening signupModal');
                    openModal('signupModal');
                    break;
                case 'logout':
                    console.log('Navigation logout clicked');
                    logout();
                    break;
                case 'live':
                    if (typeof startLiveStream === 'function') {
                        startLiveStream();
                    } else {
                        showNotification('📺 Opening live stream setup...', 'info');
                    }
                    break;
                default:
                    console.log('Unknown navigation:', page);
            }
        }

        // REMOVED: Duplicate feed control functions - now defined at top

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 DOM loaded, initializing VIB3 app...');
            
            // Enhanced diagnostic information
            console.log('🔍 Element diagnostics:');
            console.log('  - Login button:', !!document.getElementById('loginBtn'));
            console.log('  - Signup button:', !!document.getElementById('signupBtn'));
            console.log('  - Nav links:', document.querySelectorAll('.nav-link').length);
            console.log('  - Video feed:', !!document.getElementById('videoFeed'));
            console.log('  - Sidebar:', !!document.getElementById('sidebar'));
            console.log('  - Record video button:', !!document.getElementById('recordVideoBtn'));
            console.log('  - Upload modal:', !!document.getElementById('uploadModal'));
            console.log('  - Recording section:', !!document.getElementById('recordingSection'));
            console.log('  - Camera preview:', !!document.getElementById('cameraPreview'));
            
            // REMOVED: setupInitialAutoPlay() to prevent conflicts
            
            // Test sidebar click functionality
            setTimeout(() => {
                const testNavLinks = document.querySelectorAll('.nav-link');
                console.log(`🧪 Testing ${testNavLinks.length} navigation links...`);
                testNavLinks.forEach((link, i) => {
                    const page = link.getAttribute('data-page');
                    console.log(`  Link ${i}: ${page} - clickable: ${!!link.onclick || 'event-listener'}`);
                });
            }, 100);
            
            // Load initial feed state
            window.loadVideoFeed();
            
            initVib3Application();
            setupEventListeners();
            setupKeyboardShortcuts();
            setupSimpleTabPausing();
            
            console.log('✅ VIB3 app initialization complete');
            showNotification('🎉 VIB3 loaded successfully!', 'success', 2000);
            
            // Quick diagnostic test for navigation
            setTimeout(() => {
                console.log('🧪 Running navigation diagnostics...');
                const testNavLink = document.querySelector('.nav-link[data-page="foryou"]');
                if (testNavLink) {
                    console.log('✅ For You nav link found');
                    console.log('🔗 Event listeners attached:', testNavLink._events || 'Unknown');
                } else {
                    console.error('❌ For You nav link not found!');
                }
                
                // Test if functions are available globally
                console.log('🔍 Global functions check:');
                console.log('  - handleNavigation:', typeof handleNavigation);
                console.log('  - toggleVideoPlayback:', typeof window.toggleVideoPlayback);
                console.log('  - openModal:', typeof window.openModal);
                
                // Test navigation function directly
                console.log('🎯 Testing navigation function directly...');
                try {
                    handleNavigation('foryou');
                    console.log('✅ Navigation function works!');
                } catch (error) {
                    console.error('❌ Navigation function failed:', error);
                }
                
                // Add test buttons to manually check functionality
                setTimeout(() => {
                    console.log('🔍 Checking for videos on page...');
                    const videoElements = document.querySelectorAll('.video-element');
                    const videoCards = document.querySelectorAll('.video-card');
                    const videoWrappers = document.querySelectorAll('.video-wrapper');
                    
                    console.log(`📊 Found ${videoElements.length} video elements`);
                    console.log(`📊 Found ${videoCards.length} video cards`);
                    console.log(`📊 Found ${videoWrappers.length} video wrappers`);
                    
                    // Add test buttons for debugging
                    const testContainer = document.createElement('div');
                    testContainer.style.cssText = 'position: fixed; top: 10px; right: 10px; z-index: 9999; display: flex; flex-direction: column; gap: 5px;';
                    
                    // Video pause/play test button
                    if (videoWrappers.length > 0) {
                        const testBtn = document.createElement('button');
                        testBtn.textContent = '⏸️ Test Pause';
                        testBtn.style.cssText = 'padding: 10px; background: red; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;';
                        testBtn.onclick = () => {
                            console.log('🧪 Manual pause test triggered');
                            toggleCurrentVideoPlayback();
                        };
                        testContainer.appendChild(testBtn);
                    }
                    
                    // Video debug button
                    const debugBtn = document.createElement('button');
                    debugBtn.textContent = '🔍 Debug Videos';
                    debugBtn.style.cssText = 'padding: 10px; background: blue; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;';
                    debugBtn.onclick = () => {
                        console.log('🔍 Video Debug Info:');
                        const videos = document.querySelectorAll('.video-element');
                        videos.forEach((video, i) => {
                            console.log(`Video ${i}:`, {
                                src: video.currentSrc || video.src,
                                readyState: video.readyState,
                                paused: video.paused,
                                muted: video.muted,
                                duration: video.duration,
                                currentTime: video.currentTime,
                                networkState: video.networkState,
                                error: video.error
                            });
                        });
                        
                        // Try to force play current video
                        const currentCard = videoContainer?.querySelector('[data-position="0"]');
                        if (currentCard) {
                            const video = currentCard.querySelector('.video-element');
                            if (video) {
                                console.log('🎬 Force playing current video...');
                                video.muted = true;
                                video.play().then(() => {
                                    console.log('✅ Force play successful');
                                }).catch(e => {
                                    console.error('❌ Force play failed:', e);
                                });
                            }
                        }
                    };
                    testContainer.appendChild(debugBtn);
                    
                    // Audio test button
                    const audioTestBtn = document.createElement('button');
                    audioTestBtn.textContent = '🔊 Enable Audio';
                    audioTestBtn.style.cssText = 'padding: 10px; background: orange; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;';
                    audioTestBtn.onclick = () => {
                        console.log('🧪 Manual audio test triggered');
                        globalAudioEnabled = true;
                        enableAudioForCurrentVideo();
                    };
                    testContainer.appendChild(audioTestBtn);
                    
                    // Record button test
                    const recordTestBtn = document.createElement('button');
                    recordTestBtn.textContent = '🎥 Test Record';
                    recordTestBtn.style.cssText = 'padding: 10px; background: green; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;';
                    recordTestBtn.onclick = () => {
                        console.log('🧪 Manual record test triggered');
                        console.log('  - Upload modal exists:', !!document.getElementById('uploadModal'));
                        console.log('  - Record button exists:', !!document.getElementById('recordVideoBtn'));
                        
                        // Try to open upload modal and test record button
                        openModal('uploadModal');
                        
                        setTimeout(() => {
                            const recordBtn = document.getElementById('recordVideoBtn');
                            if (recordBtn) {
                                console.log('  - Record button found, triggering click...');
                                recordBtn.click();
                            } else {
                                console.error('  - Record button not found!');
                            }
                        }, 500);
                    };
                    testContainer.appendChild(recordTestBtn);
                    
                    document.body.appendChild(testContainer);
                    
                    // ADD TAB PAUSE TEST BUTTON
                    const tabTestBtn = document.createElement('button');
                    tabTestBtn.textContent = '🚨 Test Tab Pause';
                    tabTestBtn.style.cssText = 'position: fixed; top: 10px; right: 10px; z-index: 10000; padding: 10px; background: red; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 12px;';
                    tabTestBtn.onclick = () => {
                        console.log('🚨 TAB PAUSE TEST BUTTON CLICKED');
                        const videos = document.querySelectorAll('.video-element');
                        console.log('Videos found:', videos.length);
                        let pausedCount = 0;
                        videos.forEach((v, i) => {
                            if (!v.paused) {
                                v.pause();
                                pausedCount++;
                                console.log(`Paused video ${i}`);
                            }
                        });
                        alert(`Paused ${pausedCount} videos. Check console for details.`);
                    };
                    document.body.appendChild(tabTestBtn);
                    
                }, 3000);
            }, 200);
        });

        function initVib3Application() {
            auth.onAuthStateChanged((user) => {
                console.log('Auth state changed:', user ? `User logged in: ${user.email}` : 'User logged out');
                if (user) {
                    currentUser = user;
                    showUserMenu();
                    
                    // Enable audio on login (user interaction) - SIMPLIFIED
                    console.log('🔊 User logged in - enabling audio globally');
                    globalAudioEnabled = true;
                    
                    // Don't auto-unmute here to avoid conflicts
                    // Don't call loadVideoFeed() here - showUserMenu() handles content update
                } else {
                    currentUser = null;
                    hideUserMenu();
                    // Don't call loadVideoFeed() here - hideUserMenu() handles content update
                }
            });
        }

        function setupEventListeners() {
            console.log('Setting up event listeners...');
            
            // Modal close buttons
            const closeButtons = document.querySelectorAll('.close-btn');
            console.log('Close buttons found:', closeButtons.length);
            closeButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const modalId = e.target.getAttribute('data-modal');
                    closeModal(modalId);
                });
            });

            // Authentication buttons
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const logoutBtn = document.getElementById('logoutBtn');
            const profileBtn = document.getElementById('profileBtn');
            const settingsBtn = document.getElementById('settingsBtn');
            
            console.log('Auth buttons - Login:', !!loginBtn, 'Signup:', !!signupBtn);
            
            if (loginBtn) {
                console.log('Adding click listener to login button');
                loginBtn.addEventListener('click', (e) => {
                    console.log('Login button clicked!');
                    openModal('loginModal');
                });
            }
            
            if (signupBtn) {
                console.log('Adding click listener to signup button');
                signupBtn.addEventListener('click', (e) => {
                    console.log('Signup button clicked!');
                    openModal('signupModal');
                });
            }
            
            if (logoutBtn) {
                logoutBtn.addEventListener('click', logout);
            }

            if (profileBtn) {
                profileBtn.addEventListener('click', () => {
                    loadUserProfile();
                    openModal('profileModal');
                });
            }
            
            if (settingsBtn) {
                settingsBtn.addEventListener('click', () => openModal('settingsModal'));
            }

            // Upload button
            const uploadBtn = document.getElementById('uploadBtn');
            if (uploadBtn) {
                uploadBtn.addEventListener('click', () => {
                    if (currentUser) {
                        openModal('uploadModal');
                    } else {
                        openModal('loginModal');
                    }
                });
            }

            // Forms
            const loginForm = document.getElementById('loginForm');
            const signupForm = document.getElementById('signupForm');
            const uploadForm = document.getElementById('uploadForm');

            if (loginForm) {
                loginForm.addEventListener('submit', handleLogin);
            }

            if (signupForm) {
                signupForm.addEventListener('submit', handleSignup);
            }

            if (uploadForm) {
                uploadForm.addEventListener('submit', handleUpload);
            }

            // Comment form
            const commentForm = document.getElementById('commentForm');
            if (commentForm) {
                commentForm.addEventListener('submit', handleCommentSubmit);
            }


            // Search
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', handleSearch);
            }

            // File upload preview
            const videoFile = document.getElementById('videoFile');
            if (videoFile) {
                videoFile.addEventListener('change', previewVideo);
            }

            // Navigation links - Enhanced debugging and error handling
            const navLinks = document.querySelectorAll('.nav-link');
            console.log('Nav links found:', navLinks.length);
            navLinks.forEach((link, index) => {
                const page = link.getAttribute('data-page');
                console.log(`Nav link ${index}: ${page}`);
                
                // Add multiple event listeners to ensure it works
                ['click', 'touchstart'].forEach(eventType => {
                    link.addEventListener(eventType, (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        console.log(`🔗 Navigation triggered (${eventType}):`, page);
                        const clickedPage = e.target.closest('.nav-link').getAttribute('data-page');
                        console.log('🎯 Processing navigation to:', clickedPage);
                        
                        // Add visual feedback immediately
                        document.querySelectorAll('.nav-link').forEach(l => {
                            l.classList.remove('active');
                            l.style.background = '';
                        });
                        const targetLink = e.target.closest('.nav-link');
                        targetLink.classList.add('active');
                        targetLink.style.background = 'linear-gradient(45deg, rgba(255, 107, 107, 0.3), rgba(78, 205, 196, 0.3))';
                        
                        try {
                            handleNavigation(clickedPage);
                            console.log('✅ Navigation handled successfully');
                        } catch (error) {
                            console.error('❌ Navigation error:', error);
                            showNotification('❌ Navigation failed', 'error');
                        }
                        
                        if (window.innerWidth <= 768) {
                            document.getElementById('sidebar').classList.remove('open');
                        }
                    });
                });
                
                // Test click functionality immediately
                console.log(`Testing nav link ${index} click functionality...`);
            });

            // Mobile hamburger menu
            const logo = document.querySelector('.logo');
            if (logo) {
                logo.addEventListener('click', (e) => {
                    if (window.innerWidth <= 768) {
                        const sidebar = document.getElementById('sidebar');
                        sidebar.classList.toggle('open');
                    }
                });
            }
        }


        // Note: Old intersection observer removed - now using TikTok-style navigation

        // Note: Infinite scroll replaced with TikTok-style navigation

        function setupKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
                
                switch(e.code) {
                    case 'Space':
                        e.preventDefault();
                        toggleCurrentVideo();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        navigateVideo(-1);
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        navigateVideo(1);
                        break;
                    case 'KeyM':
                        e.preventDefault();
                        toggleMuteAllVideos();
                        break;
                }
            });
        }

        // SUPER SIMPLE & DIRECT: Tab switching pause functionality
        function setupSimpleTabPausing() {
            console.log('🔍 SUPER SIMPLE: Setting up tab pausing...');
            console.log('🧪 Initial state:', document.hidden, document.visibilityState);
            
            // Test immediately with a manual trigger
            window.testTabPausing = function() {
                console.log('🧪 MANUAL TEST: Pausing all videos');
                const videos = document.querySelectorAll('.video-element');
                console.log('Found videos:', videos.length);
                videos.forEach((v, i) => {
                    console.log(`Video ${i}: paused=${v.paused}, src=${v.src}`);
                    if (!v.paused) {
                        v.pause();
                        console.log(`✅ Paused video ${i}`);
                    }
                });
            };
            
            // Most basic approach
            document.addEventListener('visibilitychange', function() {
                console.log('🚨 VISIBILITY CHANGE EVENT FIRED!');
                console.log('Document hidden:', document.hidden);
                console.log('Visibility state:', document.visibilityState);
                console.log('Timestamp:', new Date().toISOString());
                
                if (document.hidden) {
                    console.log('🛑 TAB HIDDEN - PAUSING NOW');
                    
                    // Find and pause all videos
                    const allVideos = document.querySelectorAll('.video-element');
                    console.log('Videos found:', allVideos.length);
                    
                    let pausedCount = 0;
                    allVideos.forEach((video, index) => {
                        console.log(`Video ${index}: paused=${video.paused}`);
                        if (!video.paused) {
                            video.pause();
                            pausedCount++;
                            console.log(`✅ PAUSED video ${index}`);
                        }
                    });
                    
                    console.log(`🎯 Total videos paused: ${pausedCount}`);
                    
                    // Also try different selectors
                    const altVideos = document.querySelectorAll('video');
                    console.log('Alternative video search found:', altVideos.length);
                    altVideos.forEach((video, index) => {
                        if (!video.paused) {
                            video.pause();
                            console.log(`✅ PAUSED alt video ${index}`);
                        }
                    });
                }
            });
            
            // Also try these for testing
            window.addEventListener('blur', function() {
                console.log('🌫️ WINDOW BLUR EVENT');
                window.testTabPausing();
            });
            
            window.addEventListener('focus', function() {
                console.log('👁️ WINDOW FOCUS EVENT');
            });
            
            console.log('✅ Tab pausing setup complete');
            console.log('💡 Test manually by calling: window.testTabPausing()');
            
            // IMMEDIATE TEST - run in 5 seconds
            setTimeout(() => {
                console.log('🧪 RUNNING IMMEDIATE TEST IN 5 SECONDS...');
                console.log('Current page state:', {
                    hidden: document.hidden,
                    visibilityState: document.visibilityState,
                    hasFocus: document.hasFocus(),
                    videos: document.querySelectorAll('.video-element').length
                });
                
                // Test if we can find and control videos
                const videos = document.querySelectorAll('.video-element');
                if (videos.length > 0) {
                    console.log('✅ Found videos, testing pause/play...');
                    const firstVideo = videos[0];
                    console.log('First video state:', {
                        paused: firstVideo.paused,
                        currentTime: firstVideo.currentTime,
                        src: firstVideo.src
                    });
                    
                    // Try to pause it
                    if (!firstVideo.paused) {
                        firstVideo.pause();
                        console.log('✅ Successfully paused first video');
                    } else {
                        console.log('⚠️ First video was already paused');
                    }
                } else {
                    console.log('❌ No videos found!');
                }
            }, 5000);
        }

        // OLD FUNCTIONS BELOW (will be removed)
        function setupTabVisibilityHandling() {
            console.log('🔍 Setting up tab visibility handling...');
            
            let wasPlayingBeforeHide = false;
            
            // Test if visibilitychange is supported
            if (typeof document.hidden !== "undefined") {
                document.addEventListener('visibilitychange', handleVisibilityChange);
            } else if (typeof document.webkitHidden !== "undefined") {
                document.addEventListener('webkitvisibilitychange', handleVisibilityChange);
            } else if (typeof document.mozHidden !== "undefined") {
                document.addEventListener('mozvisibilitychange', handleVisibilityChange);
            } else if (typeof document.msHidden !== "undefined") {
                document.addEventListener('msvisibilitychange', handleVisibilityChange);
            }
            
            function handleVisibilityChange() {
                const currentCard = videoContainer?.querySelector('[data-position="0"]');
                if (!currentCard) {
                    console.log('⚠️ No current video card found for visibility change');
                    return;
                }
                
                const video = currentCard.querySelector('.video-element');
                if (!video) {
                    console.log('⚠️ No video element found for visibility change');
                    return;
                }
                
                const isHidden = document.hidden || document.webkitHidden || document.mozHidden || document.msHidden;
                
                if (isHidden) {
                    // Tab is now hidden - pause video
                    console.log('🙈 Tab hidden - pausing video. Current state:', {
                        paused: video.paused,
                        src: video.currentSrc
                    });
                    wasPlayingBeforeHide = !video.paused;
                    if (!video.paused) {
                        video.pause();
                        console.log('✅ Video paused due to tab switch');
                    }
                } else {
                    // Tab is now visible - resume video if it was playing
                    console.log('👁️ Tab visible - checking resume. Was playing:', wasPlayingBeforeHide);
                    if (wasPlayingBeforeHide) {
                        setTimeout(() => {
                            video.play().then(() => {
                                console.log('✅ Video resumed after tab switch');
                            }).catch(e => console.log('❌ Resume play failed:', e));
                        }, 100);
                    }
                }
            }
            
            // Also handle window focus/blur as backup
            window.addEventListener('blur', () => {
                console.log('🌫️ Window blur event triggered');
                const currentCard = videoContainer?.querySelector('[data-position="0"]');
                if (currentCard) {
                    const video = currentCard.querySelector('.video-element');
                    if (video && !video.paused) {
                        console.log('🛑 Pausing video due to window blur');
                        video.pause();
                    }
                }
            });
            
            window.addEventListener('focus', () => {
                console.log('👁️ Window focus event triggered');
            });
            
            console.log('✅ Tab visibility handling set up with browser compatibility');
        }
        
        // Enhanced and robust tab visibility handling
        function setupPageVisibilityHandling() {
            console.log('🔍 ENHANCED: Setting up tab visibility handling...');
            
            // Test current visibility state
            console.log('📊 Initial visibility state:', {
                hidden: document.hidden,
                visibilityState: document.visibilityState
            });
            
            let videosPlayingBeforeHide = [];
            
            // Enhanced visibility change handler
            function handleVisibilityChange() {
                console.log('🔄 ENHANCED: Visibility changed:', {
                    hidden: document.hidden,
                    visibilityState: document.visibilityState,
                    timestamp: new Date().toISOString()
                });
                
                const allVideos = document.querySelectorAll('.video-element');
                console.log(`📹 Found ${allVideos.length} videos to manage`);
                
                if (document.hidden) {
                    // Tab is now hidden - aggressively pause ALL videos
                    console.log('🙈 Tab hidden - PAUSING ALL VIDEOS');
                    videosPlayingBeforeHide = [];
                    
                    allVideos.forEach((video, index) => {
                        if (!video.paused) {
                            console.log(`⏸️ Pausing video ${index} due to tab switch`);
                            videosPlayingBeforeHide.push(index);
                            video.pause();
                        }
                    });
                    
                    console.log(`✅ Paused ${videosPlayingBeforeHide.length} videos`);
                } else {
                    // Tab is now visible - resume appropriate video
                    console.log('👁️ Tab visible - resuming video');
                    
                    // Resume the current video (position 0 in TikTok style)
                    const currentCard = videoContainer?.querySelector('[data-position="0"]');
                    if (currentCard) {
                        const currentVideo = currentCard.querySelector('.video-element');
                        if (currentVideo && currentVideo.paused) {
                            console.log('▶️ Resuming current video after tab switch');
                            
                            // Respect audio state
                            if (globalAudioEnabled) {
                                currentVideo.muted = false;
                            }
                            
                            currentVideo.play().then(() => {
                                console.log('✅ Video resumed successfully');
                            }).catch(e => {
                                console.log('❌ Resume failed:', e);
                                // Try muted play as fallback
                                currentVideo.muted = true;
                                currentVideo.play().catch(e2 => console.log('Muted resume also failed:', e2));
                            });
                        }
                    } else {
                        // Fallback: resume first video found
                        if (allVideos.length > 0) {
                            const firstVideo = allVideos[0];
                            if (firstVideo.paused) {
                                console.log('▶️ Resuming first video (fallback)');
                                firstVideo.play().catch(e => console.log('Fallback resume failed:', e));
                            }
                        }
                    }
                }
            }
            
            // Add the enhanced visibility change listener
            document.addEventListener('visibilitychange', handleVisibilityChange);
            
            // Also handle browser-specific events
            window.addEventListener('blur', function() {
                console.log('🌫️ Window blur - pausing videos');
                const allVideos = document.querySelectorAll('.video-element');
                allVideos.forEach(video => {
                    if (!video.paused) {
                        video.pause();
                        console.log('⏸️ Video paused due to window blur');
                    }
                });
            });
            
            window.addEventListener('pagehide', function() {
                console.log('📄 Page hide event - pausing videos');
                const allVideos = document.querySelectorAll('.video-element');
                allVideos.forEach(video => {
                    if (!video.paused) {
                        video.pause();
                    }
                });
            });
            
            // Test the visibility API
            setTimeout(() => {
                console.log('🧪 Testing visibility API:', {
                    supportsHidden: typeof document.hidden !== 'undefined',
                    supportsVisibilityState: typeof document.visibilityState !== 'undefined',
                    currentState: document.visibilityState,
                    hidden: document.hidden
                });
            }, 1000);
            
            console.log('✅ Enhanced tab visibility handling configured');
        }

        function toggleCurrentVideo() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    if (video.paused) {
                        video.play();
                    } else {
                        video.pause();
                    }
                }
            });
        }

        function navigateVideo(direction) {
            const videoCards = document.querySelectorAll('.video-card');
            const currentIndex = Array.from(videoCards).findIndex(card => {
                const rect = card.getBoundingClientRect();
                return rect.top >= 0 && rect.top < window.innerHeight / 2;
            });
            
            const nextIndex = currentIndex + direction;
            if (nextIndex >= 0 && nextIndex < videoCards.length) {
                videoCards[nextIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        function toggleMuteAllVideos() {
            const videos = document.querySelectorAll('.video-element');
            const anyUnmuted = Array.from(videos).some(v => !v.muted);
            
            videos.forEach(video => {
                video.muted = anyUnmuted;
            });
            
            showMuteNotification(anyUnmuted);
        }

        function showMuteNotification(isMuted) {
            const notification = document.createElement('div');
            notification.textContent = isMuted ? '🔇 Muted' : '🔊 Unmuted';
            notification.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0,0,0,0.8);
                color: white;
                padding: 15px 30px;
                border-radius: 25px;
                font-size: 18px;
                z-index: 9999;
                pointer-events: none;
            `;
            
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 1500);
        }

        // Modal functions
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('show');
            }
        }


        // Authentication functions
        async function handleLogin(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;

            // Validate inputs
            if (!email || !password) {
                showNotification('Please fill in all fields', 'error');
                return;
            }

            // Show loading state
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Signing in...';

            try {
                await signInWithEmailAndPassword(auth, email, password);
                showNotification('✅ Login successful!', 'success');
                closeModal('loginModal');
                e.target.reset();
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed. Please try again.';
                
                // Handle specific error codes
                switch (error.code) {
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/user-disabled':
                        errorMessage = 'This account has been disabled.';
                        break;
                    case 'auth/user-not-found':
                        errorMessage = 'No account found with this email.';
                        break;
                    case 'auth/wrong-password':
                        errorMessage = 'Incorrect password.';
                        break;
                    case 'auth/too-many-requests':
                        errorMessage = 'Too many failed attempts. Please try again later.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                    case 'auth/invalid-credential':
                        errorMessage = 'Invalid email or password.';
                        break;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        async function handleSignup(e) {
            e.preventDefault();
            const username = document.getElementById('signupUsername').value.trim();
            const email = document.getElementById('signupEmail').value.trim();
            const password = document.getElementById('signupPassword').value;

            // Validate inputs
            if (!username || !email || !password) {
                showNotification('Please fill in all fields', 'error');
                return;
            }

            if (username.length < 3) {
                showNotification('Username must be at least 3 characters long', 'error');
                return;
            }

            if (password.length < 6) {
                showNotification('Password must be at least 6 characters long', 'error');
                return;
            }

            // Show loading state
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Creating account...';

            try {
                // Check if username is already taken
                const usernameQuery = query(collection(db, 'users'), where('username', '==', username));
                const usernameSnapshot = await getDocs(usernameQuery);
                
                if (!usernameSnapshot.empty) {
                    showNotification('❌ Username is already taken', 'error');
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                    return;
                }

                // Create user account
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                
                // Create user profile in Firestore
                await addDoc(collection(db, 'users'), {
                    uid: userCredential.user.uid,
                    username: username,
                    email: email,
                    createdAt: new Date(),
                    followers: [],
                    following: [],
                    profilePicture: null,
                    bio: '',
                    verified: false,
                    settings: {
                        privacy: 'public',
                        notifications: {
                            push: true,
                            email: true,
                            sms: false
                        }
                    }
                });
                
                showNotification('✅ Account created successfully!', 'success');
                closeModal('signupModal');
                e.target.reset();
            } catch (error) {
                console.error('Signup error:', error);
                let errorMessage = 'Signup failed. Please try again.';
                
                // Handle specific error codes
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists.';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address.';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password should be at least 6 characters.';
                        break;
                    case 'auth/operation-not-allowed':
                        errorMessage = 'Email/password accounts are not enabled.';
                        break;
                    case 'auth/network-request-failed':
                        errorMessage = 'Network error. Please check your connection.';
                        break;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        async function logout() {
            try {
                await signOut(auth);
                showNotification('👋 Logged out successfully', 'info');
                setTimeout(() => location.reload(), 1000);
            } catch (error) {
                console.error('Logout error:', error);
                showNotification('❌ Error logging out', 'error');
            }
        }

        function showUserMenu() {
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const userMenu = document.getElementById('userMenu');
            
            if (loginBtn) loginBtn.style.display = 'none';
            if (signupBtn) signupBtn.style.display = 'none';
            if (userMenu) userMenu.style.display = 'flex';
            
            document.getElementById('sidebarProfileItem').style.display = 'block';
            document.getElementById('sidebarSettingsItem').style.display = 'block';
            document.getElementById('sidebarLogoutItem').style.display = 'block';
            document.getElementById('sidebarLoginItem').style.display = 'none';
            document.getElementById('sidebarSignupItem').style.display = 'none';
        }

        function hideUserMenu() {
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const userMenu = document.getElementById('userMenu');
            
            if (loginBtn) loginBtn.style.display = 'inline-block';
            if (signupBtn) signupBtn.style.display = 'inline-block';
            if (userMenu) userMenu.style.display = 'none';
            
            document.getElementById('sidebarProfileItem').style.display = 'none';
            document.getElementById('sidebarSettingsItem').style.display = 'none';
            document.getElementById('sidebarLogoutItem').style.display = 'none';
            document.getElementById('sidebarLoginItem').style.display = 'block';
            document.getElementById('sidebarSignupItem').style.display = 'block';
        }

        // Video upload functions
        async function handleUpload(e) {
            e.preventDefault();
            if (!currentUser) {
                showNotification('Please login to upload videos', 'info');
                return;
            }

            const fileInput = document.getElementById('videoFile');
            const description = document.getElementById('videoDescription').value.trim();
            const tags = document.getElementById('videoTags').value.trim();

            if (!fileInput.files[0]) {
                showNotification('Please select a video file', 'error');
                return;
            }

            const file = fileInput.files[0];
            
            // Validate file type
            const allowedTypes = ['video/mp4', 'video/quicktime', 'video/x-msvideo', 'video/avi'];
            if (!allowedTypes.includes(file.type)) {
                showNotification('Please select a valid video file (MP4, MOV, AVI)', 'error');
                return;
            }
            
            // Validate file size (100MB limit)
            const maxSize = 100 * 1024 * 1024; // 100MB
            if (file.size > maxSize) {
                showNotification('Video file must be less than 100MB', 'error');
                return;
            }

            // Show loading state
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Uploading...';
            
            try {
                showCompressionProgress();
                
                const compressedFile = await compressVideo(file);
                
                const timestamp = Date.now();
                const fileName = `${currentUser.uid}_${timestamp}_${file.name}`;
                const videoRef = storage.ref(`videos/${currentUser.uid}/${fileName}`);
                
                showNotification('Uploading video...', 'info');
                const snapshot = await videoRef.put(compressedFile);
                const downloadURL = await snapshot.ref.getDownloadURL();

                // Save video metadata to Firestore
                await db.collection('videos').add({
                    userId: currentUser.uid,
                    videoUrl: downloadURL,
                    description: description || '',
                    tags: tags ? tags.split(' ').filter(tag => tag.startsWith('#')) : [],
                    likes: [],
                    comments: [],
                    shares: 0,
                    views: 0,
                    createdAt: new Date(),
                    status: 'active',
                    metadata: {
                        fileName: fileName,
                        fileSize: compressedFile.size,
                        mimeType: compressedFile.type
                    }
                });

                showNotification('✅ Video uploaded successfully!', 'success');
                closeModal('uploadModal');
                window.loadVideoFeed();
                e.target.reset();
                
                // Reset file preview
                document.querySelector('.file-upload-label').innerHTML = `
                    <span class="file-upload-icon">📹</span>
                    <div>Click to select a video</div>
                    <small>MP4, MOV, AVI up to 100MB</small>
                `;
                
                hideCompressionProgress();
            } catch (error) {
                console.error('Upload error:', error);
                showNotification(`❌ Upload failed: ${error.message}`, 'error');
                hideCompressionProgress();
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        async function compressVideo(file) {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve(file);
                }, 1000);
            });
        }

        function showCompressionProgress() {
            const progressOverlay = document.createElement('div');
            progressOverlay.className = 'compress-progress';
            progressOverlay.id = 'compressionProgress';
            progressOverlay.innerHTML = `
                <div>🎬 Processing video...</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 0%"></div>
                </div>
                <div>Optimizing for streaming</div>
            `;
            
            document.body.appendChild(progressOverlay);
            
            let progress = 0;
            const interval = setInterval(() => {
                progress += Math.random() * 20;
                if (progress >= 100) {
                    progress = 100;
                    clearInterval(interval);
                }
                const fill = progressOverlay.querySelector('.progress-fill');
                if (fill) fill.style.width = progress + '%';
            }, 100);
        }

        function hideCompressionProgress() {
            const progressOverlay = document.getElementById('compressionProgress');
            if (progressOverlay) {
                progressOverlay.remove();
            }
        }

        function previewVideo(e) {
            const file = e.target.files[0];
            if (file) {
                const label = e.target.nextElementSibling;
                label.innerHTML = `
                    <span class="file-upload-icon">✓</span>
                    <div>Video selected: ${file.name}</div>
                    <small>Size: ${(file.size / 1024 / 1024).toFixed(2)}MB</small>
                `;
            }
        }

        // User menu and UI state management
        function showUserMenu() {
            console.log('Showing user menu - user logged in');
            
            // Hide login/signup buttons in header
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const userMenu = document.getElementById('userMenu');
            
            if (loginBtn) loginBtn.style.display = 'none';
            if (signupBtn) signupBtn.style.display = 'none';
            if (userMenu) userMenu.style.display = 'flex';
            
            // Update sidebar for logged-in user
            const sidebarProfileItem = document.getElementById('sidebarProfileItem');
            const sidebarSettingsItem = document.getElementById('sidebarSettingsItem');
            const sidebarLogoutItem = document.getElementById('sidebarLogoutItem');
            const sidebarLoginItem = document.getElementById('sidebarLoginItem');
            const sidebarSignupItem = document.getElementById('sidebarSignupItem');
            
            if (sidebarProfileItem) sidebarProfileItem.style.display = 'block';
            if (sidebarSettingsItem) sidebarSettingsItem.style.display = 'block';
            if (sidebarLogoutItem) sidebarLogoutItem.style.display = 'block';
            if (sidebarLoginItem) sidebarLoginItem.style.display = 'none';
            if (sidebarSignupItem) sidebarSignupItem.style.display = 'none';
            
            // Update the main feed to show logged-in content
            updateFeedForUser();
        }

        function hideUserMenu() {
            console.log('Hiding user menu - user logged out');
            
            // Show login/signup buttons in header
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');
            const userMenu = document.getElementById('userMenu');
            
            if (loginBtn) loginBtn.style.display = 'inline-block';
            if (signupBtn) signupBtn.style.display = 'inline-block';
            if (userMenu) userMenu.style.display = 'none';
            
            // Update sidebar for logged-out user
            const sidebarProfileItem = document.getElementById('sidebarProfileItem');
            const sidebarSettingsItem = document.getElementById('sidebarSettingsItem');
            const sidebarLogoutItem = document.getElementById('sidebarLogoutItem');
            const sidebarLoginItem = document.getElementById('sidebarLoginItem');
            const sidebarSignupItem = document.getElementById('sidebarSignupItem');
            
            if (sidebarProfileItem) sidebarProfileItem.style.display = 'none';
            if (sidebarSettingsItem) sidebarSettingsItem.style.display = 'none';
            if (sidebarLogoutItem) sidebarLogoutItem.style.display = 'none';
            if (sidebarLoginItem) sidebarLoginItem.style.display = 'block';
            if (sidebarSignupItem) sidebarSignupItem.style.display = 'block';
            
            // Update the main feed to show welcome content
            updateFeedForGuest();
        }

        // TikTok-style video feed state
        let allVideos = [];
        let currentVideoIndex = 0;
        let isLoadingVideos = false;
        let isTransitioning = false;
        let videoContainer = null;

        // Utility function to shuffle array
        function shuffleArray(array) {
            const shuffled = [...array];
            for (let i = shuffled.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
            }
            return shuffled;
        }

        // Initialize TikTok-style feed with smooth transitions
        function initializeTikTokFeed() {
            const videoFeed = document.getElementById('videoFeed');
            if (!videoFeed || !allVideos.length) return;
            
            console.log('🎬 Initializing TikTok-style feed...');
            
            // Create container for smooth transitions
            videoContainer = document.createElement('div');
            videoContainer.className = 'video-container';
            videoContainer.style.transform = 'translateY(0)';
            
            videoFeed.innerHTML = '';
            videoFeed.appendChild(videoContainer);
            
            // Pre-load current, next, and previous videos for smooth transitions
            loadVideoCards();
            
            // Auto-play current video immediately
            setTimeout(() => {
                autoPlayCurrentVideo();
                // Force auto-play even without user interaction for initial video
                forceInitialVideoPlay();
            }, 500);
        }

        // Load video cards (current + adjacent for smooth transitions)
        function loadVideoCards() {
            if (!videoContainer || !allVideos.length) return;
            
            videoContainer.innerHTML = '';
            
            // Load previous, current, and next video for smooth scrolling
            const indicesToLoad = [
                Math.max(0, currentVideoIndex - 1),
                currentVideoIndex,
                Math.min(allVideos.length - 1, currentVideoIndex + 1)
            ];
            
            indicesToLoad.forEach((index, position) => {
                if (allVideos[index]) {
                    const videoCard = createTikTokVideoCard(allVideos[index], index);
                    videoCard.style.transform = `translateY(${(position - 1) * 100}vh)`;
                    videoCard.setAttribute('data-position', position - 1);
                    videoContainer.appendChild(videoCard);
                }
            });
            
            // Update counter
            updateVideoCounter();
        }

        // TikTok-style auto-play state
        let globalAudioEnabled = false;
        
        // Force initial video to play even without user interaction
        function forceInitialVideoPlay() {
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (currentCard) {
                const video = currentCard.querySelector('.video-element');
                if (video && video.paused) {
                    console.log('🎬 Force playing initial video');
                    // Start muted to comply with browser policies
                    video.muted = true;
                    video.play().then(() => {
                        console.log('✅ Initial video auto-playing (muted)');
                    }).catch(e => {
                        console.log('❌ Even muted autoplay failed:', e);
                        // Try again after a short delay
                        setTimeout(() => {
                            video.play().catch(() => {});
                        }, 1000);
                    });
                }
            }
        }
        
        // More aggressive force play function
        // REMOVED: Conflicting force play function
        
        // REMOVED: Conflicting auto-play system to prevent issues
        
        // FIXED: Auto-play current video using TikTok-style positioning
        function autoPlayCurrentVideo() {
            console.log('🎬 FIXED: Auto-playing current video...');
            playCurrentVideoCard();
        }
        
        // Play the video card at position 0 (current position)
        function playCurrentVideoCard() {
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (!currentCard) {
                console.log('❌ No current video card found (position 0)');
                return;
            }
            
            const video = currentCard.querySelector('.video-element');
            if (!video) {
                console.log('❌ No video element found in current card');
                return;
            }
            
            console.log('🎯 Found current video card, starting playback');
            
            // Pause all other videos first
            const allVideoElements = document.querySelectorAll('.video-element');
            allVideoElements.forEach(v => {
                if (v !== video && !v.paused) {
                    v.pause();
                }
            });
            
            // Set audio state based on global setting
            video.muted = !globalAudioEnabled;
            video.volume = globalAudioEnabled ? 1.0 : 0;
            
            // Play the video
            if (video.paused) {
                video.play().then(() => {
                    console.log(`✅ Current video playing (${globalAudioEnabled ? 'with audio' : 'muted'})`);
                    
                    // If audio not enabled yet, set up click listener
                    if (!globalAudioEnabled) {
                        setupAudioEnableListener();
                    }
                }).catch(e => {
                    console.log('❌ Current video play failed:', e);
                    // Try muted as fallback
                    video.muted = true;
                    video.play().catch(e2 => console.log('Even muted play failed:', e2));
                });
            }
        }
        
        // Set up listener to enable audio on first click
        function setupAudioEnableListener() {
            if (globalAudioEnabled) return; // Already enabled
            
            const enableAudio = () => {
                console.log('👆 User clicked - enabling audio');
                globalAudioEnabled = true;
                
                // Unmute current video
                const currentCard = videoContainer?.querySelector('[data-position="0"]');
                if (currentCard) {
                    const video = currentCard.querySelector('.video-element');
                    if (video) {
                        video.muted = false;
                        video.volume = 1.0;
                        showNotification('🔊 Sound enabled!', 'success');
                    }
                }
                
                // Remove listener
                document.removeEventListener('click', enableAudio);
            };
            
            document.addEventListener('click', enableAudio, { once: true });
        }
        
        // FIXED: Enable audio for current video using TikTok positioning
        function enableAudioForCurrentVideo() {
            console.log('🔊 FIXED: Enabling audio for current video...');
            
            globalAudioEnabled = true;
            
            // Find the current video card (position 0)
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (!currentCard) {
                console.log('❌ No current video card found for audio enable');
                return;
            }
            
            const currentVideo = currentCard.querySelector('.video-element');
            if (!currentVideo) {
                console.log('❌ No video element found in current card for audio enable');
                return;
            }
            
            console.log('✅ Found current video, enabling audio');
            
            // Enable audio
            currentVideo.muted = false;
            currentVideo.volume = 1.0;
            
            // If it's paused, play it
            if (currentVideo.paused) {
                currentVideo.play().catch(e => console.log('Play with audio failed:', e));
            }
            
            showNotification('🔊 Sound enabled!', 'success');
        }

        // Enable audio on first user click anywhere on the page
        function enableAudioOnFirstClick() {
            if (!globalAudioEnabled) {
                const enableAudio = () => {
                    console.log('🔊 First click detected - enabling audio globally');
                    globalAudioEnabled = true;
                    
                    // Use the dedicated function to enable audio
                    enableAudioForCurrentVideo();
                    
                    // Remove the event listener after first use
                    document.removeEventListener('click', enableAudio);
                    document.removeEventListener('touchstart', enableAudio);
                };
                
                // Add one-time event listeners
                document.addEventListener('click', enableAudio, { once: true });
                document.addEventListener('touchstart', enableAudio, { once: true });
            }
        }

        // Update video counter
        function updateVideoCounter() {
            const counter = document.getElementById('videoCounter');
            if (counter) {
                counter.textContent = `${currentVideoIndex + 1} / ${allVideos.length}`;
            }
        }

        // FIXED: Navigate to next/previous video with TikTok-style positioning
        function navigateVideo(direction) {
            if (!allVideos.length || isTransitioning) {
                console.log('🚫 Navigation blocked: videos=' + allVideos.length + ', transitioning=' + isTransitioning);
                return;
            }
            
            console.log(`🎬 FIXED: Navigating ${direction > 0 ? 'down' : 'up'} from video ${currentVideoIndex + 1}/${allVideos.length}`);
            isTransitioning = true;
            
            // Pause current video
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (currentCard) {
                const video = currentCard.querySelector('.video-element');
                if (video && !video.paused) {
                    video.pause();
                    console.log('⏸️ Paused current video before navigation');
                }
            }
            
            // Calculate new index with looping
            const newIndex = currentVideoIndex + direction;
            if (newIndex >= allVideos.length) {
                currentVideoIndex = 0;
            } else if (newIndex < 0) {
                currentVideoIndex = allVideos.length - 1;
            } else {
                currentVideoIndex = newIndex;
            }
            
            console.log(`🎯 Moving to video ${currentVideoIndex + 1}/${allVideos.length}`);
            
            // Perform smooth transition
            performSmoothTransition(direction);
        }

        // FIXED: Perform smooth transition animation with TikTok-style positioning
        function performSmoothTransition(direction) {
            if (!videoContainer) {
                console.log('❌ No video container for transition');
                isTransitioning = false;
                return;
            }
            
            console.log(`🎬 FIXED: Starting transition: direction=${direction}, currentIndex=${currentVideoIndex}`);
            
            // Disable transition temporarily to prevent conflicts
            videoContainer.style.transition = 'none';
            
            // Add transition class for visual feedback
            videoContainer.classList.add('transitioning');
            
            // Immediately load new video cards at target position
            loadVideoCards();
            
            // Set initial position for smooth animation
            videoContainer.style.transform = `translateY(${direction * 100}vh)`;
            
            // Force a reflow to ensure the initial position is applied
            videoContainer.offsetHeight;
            
            // Re-enable transitions and animate to final position
            videoContainer.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            videoContainer.style.transform = 'translateY(0vh)';
            
            // After animation completes
            setTimeout(() => {
                videoContainer.classList.remove('transitioning');
                
                console.log('🎯 About to auto-play new video after transition');
                
                // Auto-play new video
                playCurrentVideoCard();
                
                // Reset transition flag
                isTransitioning = false;
                
                console.log(`✅ Transition complete: now on video ${currentVideoIndex + 1}/${allVideos.length}`);
            }, 450);
        }

        // Setup keyboard and touch navigation
        function setupVideoNavigation() {
            // Remove existing listeners
            document.removeEventListener('keydown', handleVideoNavigation);
            
            // Add keyboard navigation
            document.addEventListener('keydown', handleVideoNavigation);
            
            // Add touch/swipe navigation
            setupTouchNavigation();
        }

        function handleVideoNavigation(e) {
            if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
            
            switch(e.code) {
                case 'ArrowUp':
                    e.preventDefault();
                    navigateVideo(-1);
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    navigateVideo(1);
                    break;
                case 'Space':
                    e.preventDefault();
                    toggleCurrentVideoPlayback();
                    break;
            }
        }

        // Make handleNavigation globally accessible
        window.handleNavigation = handleNavigation;

        function toggleCurrentVideoPlayback() {
            // Find the current video (the one that's in the center of the screen)
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (!currentCard) {
                console.log('❌ No current video card found');
                return;
            }
            
            const currentVideo = currentCard.querySelector('.video-element');
            if (currentVideo) {
                // Mark as user controlled to prevent auto-play interference
                currentVideo.setAttribute('data-user-controlled', 'true');
                
                console.log('🎬 User toggling current video playback, paused:', currentVideo.paused);
                
                // Pause all other videos first
                const allVideos = document.querySelectorAll('.video-element');
                allVideos.forEach(video => {
                    if (video !== currentVideo && !video.paused) {
                        video.pause();
                        console.log('⏸️ Paused other video');
                    }
                });
                
                if (currentVideo.paused) {
                    console.log('▶️ Playing current video');
                    // Respect current audio state
                    if (globalAudioEnabled) {
                        currentVideo.muted = false;
                    }
                    currentVideo.play().catch(e => console.log('Play failed:', e));
                } else {
                    console.log('⏸️ Pausing current video');
                    currentVideo.pause();
                }
            } else {
                console.log('❌ No current video element found');
            }
        }

        function toggleVideoMute() {
            console.log('🔊 TOGGLE VIDEO MUTE CALLED - Enhanced version');
            
            // Find the current video (the one that's in the center of the screen)
            const currentCard = videoContainer?.querySelector('[data-position="0"]');
            if (!currentCard) {
                console.log('❌ No current video card found for mute');
                return;
            }
            
            const currentVideo = currentCard.querySelector('.video-element');
            
            if (currentVideo) {
                const wasEnhanced = currentVideo.muted;
                currentVideo.muted = !currentVideo.muted;
                
                // Set user preference attribute to prevent audio systems from overriding
                if (currentVideo.muted) {
                    currentVideo.setAttribute('data-user-muted', 'true');
                    console.log('🔇 Setting data-user-muted attribute on current video only');
                } else {
                    currentVideo.removeAttribute('data-user-muted');
                    console.log('🔊 Removing data-user-muted attribute from current video only');
                }
                
                // Show notification
                showNotification(currentVideo.muted ? '🔇 Muted' : '🔊 Unmuted', 'info', 1000);
                console.log('🔊 Video mute toggled:', currentVideo.muted ? 'muted' : 'unmuted');
                console.log('🔊 User muted attribute:', currentVideo.hasAttribute('data-user-muted'));
            } else {
                console.log('❌ No video element found in current card');
            }
        }


        // Setup touch and scroll navigation
        function setupTouchNavigation() {
            const videoFeed = document.getElementById('videoFeed');
            if (!videoFeed) return;
            
            let startY = 0;
            let endY = 0;
            let isScrolling = false;
            let touchStartTime = 0;
            
            // Touch navigation for mobile
            videoFeed.addEventListener('touchstart', (e) => {
                if (isTransitioning) {
                    e.preventDefault();
                    return;
                }
                startY = e.touches[0].clientY;
                touchStartTime = Date.now();
            }, { passive: false });
            
            videoFeed.addEventListener('touchmove', (e) => {
                // Prevent default scrolling during touch
                e.preventDefault();
            }, { passive: false });
            
            videoFeed.addEventListener('touchend', (e) => {
                if (isTransitioning) {
                    e.preventDefault();
                    return;
                }
                
                endY = e.changedTouches[0].clientY;
                const diff = startY - endY;
                const touchDuration = Date.now() - touchStartTime;
                
                // Require minimum swipe distance and reasonable duration
                if (Math.abs(diff) > 50 && touchDuration < 1000) {
                    e.preventDefault();
                    if (diff > 0) {
                        // Swipe up - next video
                        navigateVideo(1);
                    } else {
                        // Swipe down - previous video
                        navigateVideo(-1);
                    }
                }
            }, { passive: false });
            
            // Wheel navigation for desktop with better debouncing
            videoFeed.addEventListener('wheel', (e) => {
                e.preventDefault();
                
                if (isScrolling || isTransitioning) return;
                
                isScrolling = true;
                
                // Use a timeout to prevent rapid scrolling
                setTimeout(() => {
                    if (e.deltaY > 0) {
                        // Scroll down - next video
                        navigateVideo(1);
                    } else {
                        // Scroll up - previous video
                        navigateVideo(-1);
                    }
                    
                    // Reset scroll flag after transition
                    setTimeout(() => {
                        isScrolling = false;
                    }, 600); // Longer debounce for wheel
                }, 50);
                
            }, { passive: false });
            
            // Completely prevent any scroll on the video feed
            videoFeed.addEventListener('scroll', (e) => {
                e.preventDefault();
                videoFeed.scrollTop = 0;
                return false;
            }, { passive: false });
            
            // Prevent scrolling on the body when over video feed
            videoFeed.addEventListener('mouseenter', () => {
                document.body.style.overflow = 'hidden';
            });
            
            videoFeed.addEventListener('mouseleave', () => {
                document.body.style.overflow = 'auto';
            });
        }

        // Create TikTok-style full-screen video card
        function createTikTokVideoCard(videoData, index) {
            const card = document.createElement('div');
            card.className = 'video-card';
            card.setAttribute('data-video-id', videoData.id);
            card.setAttribute('data-video-index', index);
            
            const username = videoData.username || 'User';
            
            card.innerHTML = `
                <div class="video-wrapper">
                    <video class="video-element" 
                           playsinline 
                           preload="metadata" 
                           muted
                           loop
                           webkit-playsinline>
                        <source src="${videoData.videoUrl}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    
                    <!-- Right side action buttons (TikTok style) -->
                    <div style="position: absolute; right: 15px; bottom: 100px; display: flex; flex-direction: column; gap: 20px; z-index: 10;">
                        <button class="tiktok-action-btn" onclick="event.stopPropagation(); toggleLike('${videoData.id}', this)" style="background: none; border: none; width: 50px; height: 60px; color: white; font-size: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-direction: column; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            ❤️
                            <span style="font-size: 12px; margin-top: 2px; font-weight: bold;">${videoData.likes?.length || 0}</span>
                        </button>
                        <button class="tiktok-action-btn" onclick="event.stopPropagation(); toggleComments('${videoData.id}')" style="background: none; border: none; width: 50px; height: 60px; color: white; font-size: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-direction: column; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            💬
                            <span style="font-size: 12px; margin-top: 2px; font-weight: bold;">${videoData.comments?.length || 0}</span>
                        </button>
                        <button class="tiktok-action-btn" onclick="event.stopPropagation(); openDuetStitch({id: '${videoData.id}', title: '${videoData.description || 'Video'}', username: '${videoData.username}'})" style="background: none; border: none; width: 50px; height: 60px; color: white; font-size: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-direction: column; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            🎭
                            <span style="font-size: 10px; margin-top: 2px; font-weight: bold;">Duet</span>
                        </button>
                        <button class="tiktok-action-btn" onclick="event.stopPropagation(); openMusicLibrary()" style="background: none; border: none; width: 50px; height: 60px; color: white; font-size: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; flex-direction: column; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            🎵
                            <span style="font-size: 10px; margin-top: 2px; font-weight: bold;">Music</span>
                        </button>
                        <button class="tiktok-action-btn" onclick="event.stopPropagation(); shareVideo('${videoData.id}')" style="background: none; border: none; width: 50px; height: 60px; color: white; font-size: 28px; cursor: pointer; display: flex; align-items: center; justify-content: center; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            📤
                        </button>
                    </div>
                    
                    <!-- Bottom left info -->
                    <div style="position: absolute; bottom: 20px; left: 15px; right: 80px; z-index: 10;">
                        <div style="display: flex; align-items: center; margin-bottom: 10px; gap: 10px;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); display: flex; align-items: center; justify-content: center; font-weight: bold; color: white;">
                                ${username.charAt(0).toUpperCase()}
                            </div>
                            <span style="font-weight: 600; color: white;">@${username}</span>
                            <button onclick="event.stopPropagation(); toggleFollow('${videoData.userId}', this)" style="background: rgba(255,255,255,0.2); color: white; border: 1px solid white; padding: 5px 15px; border-radius: 15px; font-size: 12px; cursor: pointer;">
                                Follow
                            </button>
                        </div>
                        <p style="color: white; margin: 0; font-size: 14px; line-height: 1.4; text-shadow: 1px 1px 2px rgba(0,0,0,0.8);">
                            ${videoData.description || 'No description'}
                        </p>
                    </div>
                    
                    <!-- Play/pause indicator -->
                    <div class="play-pause-indicator" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.7); border-radius: 50%; width: 80px; height: 80px; display: flex; align-items: center; justify-content: center; font-size: 32px; color: white; opacity: 0; transition: opacity 0.3s ease; pointer-events: none;">
                        ▶️
                    </div>
                    
                    
                </div>
            `;

            // Add video error handling and TikTok-like optimizations
            const video = card.querySelector('.video-element');
            const wrapper = card.querySelector('.video-wrapper');
            
            // TikTok-like video optimization
            video.addEventListener('loadstart', () => {
                console.log('📡 Video loading started:', videoData.videoUrl);
            });
            
            video.addEventListener('loadeddata', () => {
                console.log('✅ TikTok video loaded:', videoData.videoUrl);
            });
            
            video.addEventListener('canplaythrough', () => {
                console.log('🚀 Video ready for seamless playback:', videoData.videoUrl);
            });
            
            video.addEventListener('error', (e) => {
                console.error('❌ TikTok video error:', e, videoData.videoUrl);
                // Retry with different approach
                setTimeout(() => {
                    video.load();
                }, 1000);
            });
            
            // TikTok-like buffering optimization
            video.addEventListener('waiting', () => {
                console.log('⏳ Video buffering...');
            });
            
            video.addEventListener('canplay', () => {
                console.log('▶️ Video can start playing');
            });
            
            // Show play/pause indicator on state changes
            const indicator = card.querySelector('.play-pause-indicator');
            
            video.addEventListener('play', () => {
                console.log('🎵 Video started playing');
                indicator.textContent = '⏸️';
                indicator.style.opacity = '1';
                setTimeout(() => indicator.style.opacity = '0', 1000);
            });
            
            video.addEventListener('pause', () => {
                console.log('⏸️ Video paused');
                indicator.textContent = '▶️';
                indicator.style.opacity = '1';
                setTimeout(() => indicator.style.opacity = '0', 1000);
            });
            
            // Add click handler to wrapper (not video) to avoid conflicts with native controls
            wrapper.addEventListener('click', (e) => {
                // Only trigger if clicking on wrapper itself, not video or action buttons
                if (e.target === wrapper || e.target === video) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Mark as user controlled to prevent auto-play interference
                    video.setAttribute('data-user-controlled', 'true');
                    
                    // Pause all other videos first
                    const allVideos = document.querySelectorAll('.video-element');
                    allVideos.forEach(otherVideo => {
                        if (otherVideo !== video && !otherVideo.paused) {
                            otherVideo.pause();
                        }
                    });
                    
                    // Toggle this specific video
                    if (video.paused) {
                        video.play().catch(e => console.log('Click play failed:', e));
                    } else {
                        video.pause();
                    }
                }
            });
            
            // TikTok-style auto-advance to next video when current video ends
            video.addEventListener('ended', () => {
                console.log('📹 Video ended - auto-advancing to next video');
                setTimeout(() => {
                    navigateVideo(1); // Auto-scroll to next video
                }, 500); // Small delay like TikTok
            });

            return card;
        }

        // Legacy function for profile videos (keep for backward compatibility)
        function createVideoCard(videoData) {
            return createTikTokVideoCard(videoData, 0);
        }

        // Global video control state to prevent conflicts
        let isVideoTransitioning = false;
        let currentPlayingVideo = null;

        // Reset video control state
        function resetVideoControlState() {
            isVideoTransitioning = false;
            currentPlayingVideo = null;
            console.log('🔄 Video control state reset');
        }

        // Video playback toggle - Fixed to prevent play/pause conflicts
        function toggleVideoPlayback(wrapper) {
            console.log('🎬 Video playback toggle called');
            
            if (isVideoTransitioning) {
                console.log('⏳ Video transition in progress, ignoring click');
                return;
            }
            
            if (!wrapper) {
                console.error('❌ No wrapper provided');
                return;
            }
            
            const video = wrapper.querySelector('.video-element');
            const indicator = wrapper.querySelector('.play-pause-indicator');
            
            if (!video) {
                console.error('❌ No video element found');
                return;
            }
            
            // Set transition flag to prevent conflicts
            isVideoTransitioning = true;
            
            console.log(`📊 Video state: paused=${video.paused}, src=${video.currentSrc || 'none'}`);
            
            if (video.paused) {
                console.log('▶️ Starting playback...');
                
                // First, stop any currently playing video
                if (currentPlayingVideo && currentPlayingVideo !== video && !currentPlayingVideo.paused) {
                    console.log('⏹️ Stopping current video');
                    currentPlayingVideo.pause();
                    currentPlayingVideo.currentTime = 0;
                }
                
                // Set this as the current playing video
                currentPlayingVideo = video;
                
                // Ensure video is ready
                if (video.readyState < 2) {
                    console.log('📥 Video not ready, loading...');
                    video.load();
                }
                
                // Add a small delay to prevent race conditions
                setTimeout(() => {
                    video.play().then(() => {
                        console.log('✅ Video playing successfully');
                        if (indicator) {
                            indicator.textContent = '⏸️';
                            indicator.style.opacity = '1';
                            setTimeout(() => indicator.style.opacity = '0', 1000);
                        }
                        isVideoTransitioning = false;
                    }).catch((error) => {
                        console.error('❌ Play failed:', error.message);
                        
                        // Reset state on error
                        isVideoTransitioning = false;
                        currentPlayingVideo = null;
                        
                        if (error.name === 'AbortError') {
                            showNotification('⚠️ Video interrupted, try again', 'info');
                        } else {
                            showNotification('❌ Video playback failed', 'error');
                        }
                    });
                }, 100);
                
            } else {
                console.log('⏸️ Pausing video...');
                video.pause();
                currentPlayingVideo = null;
                
                if (indicator) {
                    indicator.textContent = '▶️';
                    indicator.style.opacity = '1';
                    setTimeout(() => indicator.style.opacity = '0', 1000);
                }
                
                isVideoTransitioning = false;
            }
        }

        // Video recording and upload functionality
        let mediaRecorder = null;
        let recordedChunks = [];
        let currentVideoBlob = null;

        function setupVideoRecording() {
            console.log('🎬 Setting up video recording...');
            
            // Use a more direct approach - wait for DOM to be ready
            const checkAndSetup = () => {
                const recordBtn = document.getElementById('recordVideoBtn');
                console.log('🔴 Record button search result:', !!recordBtn);
                
                if (recordBtn && !recordBtn.onclick) {
                    console.log('✅ Setting up record button click handler');
                    
                    recordBtn.onclick = async function(e) {
                        e.preventDefault();
                        console.log('🎥 Record video button clicked!');
                        
                        // Check browser support
                        if (!navigator.mediaDevices?.getUserMedia) {
                            showNotification('❌ Camera not supported', 'error');
                            return;
                        }
                        
                        if (!window.MediaRecorder) {
                            showNotification('❌ Recording not supported', 'error');
                            return;
                        }
                        
                        showNotification('📹 Activating camera...', 'info');
                        
                        try {
                            // Show recording interface
                            const recordingSection = document.getElementById('recordingSection');
                            const fileUploadSection = document.getElementById('fileUploadSection');
                            
                            console.log('🎬 Switching to recording interface...');
                            console.log('Elements found:', {
                                recording: !!recordingSection,
                                fileUpload: !!fileUploadSection
                            });
                            
                            if (recordingSection) {
                                recordingSection.style.display = 'block';
                            }
                            if (fileUploadSection) {
                                fileUploadSection.style.display = 'none';
                            }
                            
                            // Start camera
                            console.log('📷 Requesting camera access...');
                            await startCamera();
                            
                        } catch (error) {
                            console.error('❌ Recording setup failed:', error);
                            showNotification(`❌ Failed: ${error.message}`, 'error');
                        }
                    };
                    
                    console.log('✅ Record button handler attached');
                    return true;
                } else {
                    console.log('⚠️ Record button not found or already has handler');
                    return false;
                }
            };
            
            // Try multiple times with different delays
            if (!checkAndSetup()) {
                setTimeout(checkAndSetup, 100);
                setTimeout(checkAndSetup, 300);
                setTimeout(checkAndSetup, 500);
                setTimeout(checkAndSetup, 1000);
            }
            
            // Setup other upload modal buttons
            setTimeout(() => {
                // Upload File button
                document.getElementById('uploadFileBtn')?.addEventListener('click', () => {
                    document.getElementById('recordingSection').style.display = 'none';
                    document.getElementById('fileUploadSection').style.display = 'block';
                    document.getElementById('videoPreviewSection').style.display = 'none';
                    stopCamera();
                });

                // Start Recording button
                document.getElementById('startRecordBtn')?.addEventListener('click', startRecording);

                // Stop Recording button
                document.getElementById('stopRecordBtn')?.addEventListener('click', stopRecording);

                // Clear Video button
                document.getElementById('clearVideoBtn')?.addEventListener('click', clearVideo);

                // File input change
                document.getElementById('videoFile')?.addEventListener('change', handleFileSelection);
            }, 250);
        }

        async function startCamera() {
            try {
                console.log('📹 Requesting camera permission...');
                
                // Try to check permissions (not supported in all browsers)
                try {
                    const permissions = await navigator.permissions.query({ name: 'camera' });
                    console.log('📷 Camera permission status:', permissions.state);
                    
                    if (permissions.state === 'denied') {
                        showNotification('❌ Camera permission denied. Please enable camera access in your browser settings.', 'error');
                        return;
                    }
                } catch (permError) {
                    console.log('⚠️ Permission query not supported, proceeding with camera request');
                }
                
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 1280 }, 
                        height: { ideal: 720 },
                        facingMode: 'user'
                    }, 
                    audio: true 
                });
                
                console.log('📹 Camera stream obtained:', stream.getTracks().length, 'tracks');
                
                const cameraPreview = document.getElementById('cameraPreview');
                if (!cameraPreview) {
                    console.error('❌ Camera preview element not found');
                    showNotification('❌ Camera preview not found', 'error');
                    return;
                }
                
                cameraPreview.srcObject = stream;
                
                // Wait for video to load
                await new Promise((resolve, reject) => {
                    cameraPreview.onloadedmetadata = () => {
                        console.log('✅ Camera preview loaded');
                        resolve();
                    };
                    cameraPreview.onerror = reject;
                    setTimeout(reject, 10000); // 10 second timeout
                });
                
                showNotification('✅ Camera ready! Click "Start Recording" to begin.', 'success');
                
            } catch (error) {
                console.error('❌ Camera error:', error);
                let errorMessage = 'Unable to access camera. ';
                
                if (error.name === 'NotAllowedError') {
                    errorMessage += 'Please allow camera access and try again.';
                } else if (error.name === 'NotFoundError') {
                    errorMessage += 'No camera found on this device.';
                } else if (error.name === 'NotReadableError') {
                    errorMessage += 'Camera is already in use by another application.';
                } else {
                    errorMessage += error.message;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            }
        }

        function stopCamera() {
            const cameraPreview = document.getElementById('cameraPreview');
            const stream = cameraPreview.srcObject;
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                cameraPreview.srcObject = null;
            }
        }

        async function startRecording() {
            try {
                const cameraPreview = document.getElementById('cameraPreview');
                const stream = cameraPreview.srcObject;
                
                if (!stream) {
                    showNotification('❌ No camera stream available', 'error');
                    return;
                }

                recordedChunks = [];
                mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    currentVideoBlob = new Blob(recordedChunks, { type: 'video/webm' });
                    showVideoPreview(currentVideoBlob);
                    document.getElementById('uploadSubmitBtn').disabled = false;
                    showNotification('✅ Recording saved! You can now upload it.', 'success');
                };

                mediaRecorder.start();
                
                document.getElementById('startRecordBtn').style.display = 'none';
                document.getElementById('stopRecordBtn').style.display = 'block';
                document.getElementById('recordingIndicator').style.display = 'block';
                
                showNotification('🔴 Recording started...', 'info');
            } catch (error) {
                console.error('Error starting recording:', error);
                showNotification('❌ Failed to start recording', 'error');
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
                
                document.getElementById('startRecordBtn').style.display = 'block';
                document.getElementById('stopRecordBtn').style.display = 'none';
                document.getElementById('recordingIndicator').style.display = 'none';
                
                showNotification('⏹️ Recording stopped', 'info');
            }
        }

        function handleFileSelection(e) {
            const file = e.target.files[0];
            if (file) {
                currentVideoBlob = file;
                showVideoPreview(file);
                document.getElementById('uploadSubmitBtn').disabled = false;
                
                const label = e.target.nextElementSibling;
                label.innerHTML = `
                    <span class="file-upload-icon">✓</span>
                    <div>Video selected: ${file.name}</div>
                    <small>Size: ${(file.size / 1024 / 1024).toFixed(2)}MB</small>
                `;
            }
        }

        function showVideoPreview(videoBlob) {
            const videoPreview = document.getElementById('videoPreview');
            const videoPreviewSection = document.getElementById('videoPreviewSection');
            
            videoPreview.src = URL.createObjectURL(videoBlob);
            videoPreviewSection.style.display = 'block';
        }

        function clearVideo() {
            currentVideoBlob = null;
            document.getElementById('videoPreviewSection').style.display = 'none';
            document.getElementById('uploadSubmitBtn').disabled = true;
            
            // Reset file input
            const fileInput = document.getElementById('videoFile');
            fileInput.value = '';
            const label = fileInput.nextElementSibling;
            label.innerHTML = `
                <span class="file-upload-icon">📹</span>
                <div>Click to select a video</div>
                <small>MP4, MOV, AVI up to 100MB</small>
            `;
            
            showNotification('🗑️ Video cleared', 'info');
        }

        // Upload form handler
        async function handleUpload(e) {
            e.preventDefault();
            
            if (!currentUser) {
                showNotification('❌ Please login to upload videos', 'error');
                return;
            }
            
            if (!currentVideoBlob) {
                showNotification('❌ Please select or record a video first', 'error');
                return;
            }
            
            const description = document.getElementById('videoDescription').value.trim();
            const tags = document.getElementById('videoTags').value.trim();
            
            const submitButton = document.getElementById('uploadSubmitBtn');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = '📤 Uploading...';
            
            try {
                showNotification('📤 Uploading video...', 'info');
                
                // Create a file name
                const timestamp = Date.now();
                const fileName = `${currentUser.uid}_${timestamp}.webm`;
                
                // Upload to Firebase Storage
                const videoRef = storage.ref(`videos/${currentUser.uid}/${fileName}`);
                const snapshot = await videoRef.put(currentVideoBlob);
                const downloadURL = await snapshot.ref.getDownloadURL();
                
                // Save video metadata to Firestore
                await db.collection('videos').add({
                    userId: currentUser.uid,
                    videoUrl: downloadURL,
                    description: description || 'No description',
                    tags: tags ? tags.split(' ').filter(tag => tag.startsWith('#')) : [],
                    likes: [],
                    comments: [],
                    shares: 0,
                    views: 0,
                    createdAt: new Date(),
                    status: 'active'
                });
                
                showNotification('✅ Video uploaded successfully!', 'success');
                closeModal('uploadModal');
                
                // Reset form
                e.target.reset();
                clearVideo();
                stopCamera();
                
                // Reset modal to default state
                document.getElementById('recordingSection').style.display = 'none';
                document.getElementById('fileUploadSection').style.display = 'block';
                document.getElementById('videoPreviewSection').style.display = 'none';
                
                // Update feed
                window.loadVideoFeed();
                
            } catch (error) {
                console.error('Upload error:', error);
                showNotification('❌ Upload failed: ' + error.message, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        // Play user video in fullscreen modal
        function playUserVideo(videoUrl, description = '') {
            // Create fullscreen video modal
            const videoModal = document.createElement('div');
            videoModal.className = 'modal show';
            videoModal.innerHTML = `
                <div class="modal-content" style="max-width: 100%; height: 100vh; background: black; display: flex; align-items: center; justify-content: center; position: relative;">
                    <button onclick="this.closest('.modal').remove()" style="position: absolute; top: 20px; right: 20px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 50%; width: 40px; height: 40px; font-size: 20px; cursor: pointer; z-index: 10;">×</button>
                    <video controls autoplay style="max-width: 100%; max-height: 100%; object-fit: contain;">
                        <source src="${videoUrl}" type="video/webm">
                        <source src="${videoUrl}" type="video/mp4">
                        <source src="${videoUrl}">
                        Your browser does not support the video tag.
                    </video>
                    ${description ? `
                        <div style="position: absolute; bottom: 20px; left: 20px; color: white; background: rgba(0,0,0,0.7); padding: 10px 15px; border-radius: 10px; max-width: 300px;">
                            ${description}
                        </div>
                    ` : ''}
                </div>
            `;
            document.body.appendChild(videoModal);
        }

        // Note: Real implementations of toggleLike, toggleFollow, etc. are defined later in the file
        async function loadUserProfile() { 
            if (!currentUser) {
                openModal('loginModal');
                return;
            }
            
            try {
                console.log('🔍 Loading profile for user:', currentUser.uid);
                showNotification('📄 Loading profile...', 'info', 1500);
                
                // Get user data from Firestore
                console.log('📊 Querying user data...');
                let userSnapshot;
                let userData = { 
                    username: currentUser.email ? currentUser.email.split('@')[0] : 'User', 
                    email: currentUser.email || 'No email',
                    followers: [],
                    following: [],
                    bio: 'VIB3 user'
                };
                
                try {
                    userSnapshot = await db.collection('users').where('uid', '==', currentUser.uid).get();
                    console.log('👤 User query result:', userSnapshot.size, 'documents found');
                    
                    if (!userSnapshot.empty) {
                        userData = userSnapshot.docs[0].data();
                        console.log('✅ User data loaded:', userData);
                    } else {
                        console.log('⚠️ No user document found, using defaults');
                    }
                } catch (userError) {
                    console.warn('⚠️ User data query failed, using defaults:', userError);
                }
                
                // Load user's videos - use simpler query without orderBy to avoid index issues
                console.log('🎬 Querying user videos...');
                let videosSnapshot;
                try {
                    videosSnapshot = await db.collection('videos')
                        .where('userId', '==', currentUser.uid)
                        .get();
                    console.log('📹 Videos query result:', videosSnapshot.size, 'videos found');
                } catch (videoError) {
                    console.warn('⚠️ Videos query failed:', videoError);
                    // Create empty snapshot-like object
                    videosSnapshot = { 
                        empty: true, 
                        size: 0, 
                        docs: []
                    };
                }
                
                // Update profile modal content
                console.log('🎨 Rendering profile modal...');
                const profileContent = document.getElementById('profileContent');
                
                if (!profileContent) {
                    throw new Error('Profile content element not found');
                }
                
                // Build profile HTML safely
                const username = userData.username || 'user';
                const email = userData.email || currentUser.email || 'No email';
                const followersCount = (userData.followers && userData.followers.length) || 0;
                const followingCount = (userData.following && userData.following.length) || 0;
                const bio = userData.bio || 'No bio yet';
                const videoCount = videosSnapshot.size || 0;
                
                let profileHTML = `
                    <div style="text-align: center; margin-bottom: 30px;">
                        <div style="width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); display: flex; align-items: center; justify-content: center; font-size: 48px; font-weight: bold; margin: 0 auto 20px;">
                            ${username.charAt(0).toUpperCase()}
                        </div>
                        <h2>@${username}</h2>
                        <p style="color: rgba(255,255,255,0.7); margin: 10px 0;">
                            ${email}
                        </p>
                        <p style="color: rgba(255,255,255,0.7); margin: 10px 0;">
                            ${followersCount} followers • ${followingCount} following
                        </p>
                        <p style="color: rgba(255,255,255,0.8);">${bio}</p>
                    </div>
                    <div style="border-top: 1px solid rgba(255,255,255,0.1); padding-top: 20px;">
                        <h3 style="margin-bottom: 15px;">My Videos (${videoCount})</h3>`;
                
                if (videosSnapshot.empty || videoCount === 0) {
                    profileHTML += `
                        <div style="text-align: center; color: rgba(255,255,255,0.5); padding: 40px;">
                            <div style="font-size: 48px; margin-bottom: 20px;">📹</div>
                            <p>No videos uploaded yet</p>
                            <button onclick="openModal('uploadModal'); closeModal('profileModal');" style="margin-top: 15px; padding: 10px 20px; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; border: none; border-radius: 15px; cursor: pointer;">
                                Upload Your First Video
                            </button>
                        </div>`;
                } else {
                    profileHTML += '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 15px;">';
                    
                    videosSnapshot.docs.forEach(doc => {
                        const video = doc.data();
                        const videoUrl = video.videoUrl || '';
                        const description = (video.description || '').replace(/"/g, '&quot;');
                        const likes = (video.likes && video.likes.length) || 0;
                        
                        profileHTML += `
                            <div style="aspect-ratio: 9/16; background: rgba(255,255,255,0.1); border-radius: 10px; overflow: hidden; cursor: pointer; position: relative;" onclick="playUserVideo('${videoUrl}', '${description}')">
                                <video style="width: 100%; height: 100%; object-fit: cover;" muted preload="metadata">
                                    <source src="${videoUrl}" type="video/mp4">
                                </video>
                                <div style="position: absolute; bottom: 5px; left: 5px; color: white; font-size: 12px; background: rgba(0,0,0,0.7); padding: 2px 6px; border-radius: 3px;">
                                    ❤️ ${likes}
                                </div>
                                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 24px; opacity: 0.8;">
                                    ▶️
                                </div>
                            </div>`;
                    });
                    
                    profileHTML += '</div>';
                }
                
                profileHTML += '</div>';
                
                profileContent.innerHTML = profileHTML;
                console.log('✅ Profile content rendered successfully');
                
                openModal('profileModal');
                showNotification('✅ Profile loaded!', 'success', 1500);
                
            } catch (error) {
                console.error('❌ Profile loading error:', error);
                
                // Show a fallback profile even if there's an error
                const profileContent = document.getElementById('profileContent');
                if (profileContent) {
                    const fallbackEmail = currentUser.email || 'user@example.com';
                    const fallbackUsername = fallbackEmail.split('@')[0];
                    
                    profileContent.innerHTML = `
                        <div style="text-align: center; margin-bottom: 30px;">
                            <div style="width: 100px; height: 100px; border-radius: 50%; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); display: flex; align-items: center; justify-content: center; font-size: 48px; font-weight: bold; margin: 0 auto 20px;">
                                ${fallbackUsername.charAt(0).toUpperCase()}
                            </div>
                            <h2>@${fallbackUsername}</h2>
                            <p style="color: rgba(255,255,255,0.7); margin: 10px 0;">
                                ${fallbackEmail}
                            </p>
                            <p style="color: rgba(255,255,255,0.7); margin: 10px 0;">
                                0 followers • 0 following
                            </p>
                            <p style="color: rgba(255,255,255,0.8);">VIB3 User</p>
                        </div>
                        <div style="border-top: 1px solid rgba(255,255,255,0.1); padding-top: 20px;">
                            <h3 style="margin-bottom: 15px;">My Videos (0)</h3>
                            <div style="text-align: center; color: rgba(255,255,255,0.5); padding: 40px;">
                                <div style="font-size: 48px; margin-bottom: 20px;">📹</div>
                                <p>Unable to load videos at this time</p>
                                <p style="font-size: 14px; margin-top: 10px; color: rgba(255,255,255,0.4);">
                                    Error: ${error.message}
                                </p>
                                <button onclick="loadUserProfile()" style="margin-top: 15px; padding: 10px 20px; background: linear-gradient(45deg, #ff6b6b, #4ecdc4); color: white; border: none; border-radius: 15px; cursor: pointer;">
                                    Retry Loading Profile
                                </button>
                            </div>
                        </div>
                    `;
                    
                    openModal('profileModal');
                }
                
                showNotification(`❌ Profile error: ${error.message}`, 'error', 4000);
            }
        }

        // Authentication functions
        async function handleLogin(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;
            
            if (!email || !password) {
                showNotification('❌ Please fill in all fields', 'error');
                return;
            }
            
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Logging in...';
            
            try {
                await auth.signInWithEmailAndPassword(email, password);
                showNotification('✅ Login successful!', 'success');
                closeModal('loginModal');
                e.target.reset();
            } catch (error) {
                console.error('Login error:', error);
                let errorMessage = 'Login failed';
                
                switch (error.code) {
                    case 'auth/user-not-found':
                        errorMessage = 'No account found with this email';
                        break;
                    case 'auth/wrong-password':
                        errorMessage = 'Incorrect password';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address';
                        break;
                    case 'auth/too-many-requests':
                        errorMessage = 'Too many failed attempts. Try again later';
                        break;
                    default:
                        errorMessage = error.message;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        async function handleSignup(e) {
            e.preventDefault();
            const username = document.getElementById('signupUsername').value.trim();
            const email = document.getElementById('signupEmail').value.trim();
            const password = document.getElementById('signupPassword').value;
            
            if (!username || !email || !password) {
                showNotification('❌ Please fill in all fields', 'error');
                return;
            }
            
            if (username.length < 3) {
                showNotification('❌ Username must be at least 3 characters', 'error');
                return;
            }
            
            if (password.length < 6) {
                showNotification('❌ Password must be at least 6 characters', 'error');
                return;
            }
            
            const submitButton = e.target.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.disabled = true;
            submitButton.textContent = 'Creating account...';
            
            try {
                // Check if username is already taken
                const usernameSnapshot = await db.collection('users').where('username', '==', username).get();
                
                if (!usernameSnapshot.empty) {
                    showNotification('❌ Username is already taken', 'error');
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                    return;
                }
                
                // Create user account
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                const user = userCredential.user;
                
                // Create user document in Firestore
                await db.collection('users').add({
                    uid: user.uid,
                    username: username,
                    email: email,
                    createdAt: new Date(),
                    followers: [],
                    following: [],
                    bio: '',
                    avatar: ''
                });
                
                showNotification('✅ Account created successfully!', 'success');
                closeModal('signupModal');
                e.target.reset();
                
            } catch (error) {
                console.error('Signup error:', error);
                let errorMessage = 'Failed to create account';
                
                switch (error.code) {
                    case 'auth/email-already-in-use':
                        errorMessage = 'An account with this email already exists';
                        break;
                    case 'auth/invalid-email':
                        errorMessage = 'Invalid email address';
                        break;
                    case 'auth/weak-password':
                        errorMessage = 'Password is too weak';
                        break;
                    default:
                        errorMessage = error.message;
                }
                
                showNotification(`❌ ${errorMessage}`, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = originalText;
            }
        }

        async function logout() {
            console.log('Logout function called');
            try {
                console.log('Signing out user...');
                await auth.signOut();
                console.log('Sign out successful');
                showNotification('✅ Logged out successfully', 'success');
            } catch (error) {
                console.error('Logout error:', error);
                showNotification('❌ Failed to logout', 'error');
            }
        }

        // Missing functions that need to be implemented
        async function toggleLike(videoId, button) {
            console.log('❤️ Toggle like called for video:', videoId);
            if (!currentUser) {
                showNotification('Please login to like videos', 'info');
                openModal('loginModal');
                return;
            }
            
            try {
                const videoRef = db.collection('videos').doc(videoId);
                const videoDoc = await videoRef.get();
                
                if (!videoDoc.exists()) {
                    showNotification('Video not found', 'error');
                    return;
                }
                
                const videoData = videoDoc.data();
                const likes = videoData.likes || [];
                const isLiked = likes.includes(currentUser.uid);
                
                if (isLiked) {
                    // Remove like
                    await videoRef.update({
                        likes: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
                    });
                    button.classList.remove('liked');
                    button.querySelector('span').textContent = likes.length - 1;
                    showNotification('💔 Unliked', 'info', 1000);
                } else {
                    // Add like
                    await videoRef.update({
                        likes: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                    button.classList.add('liked');
                    button.querySelector('span').textContent = likes.length + 1;
                    showNotification('❤️ Liked!', 'success', 1000);
                }
            } catch (error) {
                console.error('Error toggling like:', error);
                showNotification('Failed to update like', 'error');
            }
        }

        async function toggleFollow(userId, button) {
            console.log('👥 Toggle follow called for user:', userId);
            if (!currentUser) {
                showNotification('Please login to follow users', 'info');
                openModal('loginModal');
                return;
            }
            
            if (userId === currentUser.uid) {
                showNotification('Cannot follow yourself', 'info');
                return;
            }
            
            try {
                const userRef = db.collection('users').doc(currentUser.uid);
                const targetUserRef = db.collection('users').doc(userId);
                
                const userDoc = await userRef.get();
                const userData = userDoc.data() || {};
                const following = userData.following || [];
                const isFollowing = following.includes(userId);
                
                if (isFollowing) {
                    // Unfollow
                    await userRef.update({
                        following: firebase.firestore.FieldValue.arrayRemove(userId)
                    });
                    await targetUserRef.update({
                        followers: firebase.firestore.FieldValue.arrayRemove(currentUser.uid)
                    });
                    button.textContent = 'Follow';
                    button.classList.remove('following');
                    showNotification('Unfollowed', 'info', 1000);
                } else {
                    // Follow
                    await userRef.update({
                        following: firebase.firestore.FieldValue.arrayUnion(userId)
                    });
                    await targetUserRef.update({
                        followers: firebase.firestore.FieldValue.arrayUnion(currentUser.uid)
                    });
                    button.textContent = 'Following';
                    button.classList.add('following');
                    showNotification('✅ Now following!', 'success', 1000);
                }
            } catch (error) {
                console.error('Error toggling follow:', error);
                showNotification('Failed to update follow status', 'error');
            }
        }

        function toggleComments(videoId) {
            console.log('💬 Toggle comments called for video:', videoId);
            // This would open a comments modal - for now just show placeholder
            showNotification('💬 Comments feature coming soon!', 'info');
        }

        function playUserVideo(videoUrl, description = '') {
            console.log('🎬 Play user video:', videoUrl);
            
            // Close profile modal
            closeModal('profileModal');
            
            // Create and show fullscreen video player
            const fullscreenPlayer = document.createElement('div');
            fullscreenPlayer.id = 'fullscreenVideoPlayer';
            fullscreenPlayer.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.95);
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
            `;
            
            fullscreenPlayer.innerHTML = `
                <div style="position: relative; max-width: 90vw; max-height: 90vh; background: #000; border-radius: 10px; overflow: hidden;">
                    <video id="fullscreenVideo" controls autoplay style="width: 100%; height: auto; max-height: 80vh;">
                        <source src="${videoUrl}" type="video/webm">
                        <source src="${videoUrl}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <button onclick="closeFullscreenVideo()" style="position: absolute; top: 15px; right: 15px; background: rgba(0,0,0,0.7); color: white; border: none; width: 40px; height: 40px; border-radius: 50%; font-size: 18px; cursor: pointer; z-index: 10000;">
                        ×
                    </button>
                </div>
                ${description ? `
                    <div style="color: white; margin-top: 20px; text-align: center; max-width: 80%; padding: 0 20px;">
                        <p style="font-size: 16px; line-height: 1.4;">${description}</p>
                    </div>
                ` : ''}
                <div style="color: rgba(255,255,255,0.7); margin-top: 15px; text-align: center;">
                    <p style="font-size: 14px;">Press ESC or click × to close</p>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(fullscreenPlayer);
            
            // Add escape key listener
            const escapeListener = (e) => {
                if (e.key === 'Escape') {
                    closeFullscreenVideo();
                }
            };
            document.addEventListener('keydown', escapeListener);
            
            // Store listener for cleanup
            fullscreenPlayer._escapeListener = escapeListener;
            
            showNotification('🎬 Playing video in fullscreen', 'success', 2000);
        }
        
        function closeFullscreenVideo() {
            const player = document.getElementById('fullscreenVideoPlayer');
            if (player) {
                // Remove escape listener
                if (player._escapeListener) {
                    document.removeEventListener('keydown', player._escapeListener);
                }
                
                // Pause video before removing
                const video = player.querySelector('video');
                if (video) {
                    video.pause();
                }
                
                player.remove();
            }
        }

        function loadMoreContent() {
            console.log('📜 Load more content called');
            showNotification('📜 Loading more content...', 'info');
            // This would implement infinite scroll
        }

        // Make functions globally available
        window.toggleLike = toggleLike;
        window.toggleFollow = toggleFollow;
        window.toggleComments = toggleComments;
        window.shareVideo = shareVideo;
        window.toggleVideoPlayback = toggleVideoPlayback;
        window.toggleCurrentVideoPlayback = toggleCurrentVideoPlayback;
        window.toggleVideoMute = toggleVideoMute;
        window.playUserVideo = playUserVideo;
        window.closeFullscreenVideo = closeFullscreenVideo;
        window.loadMoreContent = loadMoreContent;
        window.loadUserProfile = loadUserProfile;
        window.openModal = openModal;
        window.closeModal = closeModal;
    </script>

    <!-- New Feature Functions (Working implementations) -->
    <script>
        // Simple placeholder functions for new features that actually work
        
        window.openDuetStitch = function(videoData) {
            console.log('🎭 Opening Duet/Stitch for video:', videoData);
            showNotification('🎭 Duet/Stitch feature coming soon!', 'info');
            
            // Create and show a simple modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.9); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; text-align: center; color: white; max-width: 400px;">
                    <h2 style="margin-bottom: 20px;">🎭 Duet & Stitch</h2>
                    <p style="margin-bottom: 20px;">Create amazing duets and stitches with this video!</p>
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button onclick="alert('🎭 Duet recording would start here!'); this.parentElement.parentElement.parentElement.remove();" 
                                style="background: #ff2d55; color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer;">
                            🎭 Start Duet
                        </button>
                        <button onclick="alert('✂️ Stitch editor would open here!'); this.parentElement.parentElement.parentElement.remove();" 
                                style="background: #4ecdc4; color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer;">
                            ✂️ Create Stitch
                        </button>
                        <button onclick="this.parentElement.parentElement.parentElement.remove();" 
                                style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer;">
                            Cancel
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        };
        
        window.openMusicLibrary = function() {
            console.log('🎵 Opening Music Library');
            showNotification('🎵 Music Library opened!', 'success');
            
            // Create and show music library modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.9); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; text-align: center; color: white; max-width: 500px; max-height: 80vh; overflow-y: auto;">
                    <h2 style="margin-bottom: 20px;">🎵 Music Library</h2>
                    
                    <div style="margin-bottom: 20px;">
                        <h3 style="margin-bottom: 10px;">🔥 Trending Sounds</h3>
                        <div style="display: grid; gap: 10px;">
                            <div style="display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                                <span style="font-size: 20px;">🎵</span>
                                <div style="flex: 1; text-align: left;">
                                    <div style="font-weight: 600;">Viral Dance Beat</div>
                                    <div style="font-size: 12px; color: rgba(255,255,255,0.7);">1.2M uses</div>
                                </div>
                                <button onclick="alert('🎵 Playing: Viral Dance Beat'); event.stopPropagation();" 
                                        style="background: #ff2d55; color: white; border: none; padding: 8px 16px; border-radius: 15px; cursor: pointer;">
                                    Play
                                </button>
                            </div>
                            
                            <div style="display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                                <span style="font-size: 20px;">🎵</span>
                                <div style="flex: 1; text-align: left;">
                                    <div style="font-weight: 600;">Summer Vibes</div>
                                    <div style="font-size: 12px; color: rgba(255,255,255,0.7);">890K uses</div>
                                </div>
                                <button onclick="alert('🎵 Playing: Summer Vibes'); event.stopPropagation();" 
                                        style="background: #ff2d55; color: white; border: none; padding: 8px 16px; border-radius: 15px; cursor: pointer;">
                                    Play
                                </button>
                            </div>
                            
                            <div style="display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                                <span style="font-size: 20px;">🔊</span>
                                <div style="flex: 1; text-align: left;">
                                    <div style="font-weight: 600;">Applause Effect</div>
                                    <div style="font-size: 12px; color: rgba(255,255,255,0.7);">Sound Effect</div>
                                </div>
                                <button onclick="alert('🔊 Playing: Applause'); event.stopPropagation();" 
                                        style="background: #ff2d55; color: white; border: none; padding: 8px 16px; border-radius: 15px; cursor: pointer;">
                                    Play
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <button onclick="alert('🎤 Voice recording would start here!');" 
                                style="background: #4ecdc4; color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer; margin-right: 10px;">
                            🎤 Record Voice
                        </button>
                        <button onclick="alert('🎵 Original sound creation would open here!');" 
                                style="background: #ff6b6b; color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer;">
                            ✨ Create Original
                        </button>
                    </div>
                    
                    <button onclick="this.parentElement.parentElement.remove();" 
                            style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer;">
                        Close
                    </button>
                </div>
            `;
            document.body.appendChild(modal);
        };
        
        window.startLiveStream = function() {
            console.log('📺 Starting Live Stream - Working Version');
            showNotification('📺 Live Stream Setup Opening!', 'success');
            
            // Create live stream setup modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.9); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; text-align: center; color: white; max-width: 500px;">
                    <h2 style="margin-bottom: 20px;">📺 Go Live</h2>
                    
                    <div style="width: 100%; height: 200px; background: #000; border-radius: 10px; margin-bottom: 20px; display: flex; align-items: center; justify-content: center; border: 2px solid #333;">
                        <div style="text-align: center;">
                            <div style="font-size: 40px; margin-bottom: 10px;">📹</div>
                            <div style="color: rgba(255,255,255,0.7);">Camera Preview</div>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <input type="text" placeholder="What's happening?" 
                               style="width: 100%; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; color: white; margin-bottom: 10px;">
                        <select style="width: 100%; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; color: white;">
                            <option>General</option>
                            <option>Music</option>
                            <option>Gaming</option>
                            <option>Education</option>
                        </select>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                            <input type="checkbox" checked> Allow Comments
                        </label>
                        <label style="display: flex; align-items: center; gap: 10px;">
                            <input type="checkbox" checked> Allow Gifts
                        </label>
                    </div>
                    
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button onclick="this.parentElement.parentElement.parentElement.remove(); directLiveStreamStart();" 
                                style="background: linear-gradient(45deg, #ff2d55, #ff6b6b); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer; font-weight: 600;">
                            🔴 Go Live
                        </button>
                        <button onclick="this.parentElement.parentElement.parentElement.remove();" 
                                style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer;">
                            Cancel
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        };
        
        // Fix the existing functions to work properly
        function toggleLike(videoId, button) {
            console.log('❤️ Toggle like for video:', videoId);
            
            const isLiked = button.classList.contains('liked');
            const span = button.querySelector('span');
            let currentCount = parseInt(span.textContent) || 0;
            
            if (isLiked) {
                button.classList.remove('liked');
                button.style.color = 'white';
                span.textContent = Math.max(0, currentCount - 1);
                showNotification('💔 Unliked', 'info');
            } else {
                button.classList.add('liked');
                button.style.color = '#ff6b6b';
                span.textContent = currentCount + 1;
                showNotification('❤️ Liked!', 'success');
            }
        }
        
        function toggleComments(videoId) {
            console.log('💬 Toggle comments for video:', videoId);
            showNotification('💬 Comments opened!', 'info');
            
            // Simple comments modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.9); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; color: white; width: 90%; max-width: 500px; max-height: 80vh;">
                    <h2 style="margin-bottom: 20px;">💬 Comments</h2>
                    
                    <div style="height: 300px; overflow-y: auto; margin-bottom: 20px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 10px;">
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                            <div style="font-weight: 600; color: #ff6b6b; margin-bottom: 5px;">@user123</div>
                            <div>Amazing video! 🔥🔥🔥</div>
                        </div>
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                            <div style="font-weight: 600; color: #ff6b6b; margin-bottom: 5px;">@viewer456</div>
                            <div>Love this content! Keep it up! 👏</div>
                        </div>
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                            <div style="font-weight: 600; color: #ff6b6b; margin-bottom: 5px;">@fan789</div>
                            <div>This is so cool! How did you make this? ✨</div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                        <input type="text" placeholder="Add a comment..." 
                               style="flex: 1; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 25px; color: white;">
                        <button onclick="alert('💬 Comment posted!');" 
                                style="background: #ff2d55; color: white; border: none; padding: 12px 20px; border-radius: 25px; cursor: pointer;">
                            Post
                        </button>
                    </div>
                    
                    <button onclick="this.parentElement.parentElement.remove();" 
                            style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer; width: 100%;">
                        Close
                    </button>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        function shareVideo(videoId) {
            console.log('📤 Share video:', videoId);
            showNotification('📤 Share options opened!', 'info');
            
            // Share modal
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.9); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; color: white; text-align: center; max-width: 400px;">
                    <h2 style="margin-bottom: 20px;">📤 Share Video</h2>
                    
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-bottom: 20px;">
                        <button onclick="alert('📱 Shared to Instagram!');" 
                                style="padding: 20px; background: linear-gradient(45deg, #833ab4, #fd1d1d, #fcb045); border: none; border-radius: 15px; color: white; cursor: pointer;">
                            📱<br>Instagram
                        </button>
                        <button onclick="alert('🐦 Shared to Twitter!');" 
                                style="padding: 20px; background: #1DA1F2; border: none; border-radius: 15px; color: white; cursor: pointer;">
                            🐦<br>Twitter
                        </button>
                        <button onclick="alert('📘 Shared to Facebook!');" 
                                style="padding: 20px; background: #4267B2; border: none; border-radius: 15px; color: white; cursor: pointer;">
                            📘<br>Facebook
                        </button>
                        <button onclick="alert('💬 Shared to WhatsApp!');" 
                                style="padding: 20px; background: #25D366; border: none; border-radius: 15px; color: white; cursor: pointer;">
                            💬<br>WhatsApp
                        </button>
                        <button onclick="navigator.clipboard.writeText('https://vib3.app/video/${videoId}'); alert('🔗 Link copied!');" 
                                style="padding: 20px; background: rgba(255,255,255,0.2); border: none; border-radius: 15px; color: white; cursor: pointer;">
                            🔗<br>Copy Link
                        </button>
                        <button onclick="alert('📧 Shared via Email!');" 
                                style="padding: 20px; background: #EA4335; border: none; border-radius: 15px; color: white; cursor: pointer;">
                            📧<br>Email
                        </button>
                    </div>
                    
                    <button onclick="this.parentElement.parentElement.remove();" 
                            style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 12px 24px; border-radius: 25px; cursor: pointer; width: 100%;">
                        Close
                    </button>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        // Make functions globally available
        window.toggleLike = toggleLike;
        window.toggleComments = toggleComments;
        window.shareVideo = shareVideo;
        
        // DIRECT SIMPLE LIVE STREAM FUNCTION - NO CONFLICTS
        window.directLiveStreamStart = function() {
            console.log('🚀 DIRECT live stream function called!');
            console.log('✅ Camera function is working!');
            showNotification('📹 Opening camera...', 'success');
            
            // Remove any existing modals first
            const existingModals = document.querySelectorAll('[id*="live"], [id*="Live"], [id*="stream"], [id*="Stream"]');
            existingModals.forEach(modal => modal.remove());
            
            // Create simple working modal
            const modal = document.createElement('div');
            modal.id = 'simpleLiveModal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.95); z-index: 99999; 
                display: flex; align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 30px; border-radius: 15px; color: white; max-width: 500px; width: 90%; text-align: center;">
                    <h2 style="margin-bottom: 20px;">📺 Go Live</h2>
                    
                    <div id="videoContainer" style="width: 100%; height: 250px; background: #000; border-radius: 10px; margin-bottom: 20px; position: relative; overflow: hidden;">
                        <video id="cameraFeed" autoplay muted playsinline style="width: 100%; height: 100%; object-fit: cover; display: none;"></video>
                        <div id="cameraStatus" style="height: 100%; display: flex; align-items: center; justify-content: center; color: white; flex-direction: column;">
                            <div style="font-size: 30px; margin-bottom: 10px;">📹</div>
                            <div>Starting camera...</div>
                        </div>
                    </div>
                    
                    <input id="streamTitleInput" type="text" placeholder="Stream title..." style="width: 100%; padding: 10px; margin-bottom: 15px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.3); border-radius: 8px; color: white;">
                    
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button id="goLiveButton" onclick="startLiveNow()" disabled style="background: #ff2d55; color: white; border: none; padding: 12px 25px; border-radius: 20px; cursor: pointer; opacity: 0.5;">
                            🔴 Go Live
                        </button>
                        <button onclick="closeLiveModal()" style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 12px 25px; border-radius: 20px; cursor: pointer;">
                            Cancel
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Start camera immediately
            requestCameraAccess();
        };
        
        // Request camera access
        window.requestCameraAccess = async function() {
            console.log('📱 Requesting camera...');
            
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { 
                        width: { ideal: 1280 }, 
                        height: { ideal: 720 },
                        facingMode: 'user' 
                    },
                    audio: true
                });
                
                console.log('✅ Camera granted!');
                console.log('Stream tracks:', stream.getTracks().map(t => t.kind));
                window.currentStream = stream;
                
                // Show camera feed
                const video = document.getElementById('cameraFeed');
                const status = document.getElementById('cameraStatus');
                const button = document.getElementById('goLiveButton');
                
                if (video && status && button) {
                    video.srcObject = stream;
                    video.style.display = 'block';
                    status.style.display = 'none';
                    
                    // Start video playback
                    video.play().then(() => {
                        console.log('✅ Camera preview started');
                    }).catch(e => {
                        console.error('❌ Camera preview failed:', e);
                    });
                    
                    button.disabled = false;
                    button.style.opacity = '1';
                    
                    showNotification('📹 Camera ready!', 'success');
                } else {
                    console.error('❌ Preview elements not found');
                }
                
            } catch (error) {
                console.error('❌ Camera denied:', error);
                const status = document.getElementById('cameraStatus');
                if (status) {
                    status.innerHTML = `
                        <div style="color: #ff6b6b;">
                            <div style="font-size: 30px; margin-bottom: 10px;">❌</div>
                            <div>Camera access denied</div>
                            <div style="font-size: 12px; margin-top: 5px;">Please allow camera access and try again</div>
                        </div>
                    `;
                }
                showNotification('❌ Camera required for live streaming', 'error');
            }
        };
        
        // Start live stream
        window.startLiveNow = function() {
            const title = document.getElementById('streamTitleInput').value || 'Live Stream';
            console.log('🔴 Going live:', title);
            console.log('Current stream before going live:', window.currentStream);
            
            if (!window.currentStream) {
                console.error('❌ No camera stream available');
                showNotification('❌ Camera stream not available', 'error');
                return;
            }
            
            // Close modal but don't stop the stream
            const modal = document.getElementById('simpleLiveModal');
            if (modal) {
                console.log('🗑️ Removing modal (keeping stream alive)');
                modal.remove();
            }
            
            // Open live interface
            openLiveInterface(title);
        };
        
        // Open live interface
        window.openLiveInterface = function(title) {
            console.log('🔴 Opening live interface with title:', title);
            
            // First, pause all background videos to free up resources
            const backgroundVideos = document.querySelectorAll('.video-element');
            backgroundVideos.forEach(video => {
                if (!video.paused) {
                    console.log('⏸️ Pausing background video');
                    video.pause();
                }
            });
            
            const liveUI = document.createElement('div');
            liveUI.id = 'liveStreamUI';
            liveUI.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: #000; z-index: 99999;
            `;
            
            liveUI.innerHTML = `
                <div style="width: 100%; height: 100%; position: relative;">
                    <video id="liveStreamVideo" autoplay playsinline style="width: 100%; height: 100%; object-fit: cover;"></video>
                    
                    <div style="position: absolute; top: 20px; left: 20px; display: flex; gap: 10px; align-items: center;">
                        <div style="background: rgba(255,0,0,0.9); padding: 6px 12px; border-radius: 15px; color: white; font-weight: bold; display: flex; align-items: center; gap: 5px;">
                            <div style="width: 6px; height: 6px; background: white; border-radius: 50%; animation: blink 1s infinite;"></div>
                            LIVE
                        </div>
                        <div style="background: rgba(0,0,0,0.7); padding: 6px 12px; border-radius: 15px; color: white;">
                            👥 <span id="viewerCount">1</span>
                        </div>
                    </div>
                    
                    <div style="position: absolute; top: 20px; right: 20px;">
                        <button id="endLiveStreamBtn" onclick="endLiveStream(); event.stopPropagation();" style="background: rgba(255,0,0,0.9); color: white; border: none; padding: 8px 16px; border-radius: 15px; cursor: pointer; font-weight: 600;">
                            End Stream
                        </button>
                    </div>
                    
                    <div style="position: absolute; bottom: 20px; left: 20px; color: white;">
                        <h3 style="margin: 0; font-size: 18px;">${title}</h3>
                        <p style="margin: 5px 0 0 0; opacity: 0.8; font-size: 14px;">Live now</p>
                    </div>
                </div>
            `;
            
            document.body.appendChild(liveUI);
            
            // Connect stream to live video
            setTimeout(() => {
                const liveVideo = document.getElementById('liveStreamVideo');
                const endBtn = document.getElementById('endLiveStreamBtn');
                
                console.log('📹 Connecting stream to live video element');
                console.log('Current stream:', window.currentStream);
                
                if (liveVideo && window.currentStream) {
                    liveVideo.srcObject = window.currentStream;
                    liveVideo.play().then(() => {
                        console.log('✅ Live video started successfully');
                    }).catch(e => {
                        console.error('❌ Failed to start live video:', e);
                    });
                } else {
                    console.error('❌ No live video element or stream found');
                    if (!liveVideo) console.error('Live video element not found');
                    if (!window.currentStream) console.error('Current stream not found');
                }
                
                // Add backup event listener for end button
                if (endBtn) {
                    endBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('🛑 End button clicked via event listener');
                        endLiveStream();
                    });
                    console.log('✅ End button event listener added');
                }
            }, 100);
            
            // Add blink animation
            if (!document.getElementById('blinkStyle')) {
                const style = document.createElement('style');
                style.id = 'blinkStyle';
                style.textContent = '@keyframes blink { 0%, 50% { opacity: 1; } 51%, 100% { opacity: 0.3; } }';
                document.head.appendChild(style);
            }
            
            showNotification('🔴 You are LIVE!', 'success', 3000);
            
            // Simulate viewers
            let viewers = 1;
            setInterval(() => {
                if (document.getElementById('liveStreamUI')) {
                    viewers += Math.random() > 0.7 ? 1 : 0;
                    const counter = document.getElementById('viewerCount');
                    if (counter) counter.textContent = viewers;
                }
            }, 8000);
        };
        
        // Close functions
        window.closeLiveModal = function() {
            console.log('🚪 Closing live modal');
            
            // Stop camera stream
            if (window.currentStream) {
                console.log('📹 Stopping camera stream in modal');
                window.currentStream.getTracks().forEach(track => {
                    track.stop();
                    console.log('⏹️ Stopped track:', track.kind);
                });
                window.currentStream = null;
            }
            
            // Remove modal
            const modal = document.getElementById('simpleLiveModal');
            if (modal) {
                console.log('🗑️ Removing modal');
                modal.remove();
            }
            
            console.log('✅ Modal closed');
        };
        
        window.endLiveStream = function() {
            console.log('🛑 END LIVE STREAM CALLED - Enhanced version');
            
            if (confirm('End live stream?')) {
                console.log('🛑 User confirmed - ending live stream...');
                
                // Stop ALL possible camera streams
                const streamVariables = [
                    'currentStream', 
                    'currentLiveStream', 
                    'realLiveStream',
                    'liveStream',
                    'cameraStream'
                ];
                
                streamVariables.forEach(streamVar => {
                    if (window[streamVar]) {
                        console.log(`📹 Stopping ${streamVar}`);
                        window[streamVar].getTracks().forEach(track => {
                            track.stop();
                            console.log(`⏹️ Stopped ${track.kind} track from ${streamVar}`);
                        });
                        window[streamVar] = null;
                    }
                });
                
                // Remove ALL possible live stream related elements
                const elementsToRemove = [
                    'liveStreamUI',
                    'simpleLiveModal', 
                    'realLiveInterface',
                    'liveStreamModal',
                    'liveStreamInterface'
                ];
                
                elementsToRemove.forEach(elementId => {
                    const element = document.getElementById(elementId);
                    if (element) {
                        console.log(`🗑️ Removing ${elementId}`);
                        element.remove();
                    }
                });
                
                // Also remove any live-related elements by class or attribute
                const liveElements = document.querySelectorAll('[id*="live"], [id*="Live"], [class*="live"], [class*="Live"]');
                liveElements.forEach(el => {
                    if (el.style.position === 'fixed' && el.style.zIndex >= '10000') {
                        console.log('🗑️ Removing fixed live element:', el.id || el.className);
                        el.remove();
                    }
                });
                
                // Resume any paused background videos
                setTimeout(() => {
                    const backgroundVideos = document.querySelectorAll('.video-element');
                    console.log(`▶️ Attempting to resume ${backgroundVideos.length} background videos`);
                    backgroundVideos.forEach((video, i) => {
                        if (video.paused && !video.ended) {
                            console.log(`▶️ Resuming background video ${i}`);
                            video.play().catch(e => console.log(`Could not resume video ${i}:`, e));
                        }
                    });
                }, 500);
                
                showNotification('📺 Stream ended', 'info');
                console.log('✅ Live stream ended successfully');
            } else {
                console.log('❌ User cancelled end stream');
            }
        };
        
        // Real Live Stream Implementation
        window.openLiveStreamSetup = function() {
            console.log('📺 Opening Real Live Stream Setup');
            showNotification('📺 Initializing camera access...', 'info');
            
            // Create live stream setup modal with real camera preview
            const modal = document.createElement('div');
            modal.id = 'liveStreamModal';
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: rgba(0,0,0,0.95); z-index: 10000; 
                display: flex; align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; text-align: center; color: white; max-width: 600px; width: 90%;">
                    <h2 style="margin-bottom: 20px;">📺 Go Live</h2>
                    
                    <div id="cameraPreviewContainer" style="width: 100%; height: 300px; background: #000; border-radius: 10px; margin-bottom: 20px; position: relative; overflow: hidden;">
                        <video id="previewVideo" autoplay muted playsinline style="width: 100%; height: 100%; object-fit: cover; display: none;"></video>
                        <div id="cameraPlaceholder" style="height: 100%; display: flex; align-items: center; justify-content: center; flex-direction: column;">
                            <div style="font-size: 40px; margin-bottom: 10px;">📹</div>
                            <div style="color: rgba(255,255,255,0.7);">Requesting camera access...</div>
                        </div>
                        <div id="cameraControls" style="position: absolute; bottom: 10px; right: 10px; display: none; gap: 10px;">
                            <button id="flipCameraBtn" style="width: 40px; height: 40px; border-radius: 50%; background: rgba(0,0,0,0.7); border: 1px solid white; color: white; cursor: pointer;">📷</button>
                            <button id="toggleMicBtn" style="width: 40px; height: 40px; border-radius: 50%; background: rgba(0,0,0,0.7); border: 1px solid white; color: white; cursor: pointer;">🎤</button>
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <input id="streamTitle" type="text" placeholder="What's happening?" 
                               style="width: 100%; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; color: white; margin-bottom: 10px;">
                        <select id="streamCategory" style="width: 100%; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; color: white;">
                            <option value="general">General</option>
                            <option value="music">Music</option>
                            <option value="gaming">Gaming</option>
                            <option value="education">Education</option>
                            <option value="cooking">Cooking</option>
                            <option value="fitness">Fitness</option>
                        </select>
                    </div>
                    
                    <div style="margin-bottom: 20px;">
                        <label style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                            <input id="allowComments" type="checkbox" checked> Allow Comments
                        </label>
                        <label style="display: flex; align-items: center; gap: 10px;">
                            <input id="allowGifts" type="checkbox" checked> Allow Gifts
                        </label>
                    </div>
                    
                    <div style="display: flex; gap: 10px; justify-content: center;">
                        <button id="startLiveBtn" onclick="startActualLiveStream()" disabled
                                style="background: linear-gradient(45deg, #ff2d55, #ff6b6b); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer; font-weight: 600; opacity: 0.5;">
                            🔴 Go Live
                        </button>
                        <button onclick="closeLiveStreamSetup()" 
                                style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer;">
                            Cancel
                        </button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Initialize camera
            initializeCameraPreview();
        };
        
        // Initialize camera preview
        async function initializeCameraPreview() {
            try {
                const video = document.getElementById('previewVideo');
                const placeholder = document.getElementById('cameraPlaceholder');
                const controls = document.getElementById('cameraControls');
                const startBtn = document.getElementById('startLiveBtn');
                
                // Request camera and microphone access
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { 
                        width: { ideal: 1280 }, 
                        height: { ideal: 720 },
                        facingMode: 'user'
                    },
                    audio: true
                });
                
                // Store stream globally for later use
                window.currentLiveStream = stream;
                
                // Set video source
                video.srcObject = stream;
                
                // Show video and hide placeholder
                video.style.display = 'block';
                placeholder.style.display = 'none';
                controls.style.display = 'flex';
                
                // Enable go live button
                startBtn.disabled = false;
                startBtn.style.opacity = '1';
                startBtn.style.cursor = 'pointer';
                
                placeholder.innerHTML = '<div style="color: #4ecdc4;">✅ Camera ready!</div>';
                
                showNotification('📹 Camera access granted!', 'success');
                
                // Add camera control functionality
                setupCameraControls(stream);
                
            } catch (error) {
                console.error('Camera access denied:', error);
                const placeholder = document.getElementById('cameraPlaceholder');
                placeholder.innerHTML = `
                    <div style="color: #ff6b6b; text-align: center;">
                        <div style="font-size: 40px; margin-bottom: 10px;">❌</div>
                        <div>Camera access denied</div>
                        <div style="font-size: 12px; margin-top: 10px;">Please allow camera access to go live</div>
                    </div>
                `;
                showNotification('❌ Camera access required for live streaming', 'error');
            }
        }
        
        // Setup camera controls
        function setupCameraControls(stream) {
            const flipBtn = document.getElementById('flipCameraBtn');
            const micBtn = document.getElementById('toggleMicBtn');
            
            // Microphone toggle
            micBtn.addEventListener('click', () => {
                const audioTrack = stream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = !audioTrack.enabled;
                    micBtn.textContent = audioTrack.enabled ? '🎤' : '🎤❌';
                    showNotification(audioTrack.enabled ? '🎤 Microphone on' : '🎤 Microphone off', 'info');
                }
            });
            
            // Camera flip (if supported)
            flipBtn.addEventListener('click', async () => {
                try {
                    const videoTrack = stream.getVideoTracks()[0];
                    const currentFacingMode = videoTrack.getSettings().facingMode;
                    const newFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
                    
                    const newStream = await navigator.mediaDevices.getUserMedia({
                        video: { facingMode: newFacingMode },
                        audio: true
                    });
                    
                    const video = document.getElementById('previewVideo');
                    video.srcObject = newStream;
                    
                    // Stop old stream
                    stream.getTracks().forEach(track => track.stop());
                    window.currentLiveStream = newStream;
                    
                    showNotification('📷 Camera flipped!', 'success');
                } catch (error) {
                    showNotification('📷 Camera flip not supported', 'info');
                }
            });
        }
        
        // Start actual live stream
        window.startActualLiveStream = function() {
            const title = document.getElementById('streamTitle').value || 'Live Stream';
            const category = document.getElementById('streamCategory').value;
            const allowComments = document.getElementById('allowComments').checked;
            const allowGifts = document.getElementById('allowGifts').checked;
            
            console.log('🔴 Starting live stream with settings:', {
                title, category, allowComments, allowGifts
            });
            
            // Close setup modal
            closeLiveStreamSetup();
            
            // Create actual live stream interface
            createLiveStreamInterface(title, category, allowComments, allowGifts);
        };
        
        // Create live stream interface
        function createLiveStreamInterface(title, category, allowComments, allowGifts) {
            const liveInterface = document.createElement('div');
            liveInterface.id = 'liveStreamInterface';
            liveInterface.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                background: #000; z-index: 10000; display: flex;
            `;
            
            liveInterface.innerHTML = `
                <div style="flex: 1; position: relative;">
                    <video id="liveVideo" autoplay muted playsinline style="width: 100%; height: 100%; object-fit: cover;"></video>
                    
                    <!-- Live Stream Overlay -->
                    <div style="position: absolute; top: 20px; left: 20px; display: flex; align-items: center; gap: 15px;">
                        <div style="background: rgba(255,0,0,0.9); padding: 8px 15px; border-radius: 20px; display: flex; align-items: center; gap: 8px;">
                            <div style="width: 8px; height: 8px; background: white; border-radius: 50%; animation: blink 1s infinite;"></div>
                            <span style="color: white; font-weight: 600;">LIVE</span>
                        </div>
                        <div style="background: rgba(0,0,0,0.7); padding: 8px 15px; border-radius: 20px; color: white;">
                            <span id="viewerCount">0</span> viewers
                        </div>
                    </div>
                    
                    <!-- Stream Controls -->
                    <div style="position: absolute; top: 20px; right: 20px; display: flex; gap: 10px;">
                        <button onclick="endLiveStream()" style="background: rgba(255,0,0,0.9); color: white; border: none; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
                            End Stream
                        </button>
                        <button onclick="toggleStreamSettings()" style="background: rgba(0,0,0,0.7); color: white; border: none; padding: 10px 15px; border-radius: 50%; cursor: pointer;">
                            ⚙️
                        </button>
                    </div>
                    
                    <!-- Stream Info -->
                    <div style="position: absolute; bottom: 20px; left: 20px; color: white;">
                        <h3 style="margin: 0 0 5px 0;">${title}</h3>
                        <p style="margin: 0; opacity: 0.8;">${category.charAt(0).toUpperCase() + category.slice(1)} • Started just now</p>
                    </div>
                </div>
                
                <!-- Chat Sidebar -->
                <div style="width: 350px; background: rgba(0,0,0,0.9); display: flex; flex-direction: column; border-left: 1px solid rgba(255,255,255,0.1);">
                    <div style="padding: 20px; border-bottom: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="margin: 0; color: white;">Live Chat</h3>
                    </div>
                    
                    <div id="chatMessages" style="flex: 1; padding: 20px; overflow-y: auto; color: white;">
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                            <strong style="color: #ff2d55;">@viewer123:</strong> Amazing stream! 🔥
                        </div>
                        <div style="margin-bottom: 15px; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                            <strong style="color: #4ecdc4;">@fan456:</strong> Love this content! 
                        </div>
                    </div>
                    
                    ${allowComments ? `
                    <div style="padding: 20px; border-top: 1px solid rgba(255,255,255,0.1);">
                        <div style="display: flex; gap: 10px;">
                            <input id="chatInput" type="text" placeholder="Say something..." 
                                   style="flex: 1; padding: 10px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 20px; color: white;">
                            <button onclick="sendChatMessage()" style="background: #ff2d55; color: white; border: none; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
                                Send
                            </button>
                        </div>
                    </div>
                    ` : '<div style="padding: 20px; text-align: center; color: rgba(255,255,255,0.5);">Comments disabled</div>'}
                </div>
            `;
            
            document.body.appendChild(liveInterface);
            
            // Set up live video
            const liveVideo = document.getElementById('liveVideo');
            liveVideo.srcObject = window.currentLiveStream;
            
            // Start viewer simulation
            simulateViewers();
            
            // Add CSS animation for live indicator
            const style = document.createElement('style');
            style.textContent = `
                @keyframes blink {
                    0%, 50% { opacity: 1; }
                    51%, 100% { opacity: 0.3; }
                }
            `;
            document.head.appendChild(style);
            
            showNotification('🔴 You are now LIVE!', 'success', 5000);
        }
        
        // Simulate viewers joining
        function simulateViewers() {
            let viewerCount = 0;
            const viewerCountElement = document.getElementById('viewerCount');
            
            // Simulate viewers joining over time
            const interval = setInterval(() => {
                if (document.getElementById('liveStreamInterface')) {
                    const randomIncrease = Math.random() > 0.7 ? Math.floor(Math.random() * 3) + 1 : 0;
                    viewerCount += randomIncrease;
                    if (viewerCountElement) {
                        viewerCountElement.textContent = viewerCount;
                    }
                } else {
                    clearInterval(interval);
                }
            }, 5000);
        }
        
        // Send chat message
        window.sendChatMessage = function() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (message) {
                const chatMessages = document.getElementById('chatMessages');
                const messageElement = document.createElement('div');
                messageElement.style.cssText = 'margin-bottom: 15px; padding: 10px; background: rgba(255,45,85,0.2); border-radius: 8px; border-left: 3px solid #ff2d55;';
                messageElement.innerHTML = `<strong style="color: #ff2d55;">You:</strong> ${message}`;
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                input.value = '';
                showNotification('💬 Message sent!', 'success');
            }
        };
        
        // REMOVED: Duplicate endLiveStream function - using enhanced version above
        
        // Close live stream setup
        window.closeLiveStreamSetup = function() {
            // Stop camera stream if active
            if (window.currentLiveStream) {
                window.currentLiveStream.getTracks().forEach(track => track.stop());
                window.currentLiveStream = null;
            }
            
            // Remove modal
            const modal = document.getElementById('liveStreamModal');
            if (modal) {
                modal.remove();
            }
        };
        
        // Initialize working features on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('✅ VIB3 TikTok features initialized and ready!');
            
            // Check if video feed element exists
            const videoFeed = document.getElementById('videoFeed');
            console.log('🔍 DIAGNOSTIC: videoFeed element:', videoFeed);
            
            if (!videoFeed) {
                console.error('❌ ERROR: videoFeed element not found!');
                return;
            }
            
            // Load initial video feed
            console.log('📺 Loading initial video feed...');
            try {
                window.loadVideoFeed();
            } catch (error) {
                console.error('❌ LOAD FEED ERROR:', error);
                const videoFeed = document.getElementById('videoFeed');
                if (videoFeed) {
                    videoFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">⚠️</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">Error Loading Feed</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Please refresh the page and try again.
                            </p>
                        </div>
                    `;
                }
            }
            
            // Force override the live stream button with our working function
            setTimeout(() => {
                const liveStreamBtn = document.getElementById('liveStreamBtn');
                if (liveStreamBtn) {
                    console.log('🔧 Overriding live stream button click handler');
                    
                    // Remove all existing event listeners and onclick
                    liveStreamBtn.onclick = null;
                    liveStreamBtn.removeAttribute('onclick');
                    
                    // Clear all existing event listeners
                    const newBtn = liveStreamBtn.cloneNode(true);
                    liveStreamBtn.parentNode.replaceChild(newBtn, liveStreamBtn);
                    
                    // Add our working function directly to the new button
                    newBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('🎯 DIRECT BUTTON CLICK - Opening REAL camera live stream setup');
                        
                        // Call our real function directly
                        if (typeof window.directLiveStreamStart === 'function') {
                            console.log('✅ Calling directLiveStreamStart function');
                            window.directLiveStreamStart();
                        } else {
                            console.error('❌ directLiveStreamStart function not found');
                            // Fallback: call the function directly
                            openRealLiveStream();
                        }
                    });
                    
                    console.log('✅ Live stream button handler overridden successfully');
                }
            }, 1500);
            
            // Backup direct function call
            window.openRealLiveStream = function() {
                console.log('🚀 BACKUP: Opening real live stream with camera');
                showNotification('📹 Requesting camera access...', 'info');
                
                // Create the real camera modal
                const modal = document.createElement('div');
                modal.id = 'realLiveStreamModal';
                modal.style.cssText = `
                    position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                    background: rgba(0,0,0,0.95); z-index: 10000; 
                    display: flex; align-items: center; justify-content: center;
                `;
                
                modal.innerHTML = `
                    <div style="background: #1a1a2e; padding: 40px; border-radius: 20px; text-align: center; color: white; max-width: 600px; width: 90%;">
                        <h2 style="margin-bottom: 20px;">📺 Go Live</h2>
                        
                        <div id="realCameraContainer" style="width: 100%; height: 300px; background: #000; border-radius: 10px; margin-bottom: 20px; position: relative; overflow: hidden;">
                            <video id="realCameraVideo" autoplay muted playsinline style="width: 100%; height: 100%; object-fit: cover; display: none;"></video>
                            <div id="cameraStatus" style="height: 100%; display: flex; align-items: center; justify-content: center; flex-direction: column; color: white;">
                                <div style="font-size: 40px; margin-bottom: 10px;">📹</div>
                                <div>Requesting camera access...</div>
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 20px;">
                            <input id="realStreamTitle" type="text" placeholder="What's happening?" 
                                   style="width: 100%; padding: 12px; background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; color: white; margin-bottom: 10px;">
                        </div>
                        
                        <div style="display: flex; gap: 10px; justify-content: center;">
                            <button id="realGoLiveBtn" onclick="startRealLiveStream()" disabled
                                    style="background: linear-gradient(45deg, #ff2d55, #ff6b6b); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer; font-weight: 600; opacity: 0.5;">
                                🔴 Go Live
                            </button>
                            <button onclick="closeRealLiveStream()" 
                                    style="background: rgba(255,255,255,0.2); color: white; border: none; padding: 15px 30px; border-radius: 25px; cursor: pointer;">
                                Cancel
                            </button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                
                // Start camera immediately
                startRealCamera();
            };
            
            // Real camera function
            window.startRealCamera = async function() {
                console.log('📹 Starting real camera access');
                try {
                    const video = document.getElementById('realCameraVideo');
                    const status = document.getElementById('cameraStatus');
                    const goLiveBtn = document.getElementById('realGoLiveBtn');
                    
                    console.log('📱 Requesting getUserMedia...');
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: { 
                            width: { ideal: 1280 }, 
                            height: { ideal: 720 },
                            facingMode: 'user'
                        },
                        audio: true
                    });
                    
                    console.log('✅ Camera access granted!');
                    window.realLiveStream = stream;
                    
                    // Show camera feed
                    video.srcObject = stream;
                    video.style.display = 'block';
                    status.style.display = 'none';
                    
                    // Enable go live button
                    goLiveBtn.disabled = false;
                    goLiveBtn.style.opacity = '1';
                    
                    showNotification('📹 Camera ready!', 'success');
                    
                } catch (error) {
                    console.error('❌ Camera access failed:', error);
                    const status = document.getElementById('cameraStatus');
                    status.innerHTML = `
                        <div style="color: #ff6b6b; text-align: center;">
                            <div style="font-size: 40px; margin-bottom: 10px;">❌</div>
                            <div>Camera access denied</div>
                            <div style="font-size: 12px; margin-top: 10px;">Please allow camera access and try again</div>
                        </div>
                    `;
                    showNotification('❌ Camera access required for live streaming', 'error');
                }
            };
            
            // Start real live stream
            window.startRealLiveStream = function() {
                const title = document.getElementById('realStreamTitle').value || 'Live Stream';
                console.log('🔴 Starting real live stream:', title);
                
                closeRealLiveStream();
                createRealLiveInterface(title);
            };
            
            // Create real live interface
            window.createRealLiveInterface = function(title) {
                const liveInterface = document.createElement('div');
                liveInterface.id = 'realLiveInterface';
                liveInterface.style.cssText = `
                    position: fixed; top: 0; left: 0; right: 0; bottom: 0; 
                    background: #000; z-index: 10000; display: flex;
                `;
                
                liveInterface.innerHTML = `
                    <div style="flex: 1; position: relative;">
                        <video id="realLiveVideo" autoplay muted playsinline style="width: 100%; height: 100%; object-fit: cover;"></video>
                        
                        <div style="position: absolute; top: 20px; left: 20px; display: flex; align-items: center; gap: 15px;">
                            <div style="background: rgba(255,0,0,0.9); padding: 8px 15px; border-radius: 20px; display: flex; align-items: center; gap: 8px;">
                                <div style="width: 8px; height: 8px; background: white; border-radius: 50%; animation: blink 1s infinite;"></div>
                                <span style="color: white; font-weight: 600;">LIVE</span>
                            </div>
                            <div style="background: rgba(0,0,0,0.7); padding: 8px 15px; border-radius: 20px; color: white;">
                                <span id="realViewerCount">1</span> viewers
                            </div>
                        </div>
                        
                        <div style="position: absolute; top: 20px; right: 20px;">
                            <button onclick="endRealLiveStream()" style="background: rgba(255,0,0,0.9); color: white; border: none; padding: 10px 20px; border-radius: 20px; cursor: pointer;">
                                End Stream
                            </button>
                        </div>
                        
                        <div style="position: absolute; bottom: 20px; left: 20px; color: white;">
                            <h3 style="margin: 0 0 5px 0;">${title}</h3>
                            <p style="margin: 0; opacity: 0.8;">LIVE NOW</p>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(liveInterface);
                
                // Set up live video
                const liveVideo = document.getElementById('realLiveVideo');
                liveVideo.srcObject = window.realLiveStream;
                
                showNotification('🔴 You are now LIVE!', 'success', 5000);
            };
            
            // Close functions
            window.closeRealLiveStream = function() {
                if (window.realLiveStream) {
                    window.realLiveStream.getTracks().forEach(track => track.stop());
                    window.realLiveStream = null;
                }
                const modal = document.getElementById('realLiveStreamModal');
                if (modal) modal.remove();
            };
            
            window.endRealLiveStream = function() {
                if (confirm('End live stream?')) {
                    if (window.realLiveStream) {
                        window.realLiveStream.getTracks().forEach(track => track.stop());
                    }
                    const liveInterface = document.getElementById('realLiveInterface');
                    if (liveInterface) liveInterface.remove();
                    showNotification('📺 Live stream ended', 'info');
                }
            };
        });
    </script>
</body>
</html>
