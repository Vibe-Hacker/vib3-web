<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VIB3 - Video Social App</title>
    <link rel="stylesheet" href="css/main.css">
</head>
<body>
    <div class="auth-container" id="authContainer">
        <div class="auth-form">
            <h2>Welcome to VIB3</h2>
            <div class="auth-error" id="authError"></div>
            <div class="auth-loading" id="authLoading">Loading...</div>
            <div id="loginForm">
                <input type="email" class="auth-input" id="loginEmail" placeholder="Email" required aria-label="Email">
                <input type="password" class="auth-input" id="loginPassword" placeholder="Password" required aria-label="Password">
                <button class="auth-btn" onclick="login()" aria-label="Sign In">Sign In</button>
                <div class="auth-switch">
                    Don't have an account? <a onclick="showSignup()">Sign up</a>
                </div>
            </div>
            <div id="signupForm" style="display: none;">
                <input type="text" class="auth-input" id="signupName" placeholder="Display Name" required aria-label="Display Name">
                <input type="email" class="auth-input" id="signupEmail" placeholder="Email" required aria-label="Email">
                <input type="password" class="auth-input" id="signupPassword" placeholder="Password (min 6 chars)" required aria-label="Password">
                <button class="auth-btn" onclick="signup()" aria-label="Create Account">Create Account</button>
                <div class="auth-switch">
                    Already have an account? <a onclick="showLogin()">Sign in</a>
                </div>
            </div>
        </div>
    </div>
    
    <!-- TikTok's actual sidebar layout -->
    <div class="sidebar" id="sidebar">
        <!-- TikTok Logo (clickable to refresh) -->
        <div class="sidebar-logo" onclick="refreshForYou()" style="cursor: pointer; padding: 0 20px 20px 20px;">
            <h1 style="font-size: 32px; font-weight: 900; letter-spacing: -1px; color: var(--text-primary);">VIB3</h1>
        </div>
        
        <!-- Search Bar -->
        <div style="padding: 0 20px 20px 20px;">
            <input type="text" placeholder="Search" style="width: 100%; padding: 12px 16px; border: 1px solid var(--border-primary); border-radius: 8px; background: var(--bg-tertiary); color: var(--text-primary); font-size: 14px;" onkeypress="if(event.key==='Enter') performSearch(this.value)">
        </div>
        
        <!-- Main Navigation -->
        <button class="sidebar-item active" onclick="switchFeedTab('foryou')" id="sidebarHome">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
            <div class="sidebar-text">For You</div>
        </button>
        
        <button class="sidebar-item" onclick="switchFeedTab('explore')" id="sidebarExplore">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
            <div class="sidebar-text">Explore</div>
        </button>
        
        <button class="sidebar-item" onclick="switchFeedTab('following')" id="sidebarFollowing">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A2.01 2.01 0 0 0 18.08 7c-.8 0-1.54.5-1.85 1.26l-1.94 5.83-1.31-.78A2.01 2.01 0 0 0 11.1 13l-4.03 2.41C6.41 15.74 6 16.36 6 17v5h2v-4.5l1.5-.9L9 19l1.5-2.1L12 16l1.5.9L15 19v3h4v-3h1z"/>
            </svg>
            <div class="sidebar-text">Following</div>
        </button>
        
        <button class="sidebar-item" onclick="showPage('friends')">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm2.78 3.58A2 2 0 0 0 17 7h-2c-.83 0-1.58.56-1.85 1.37L12 12l-1.15-3.63A2 2 0 0 0 9 7H7a2 2 0 0 0-1.78.58L4 9v6h2v5h3v-5h2v5h3v-5h2V9l-1.22-1.42z"/>
            </svg>
            <div class="sidebar-text">Friends</div>
        </button>
        
        <button class="sidebar-item" onclick="showUploadModal()">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 7v2.99s-1.99.01-2 0V7h-3s.01-1.99 0-2h3V2h2v3h3v2h-3zm-3 4V9h-3V7H5c-1.1 0-2 .9-2 2v9c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2v-3h2v5c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V9c0-1.1.9-2 2-2h8v2H8v2h8z"/>
            </svg>
            <div class="sidebar-text">Upload</div>
        </button>
        
        <button class="sidebar-item" onclick="showPage('activity')">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/>
            </svg>
            <div class="sidebar-text">Activity</div>
        </button>
        
        <button class="sidebar-item" onclick="showPage('messages')">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
            </svg>
            <div class="sidebar-text">Messages</div>
        </button>
        
        <button class="sidebar-item" onclick="showPage('live')">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <circle cx="12" cy="12" r="3.2"/>
                <path d="M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z"/>
            </svg>
            <div class="sidebar-text">LIVE</div>
        </button>
        
        <button class="sidebar-item" onclick="showPage('profile')" id="sidebarProfile">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <div class="sidebar-text">Profile</div>
        </button>
        
        <button class="sidebar-item" onclick="showMoreOptions()">
            <svg class="sidebar-icon" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
            </svg>
            <div class="sidebar-text">...More</div>
        </button>
        
        <!-- Separator Line -->
        <div style="height: 1px; background: var(--border-primary); margin: 20px 16px;"></div>
        
        <!-- Following Accounts Section -->
        <div style="padding: 0 20px;">
            <p style="color: var(--text-secondary); font-size: 14px; font-weight: 600; margin-bottom: 12px;">Following accounts</p>
            <div id="followingAccountsList">
                <!-- Following accounts will be populated here -->
                <p style="color: var(--text-tertiary); font-size: 12px;">Log in to see accounts you follow</p>
            </div>
        </div>
    </div>
    
    
    <div class="app-container main-app" id="mainApp">
        
        <div class="video-feed" id="videoFeed">
            <div class="feed-tabs">
                <button class="feed-tab active" onclick="switchFeedTab('foryou')" id="foryouTab" aria-label="For You Feed">For You</button>
                <button class="feed-tab" onclick="switchFeedTab('following')" id="followingTab" aria-label="Following Feed">Following</button>
                <button class="feed-tab" onclick="switchFeedTab('discover')" id="discoverTab" aria-label="Discover Feed">Discover</button>
            </div>
            <div class="feed-content active" id="foryouFeed">
            </div>
            <div class="feed-content" id="followingFeed">
            </div>
            <div class="feed-content" id="discoverFeed">
                <div style="position: sticky; top: 0; background: var(--bg-primary); padding: 20px; z-index: 10; border-bottom: 1px solid var(--border-primary);">
                    <input type="text" id="discoverSearchInput" placeholder="Search videos, users, or hashtags..." 
                           style="width: 100%; padding: 12px 20px; border: none; border-radius: 25px; background: rgba(255,255,255,0.1); color: white; font-size: 16px; margin-bottom: 15px;"
                           onkeyup="filterDiscoverVideos(this.value)">
                    <div style="display: flex; gap: 10px; margin-bottom: 0; flex-wrap: wrap;">
                        <button onclick="filterByTag('dance')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#dance</button>
                        <button onclick="filterByTag('funny')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#funny</button>
                        <button onclick="filterByTag('music')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#music</button>
                        <button onclick="filterByTag('trending')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#trending</button>
                        <button onclick="filterByTag('viral')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#viral</button>
                    </div>
                </div>
                <div id="discoverVideoFeed" style="padding: 20px;"></div>
            </div>
        </div>
        <div class="search-page" id="searchPage">
            <h2 style="margin-bottom: 20px;">🔍 Discover</h2>
            <input type="text" class="auth-input" id="searchInput" placeholder="Search videos, users, sounds..." style="margin-bottom: 20px;" aria-label="Search videos" oninput="performSearch()">
            <div class="search-results" id="searchResults"></div>
            <div id="searchNoResults" style="color: #888; text-align: center; margin-top: 50px; display: none;">
                🔍 No results found. Try a different search term.
            </div>
            <div id="searchTrending" style="margin-top: 20px;">
                <h3>🔥 Trending</h3>
                <div class="search-result-item" onclick="searchTrendingTag('dance')">
                    <div class="search-result-avatar">#</div>
                    <div class="search-result-info">
                        <h4>#dance</h4>
                        <p>2.1M videos</p>
                    </div>
                </div>
                <div class="search-result-item" onclick="searchTrendingTag('viral')">
                    <div class="search-result-avatar">#</div>
                    <div class="search-result-info">
                        <h4>#viral</h4>
                        <p>5.8M videos</p>
                    </div>
                </div>
            </div>
        </div>
        <!-- TikTok-style Profile Page -->
        <div class="profile-page" id="profilePage" style="margin-left: 240px; width: calc(100vw - 240px); height: 100vh; overflow-y: auto; background: var(--bg-primary);">
            <!-- Profile Header -->
            <div style="padding: 32px 40px; border-bottom: 1px solid var(--border-primary);">
                <div style="display: flex; align-items: flex-start; gap: 32px;">
                    <!-- Profile Picture -->
                    <div style="position: relative;">
                        <div id="profilePic" onclick="uploadProfilePicture()" style="width: 116px; height: 116px; border-radius: 50%; background: linear-gradient(45deg, #ff006e, #8338ec); display: flex; align-items: center; justify-content: center; cursor: pointer; overflow: hidden; position: relative;">
                            <span id="profilePicText" style="color: white; font-size: 48px; font-weight: bold;">👤</span>
                            <div style="position: absolute; bottom: 0; right: 0; width: 32px; height: 32px; background: white; border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="#161823">
                                    <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                                </svg>
                            </div>
                        </div>
                        <input type="file" id="profilePicInput" accept="image/*" style="display: none;" onchange="handleProfilePicUpload(event)">
                    </div>
                    
                    <!-- Profile Info -->
                    <div style="flex: 1; min-width: 0;">
                        <!-- Username and Verification -->
                        <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                            <h1 id="profileName" style="font-size: 32px; font-weight: bold; color: var(--text-primary); margin: 0;">@yourhandle</h1>
                            <button onclick="editDisplayName()" style="padding: 8px 24px; background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border-primary); border-radius: 4px; font-size: 16px; font-weight: 600; cursor: pointer;">Edit profile</button>
                        </div>
                        
                        <!-- Display Name -->
                        <h2 style="font-size: 20px; font-weight: 600; color: var(--text-primary); margin: 0 0 16px 0;" id="userDisplayName">Display Name</h2>
                        
                        <!-- Stats -->
                        <div style="display: flex; gap: 20px; margin-bottom: 16px;">
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <span style="font-size: 18px; font-weight: bold; color: var(--text-primary);" id="followingCount">0</span>
                                <span style="color: var(--text-secondary);">Following</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <span style="font-size: 18px; font-weight: bold; color: var(--text-primary);" id="followersCount">0</span>
                                <span style="color: var(--text-secondary);">Followers</span>
                            </div>
                            <div style="display: flex; align-items: center; gap: 4px;">
                                <span style="font-size: 18px; font-weight: bold; color: var(--text-primary);" id="likesCount">0</span>
                                <span style="color: var(--text-secondary);">Likes</span>
                            </div>
                        </div>
                        
                        <!-- Bio -->
                        <div style="color: var(--text-primary); margin-bottom: 16px; line-height: 1.5;">
                            Your bio goes here ✨ Click edit profile to change
                        </div>
                        
                        <!-- Action Buttons -->
                        <div style="display: flex; gap: 12px;">
                            <button onclick="showPage('settings')" style="padding: 10px 20px; background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border-primary); border-radius: 4px; font-size: 16px; font-weight: 600; cursor: pointer;">Settings</button>
                            <button onclick="logout()" style="padding: 10px 20px; background: var(--bg-tertiary); color: var(--text-primary); border: 1px solid var(--border-primary); border-radius: 4px; font-size: 16px; font-weight: 600; cursor: pointer;">Sign out</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Content Tabs -->
            <div style="display: flex; border-bottom: 1px solid var(--border-primary);">
                <button style="flex: 1; padding: 16px; background: none; border: none; color: var(--text-primary); font-size: 16px; font-weight: 600; cursor: pointer; border-bottom: 2px solid var(--accent-primary);">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px;">
                        <path d="M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z"/>
                    </svg>
                    Videos
                </button>
                <button style="flex: 1; padding: 16px; background: none; border: none; color: var(--text-secondary); font-size: 16px; font-weight: 600; cursor: pointer;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px;">
                        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                    </svg>
                    Liked
                </button>
            </div>
            
            <!-- Videos Grid -->
            <div style="padding: 20px 40px;">
                <div id="userVideosGrid" class="tiktok-videos-grid"></div>
                <div id="noVideosMessage" style="text-align: center; color: var(--text-secondary); margin-top: 80px; display: none;">
                    <div style="font-size: 96px; margin-bottom: 24px;">📹</div>
                    <h3 style="font-size: 24px; margin-bottom: 8px; color: var(--text-primary);">Upload your first video</h3>
                    <p style="font-size: 16px; margin-bottom: 24px;">Your videos will appear here</p>
                    <button onclick="showUploadModal()" style="padding: 12px 24px; background: var(--accent-primary); color: white; border: none; border-radius: 4px; font-size: 16px; font-weight: 600; cursor: pointer;">Upload video</button>
                </div>
            </div>
        </div>
        <div class="settings-page" id="settingsPage" style="margin-left: 240px; width: calc(100vw - 240px); height: 100vh; overflow-y: auto; background: var(--bg-primary); padding: 20px;">
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 30px;">
                <button onclick="showPage('profile')" style="background: none; border: none; color: white; font-size: 24px; cursor: pointer;" aria-label="Back to profile">←</button>
                <h2 style="margin: 0;">⚙️ Settings</h2>
            </div>
            
            <div class="settings-section">
                <h3>🎨 Theme</h3>
                <div class="theme-options">
                    <div class="theme-option" data-theme="light" onclick="changeTheme('light')">
                        <div class="theme-preview theme-light"></div>
                        <span>Light</span>
                    </div>
                    <div class="theme-option" data-theme="dark" onclick="changeTheme('dark')">
                        <div class="theme-preview theme-dark"></div>
                        <span>Dark</span>
                    </div>
                    <div class="theme-option" data-theme="purple" onclick="changeTheme('purple')">
                        <div class="theme-preview theme-purple"></div>
                        <span>Purple</span>
                    </div>
                    <div class="theme-option" data-theme="blue" onclick="changeTheme('blue')">
                        <div class="theme-preview theme-blue"></div>
                        <span>Ocean</span>
                    </div>
                    <div class="theme-option" data-theme="green" onclick="changeTheme('green')">
                        <div class="theme-preview theme-green"></div>
                        <span>Nature</span>
                    </div>
                    <div class="theme-option" data-theme="rose" onclick="changeTheme('rose')">
                        <div class="theme-preview theme-rose"></div>
                        <span>Rose</span>
                    </div>
                </div>
            </div>
            
            <div class="settings-section">
                <h3>Privacy</h3>
                <div class="settings-item">
                    <span>Private Account</span>
                    <div class="toggle-switch" onclick="toggleSetting(this, 'privateAccount')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
                <div class="settings-item">
                    <span>Allow Comments</span>
                    <div class="toggle-switch active" onclick="toggleSetting(this, 'allowComments')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
                <div class="settings-item">
                    <span>Allow Downloads</span>
                    <div class="toggle-switch" onclick="toggleSetting(this, 'allowDownloads')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
            </div>

            <div class="settings-section">
                <h3>Notifications</h3>
                <div class="settings-item">
                    <span>Push Notifications</span>
                    <div class="toggle-switch active" onclick="toggleSetting(this, 'pushNotifications')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
                <div class="settings-item">
                    <span>Email Notifications</span>
                    <div class="toggle-switch" onclick="toggleSetting(this, 'emailNotifications')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
            </div>

            <div class="settings-section">
                <h3>Display</h3>
                <div class="settings-item">
                    <span>Dark Mode</span>
                    <div class="toggle-switch active" onclick="toggleSetting(this, 'darkMode')">
                        <div class="toggle-switch-thumb"></div>
                    </div>
                </div>
            </div>

            <div class="settings-section">
                <h3>About</h3>
                <div class="settings-item" style="cursor: pointer;" onclick="showToast('VIB3 v1.0.0')">
                    <span>App Version</span>
                    <span style="color: #888;">v1.0.0</span>
                </div>
                <div class="settings-item" style="cursor: pointer;" onclick="showToast('Help center coming soon!')">
                    <span>Help & Support</span>
                    <span style="color: #888;">❓</span>
                </div>
                <div class="settings-item" style="cursor: pointer;" onclick="showToast('Terms and privacy coming soon!')">
                    <span>Terms & Privacy</span>
                    <span style="color: #888;">📄</span>
                </div>
            </div>
        </div>
        <div class="messages-page" id="messagesPage">
            <h2 style="margin-bottom: 20px;">Messages</h2>
            <div style="color: #888; text-align: center; margin-top: 50px;">
                💬 Messaging feature coming soon!<br>
                Connect with other VIB3 users
            </div>
        </div>
        

        <!-- All Modal HTML from here... -->
        <div class="modal upload-modal" id="uploadModal">
            <div class="modal-content">
                <button class="close-btn" onclick="closeUploadModal()" aria-label="Close upload modal">×</button>
                <div id="uploadStep1">
                    <h3>Create New Video</h3>
                    <div class="upload-options">
                        <div class="upload-option" onclick="recordVideo()" aria-label="Record video">
                            <div class="upload-option-icon">📹</div>
                            <div>Record Video</div>
                        </div>
                        <div class="upload-option" onclick="selectVideo()" aria-label="Choose from gallery">
                            <div class="upload-option-icon">📁</div>
                            <div>Choose from Gallery</div>
                        </div>
                    </div>
                </div>
                <div id="uploadStep2" style="display: none;">
                    <h3>Add Details</h3>
                    <video class="video-preview" id="videoPreview" controls aria-label="Video preview"></video>
                    <div class="upload-form">
                        <input type="text" id="videoTitle" placeholder="Video title..." maxlength="100" aria-label="Video title">
                        <textarea id="videoDescription" placeholder="Describe your video... #hashtags" aria-label="Video description"></textarea>
                        <button onclick="showTrendingSounds()" style="width: 100%; padding: 12px; background: #333; color: white; border: none; border-radius: 10px; margin: 10px 0; text-align: left; display: flex; align-items: center; gap: 10px;">
                            <span style="font-size: 20px;">🎵</span>
                            <div><span id="selectedSound">Choose trending sound</span><br><small style="color: #888;">Add popular audio to your video</small></div>
                        </button>
                    </div>
                    <div class="upload-buttons">
                        <button class="cancel-btn" onclick="backToStep1()" aria-label="Back to upload options">Back</button>
                        <button class="publish-btn" onclick="uploadVideo()" aria-label="Publish video">Publish</button>
                    </div>
                </div>
                <div id="uploadStep3" class="loading-state">
                    <div class="spinner"></div>
                    <div>Uploading your video...</div>
                    <div id="uploadStatus">0% complete</div>
                </div>
            </div>
        </div>

        <!-- Additional Modals -->
        <div class="modal" id="commentsModal">
            <div class="modal-content">
                <button class="close-btn" onclick="closeModal()" aria-label="Close comments">×</button>
                <h3>Comments</h3>
                <div style="margin: 20px 0; text-align: left;">
                    <div style="margin-bottom: 15px;">
                        <strong>@user123:</strong> Amazing video! 🔥
                    </div>
                    <div style="margin-bottom: 15px;">
                        <strong>@dancer_pro:</strong> Tutorial please? 🙏
                    </div>
                    <div style="margin-bottom: 15px;">
                        <strong>@music_lover:</strong> What's the song name?
                    </div>
                </div>
                <input type="text" placeholder="Add a comment..." style="width: 100%; padding: 10px; border: none; border-radius: 20px; background: #333; color: white;" aria-label="Add a comment">
            </div>
        </div>

        <div class="delete-modal" id="deleteModal">
            <div class="delete-modal-content">
                <h3>🗑️ Delete Video</h3>
                <p>Are you sure you want to delete this video?<br><strong>This action cannot be undone.</strong></p>
                <div class="delete-modal-buttons">
                    <button class="delete-modal-btn cancel-delete-btn" onclick="closeDeleteModal()" aria-label="Cancel delete">Cancel</button>
                    <button class="delete-modal-btn confirm-delete-btn" onclick="confirmDeleteVideo()" aria-label="Confirm delete">Delete</button>
                </div>
            </div>
        </div>

        <div class="share-modal" id="shareModal">
            <div class="share-modal-content">
                <div class="share-modal-header">
                    <h3 class="share-modal-title">Share Video</h3>
                    <button class="share-close-btn" onclick="closeShareModal()" aria-label="Close share modal">×</button>
                </div>
                <div class="share-options">
                    <div class="share-option share-repost" id="repostOption" onclick="toggleRepost()" aria-label="Repost video">
                        <div class="share-option-icon">🔄</div>
                        <div class="share-option-label" id="repostLabel">Repost</div>
                    </div>
                    <div class="share-option share-copy" onclick="copyVideoLink()" aria-label="Copy video link">
                        <div class="share-option-icon">📋</div>
                        <div class="share-option-label">Copy Link</div>
                    </div>
                    <div class="share-option share-instagram" onclick="shareToInstagram()" aria-label="Share to Instagram">
                        <div class="share-option-icon">📷</div>
                        <div class="share-option-label">Instagram</div>
                    </div>
                    <div class="share-option share-twitter" onclick="shareToTwitter()" aria-label="Share to Twitter">
                        <div class="share-option-icon">🐦</div>
                        <div class="share-option-label">Twitter</div>
                    </div>
                    <div class="share-option share-facebook" onclick="shareToFacebook()" aria-label="Share to Facebook">
                        <div class="share-option-icon">📘</div>
                        <div class="share-option-label">Facebook</div>
                    </div>
                    <div class="share-option share-whatsapp" onclick="shareToWhatsApp()" aria-label="Share to WhatsApp">
                        <div class="share-option-icon">💬</div>
                        <div class="share-option-label">WhatsApp</div>
                    </div>
                    <div class="share-option share-telegram" onclick="shareToTelegram()" aria-label="Share to Telegram">
                        <div class="share-option-icon">✈️</div>
                        <div class="share-option-label">Telegram</div>
                    </div>
                    <div class="share-option share-email" onclick="shareViaEmail()" aria-label="Share via Email">
                        <div class="share-option-icon">📧</div>
                        <div class="share-option-label">Email</div>
                    </div>
                    <div class="share-option share-download" onclick="downloadVideo()" aria-label="Download video">
                        <div class="share-option-icon">⬇️</div>
                        <div class="share-option-label">Download</div>
                    </div>
                    <div class="share-option share-qr" onclick="generateQRCode()" aria-label="Generate QR code">
                        <div class="share-option-icon">📱</div>
                        <div class="share-option-label">QR Code</div>
                    </div>
                    <div class="share-option share-more" onclick="shareNative()" aria-label="More share options">
                        <div class="share-option-icon">⋯</div>
                        <div class="share-option-label">More</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional modals continue... -->
        
        <div class="toast" id="toast"></div>
    </div>

    <script>
        // Define global functions that need to be available immediately
        window.handleVideoMetadata = function(video) {
            console.log('Video loaded - dimensions:', video.videoWidth, 'x', video.videoHeight);
            
            if (video.videoWidth > video.videoHeight) {
                // Landscape video - add class for cropping
                video.classList.add('landscape');
                console.log('Added landscape class to video');
            } else {
                // Portrait video - ensure no landscape class
                video.classList.remove('landscape');
                console.log('Portrait video - no special styling');
            }
        };
    </script>
    <!-- Load modular JavaScript -->
    <script type="module" src="js/main.js"></script>
    
    <script type="module">
        console.log('Loading legacy functions for transition...');
        
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
        import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';
        import { getFirestore, collection, query, where, getDocs, addDoc, deleteDoc, doc, setDoc, updateDoc, arrayUnion, arrayRemove, getDoc, deleteField, increment } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';
        import { getStorage, ref, uploadBytesResumable, getDownloadURL, deleteObject } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-storage.js';
        
        console.log('Firebase imports completed');

        const firebaseConfig = {
            apiKey: "AIzaSyDm3RODqsYRB1P9Lrri497FmMA0IIklvwM",
            authDomain: "vib3-a293b.firebaseapp.com",
            projectId: "vib3-a293b",
            storageBucket: "vib3-a293b.firebasestorage.app",
            messagingSenderId: "916623805957",
            appId: "1:916623805957:web:09e9de341bc490004fd66c",
            measurementId: "G-KW08F2608Q"
        };

        console.log('Initializing Firebase...');
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        const storage = getStorage(app);
        console.log('Firebase initialized successfully');
        
        // Make Firebase available globally immediately
        window.auth = auth;
        window.db = db;
        window.storage = storage;
        window.signInWithEmailAndPassword = signInWithEmailAndPassword;
        window.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
        window.signOut = signOut;
        window.updateProfile = updateProfile;
        window.deleteDoc = deleteDoc;
        window.doc = doc;
        window.deleteObject = deleteObject;
        window.setDoc = setDoc;
        window.updateDoc = updateDoc;
        window.arrayUnion = arrayUnion;
        window.arrayRemove = arrayRemove;
        window.getDoc = getDoc;
        window.collection = collection;
        window.addDoc = addDoc;
        window.query = query;
        window.where = where;
        window.getDocs = getDocs;
        
        console.log('Firebase functions assigned to window:', {
            auth: !!window.auth,
            signIn: !!window.signInWithEmailAndPassword,
            createUser: !!window.createUserWithEmailAndPassword,
            query: !!window.query,
            where: !!window.where,
            getDocs: !!window.getDocs
        });
        
        // Set flag to indicate Firebase is ready
        window.firebaseReady = true;

        onAuthStateChanged(auth, async (user) => {
            console.log('Auth state changed:', user ? 'User logged in' : 'User logged out');
            
            if (user) {
                // User is logged in
                window.currentUser = user;
                
                // Check if user has a Firestore document, create if missing
                await ensureUserDocument(user);
                
                // Check if this is a fresh login or page refresh
                const isPageRefresh = !window.userJustLoggedIn;
                showMainApp(user, isPageRefresh);
                if (document.getElementById('profilePage').style.display === 'block') {
                    loadUserVideos(user.uid);
                }
                loadUserFollowing();
                // Update bottom navigation profile button
                updateBottomNavProfile();
                // Reset the login flag
                window.userJustLoggedIn = false;
            } else {
                showAuthScreen();
                followedUsers.clear();
            }
        });
        
        // Ensure user has a Firestore document
        async function ensureUserDocument(user) {
            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', user.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (userSnapshot.empty) {
                    console.log('Creating missing user document for', user.uid);
                    // Create user document
                    await addDoc(collection(db, 'users'), {
                        uid: user.uid,
                        username: user.email.split('@')[0], // Use email prefix as username
                        email: user.email,
                        displayName: user.displayName || null,
                        createdAt: new Date(),
                        followers: [],
                        following: []
                    });
                    console.log('User document created successfully');
                }
            } catch (error) {
                console.error('Error ensuring user document:', error);
            }
        }

        function showMainApp(user, isPageRefresh = false) {
            document.getElementById('authContainer').style.display = 'none';
            document.getElementById('mainApp').classList.add('authenticated');
            document.getElementById('mainApp').style.display = 'block';
            // Also add to parent container for CSS targeting
            document.querySelector('.app-container').classList.add('authenticated');
            // Directly hide the login section
            const loginSection = document.querySelector('.sidebar-login-section');
            if (loginSection) {
                loginSection.style.display = 'none';
            }
            // Show profile button
            const profileBtn = document.getElementById('sidebarProfile');
            if (profileBtn) {
                profileBtn.style.display = 'flex';
            }
            // Update profile elements if they exist
            const profileNameEl = document.getElementById('profileName');
            const userDisplayNameEl = document.getElementById('userDisplayName');
            
            if (profileNameEl) {
                profileNameEl.textContent = '@' + (user.email.split('@')[0] || 'user');
            }
            if (userDisplayNameEl) {
                userDisplayNameEl.textContent = user.displayName || user.email || 'VIB3 User';
            }
            window.currentUser = user;
            
            // Update header profile picture
            updateHeaderProfile();
            
            // Load user profile picture
            loadUserProfilePicture();
            
            // Load following accounts for sidebar
            loadFollowingAccountsForSidebar();
            
            // Only enable audio flag for fresh logins, not page refreshes
            if (!isPageRefresh) {
                window.enableAudioAfterLogin = true;
            } else {
                // For page refresh, restore previous audio preference or default to enabled
                const savedAudioPreference = localStorage.getItem('vib3_audio_enabled');
                window.enableAudioAfterLogin = savedAudioPreference !== 'false'; // Default to true unless explicitly disabled
            }
            
            // Small delay to ensure currentUser is properly set before loading videos
            setTimeout(() => {
                // Ensure we're on the For You page and video feed is shown
                document.querySelectorAll('.sidebar-item').forEach(item => item.classList.remove('active'));
                document.getElementById('sidebarHome').classList.add('active');
                
                // Hide any profile/settings pages and show video feed
                const pages = ['profilePage', 'settingsPage', 'searchPage', 'messagesPage'];
                pages.forEach(pageId => {
                    const page = document.getElementById(pageId);
                    if (page) page.style.display = 'none';
                });
                
                // Show video feed
                const videoFeed = document.getElementById('videoFeed');
                if (videoFeed) videoFeed.style.display = 'block';
                
                // Switch to For You tab and load videos
                switchFeedTab('foryou');
            }, 100);
        }

        function showAuthScreen() {
            document.getElementById('authContainer').style.display = 'flex';
            document.getElementById('mainApp').style.display = 'none';
            document.getElementById('mainApp').classList.remove('authenticated');
            document.querySelector('.app-container').classList.remove('authenticated');
            document.getElementById('userVideosGrid').innerHTML = '';
            document.getElementById('noVideosMessage').style.display = 'block';
        }

        // Load user videos function
        async function loadUserVideos(userId) {
            try {
                const videosGrid = document.getElementById('userVideosGrid');
                const noVideosMessage = document.getElementById('noVideosMessage');
                videosGrid.innerHTML = '';

                const q = query(collection(db, 'videos'), where('userId', '==', userId));
                const querySnapshot = await getDocs(q);

                if (querySnapshot.empty) {
                    if (noVideosMessage) noVideosMessage.style.display = 'block';
                    const userVideosCountEl = document.getElementById('userVideosCount');
                    if (userVideosCountEl) userVideosCountEl.textContent = '0';
                    return;
                }

                if (noVideosMessage) noVideosMessage.style.display = 'none';
                const userVideosCountEl = document.getElementById('userVideosCount');
                if (userVideosCountEl) userVideosCountEl.textContent = querySnapshot.size;

                // Collect all videos for playlist functionality
                const allVideos = [];
                querySnapshot.forEach((doc) => {
                    const videoData = doc.data();
                    allVideos.push({
                        id: doc.id,
                        url: videoData.videoUrl,
                        title: videoData.title || videoData.description || 'Untitled',
                        description: videoData.description || ''
                    });
                });

                querySnapshot.forEach((doc, index) => {
                    const videoData = doc.data();
                    const videoItem = document.createElement('div');
                    videoItem.className = 'user-video-item';
                    videoItem.innerHTML = `
                        <video class="user-video-preview" src="${videoData.videoUrl}" playsinline preload="metadata"></video>
                        <div class="video-overlay">
                            <div class="video-title">${videoData.title || videoData.description || 'Untitled'}</div>
                            <button class="delete-btn" onclick="showDeleteModal('${doc.id}')" aria-label="Delete video">🗑️</button>
                        </div>
                    `;
                    
                    const video = videoItem.querySelector('.user-video-preview');
                    video.addEventListener('click', () => {
                        playVideoFullScreen(videoData.videoUrl, videoData.title || videoData.description, videoData.description, index, allVideos);
                    });
                    
                    video.addEventListener('mouseenter', () => {
                        video.play().catch(() => {});
                    });
                    video.addEventListener('mouseleave', () => {
                        video.pause();
                        video.currentTime = 0;
                    });
                    
                    video.addEventListener('error', () => {
                        videoItem.innerHTML = `
                            <div style="width: 100%; height: 100%; aspect-ratio: 9/16; background: linear-gradient(135deg, #333, #555); display: flex; align-items: center; justify-content: center; flex-direction: column; color: #888; border-radius: 10px;">
                                <div style="font-size: 30px; margin-bottom: 10px;">📱</div>
                                <div style="font-size: 12px; text-align: center; color: #aaa;">Video Loading...</div>
                            </div>
                            <div class="video-overlay">
                                <div class="video-title">${videoData.title || videoData.description || 'Untitled'}</div>
                                <button class="delete-btn" onclick="showDeleteModal('${doc.id}')" aria-label="Delete video">🗑️</button>
                            </div>
                        `;
                    });
                    
                    // Ensure consistent aspect ratio even if video hasn't loaded
                    video.addEventListener('loadedmetadata', () => {
                        // Video loaded successfully - maintain aspect ratio
                        video.style.objectFit = 'cover';
                        video.style.width = '100%';
                        video.style.height = '100%';
                    });
                    
                    videosGrid.appendChild(videoItem);
                });
            } catch (error) {
                console.error('Error loading videos:', error);
                showToast('Failed to load videos. Please try again.');
            }
        }

        // Load following feed
        async function loadFollowingFeed() {
            if (!window.currentUser) {
                const followingFeed = document.getElementById('followingFeed');
                followingFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">🔑</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Login to see following!</h2>
                        <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                            Sign in to see videos from people you follow
                        </p>
                        <button onclick="showLogin()" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                            Login
                        </button>
                    </div>
                `;
                return;
            }

            try {
                const followingFeed = document.getElementById('followingFeed');
                followingFeed.innerHTML = '<div class="feed-loading">Loading following videos...</div>';

                // Get list of users the current user is following
                const followingQuery = query(
                    collection(db, 'following'),
                    where('followerId', '==', window.currentUser.uid)
                );
                const followingSnapshot = await getDocs(followingQuery);
                
                if (followingSnapshot.empty) {
                    followingFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">👥</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No one followed yet!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Start following creators to see their videos here.
                            </p>
                            <button onclick="switchFeedTab('foryou')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Discover Videos
                            </button>
                        </div>
                    `;
                    return;
                }

                // Get array of followed user IDs
                const followedUserIds = [];
                followingSnapshot.forEach(doc => {
                    const data = doc.data();
                    if (data.followingId) {
                        followedUserIds.push(data.followingId);
                    }
                });

                console.log('Following users:', followedUserIds);

                if (followedUserIds.length === 0) {
                    followingFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📱</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No videos yet!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                People you follow haven't posted anything yet.
                            </p>
                            <button onclick="switchFeedTab('foryou')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Browse All Videos
                            </button>
                        </div>
                    `;
                    return;
                }

                // Get videos from followed users
                const videosQuery = query(
                    collection(db, 'videos'),
                    where('userId', 'in', followedUserIds)
                );
                const videosSnapshot = await getDocs(videosQuery);

                if (videosSnapshot.empty) {
                    followingFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📱</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No new videos!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                People you follow haven't posted anything yet.
                            </p>
                            <button onclick="switchFeedTab('foryou')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Browse All Videos
                            </button>
                        </div>
                    `;
                    return;
                }

                // Clear feed and load videos
                followingFeed.innerHTML = '';
                
                const videoPromises = [];
                videosSnapshot.forEach((doc) => {
                    const videoData = doc.data();
                    const videoId = doc.id;
                    videoPromises.push(createVideoItemWithUserData(videoData, videoId));
                });
                
                // Process all videos with proper user data
                const videoItems = await Promise.all(videoPromises);
                videoItems.forEach(videoItem => {
                    if (videoItem) {
                        followingFeed.appendChild(videoItem);
                    }
                });
                
                // Load profile pictures for all users
                await loadAllUsersProfilePics();
                
                console.log(`Loaded ${videoItems.length} videos from followed users`);
                
            } catch (error) {
                console.error('Error loading following feed:', error);
                const followingFeed = document.getElementById('followingFeed');
                followingFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">⚠️</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Unable to load videos</h2>
                        <p style="font-size: 16px; margin-bottom: 30px; line-height: 1.5;">
                            There was a problem loading your following feed.
                        </p>
                        <button onclick="loadFollowingFeed()" style="padding: 15px 30px; font-size: 18px; background: #666; color: white; border: none; border-radius: 25px; cursor: pointer;">
                            🔄 Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Load search/discover feed
        async function loadSearchFeed() {
            try {
                const searchFeed = document.getElementById('searchFeed');
                searchFeed.innerHTML = '<div class="feed-loading">Loading discover feed...</div>';

                // Get all videos and shuffle them for discovery
                const videosQuery = query(collection(db, 'videos'));
                const videosSnapshot = await getDocs(videosQuery);

                if (videosSnapshot.empty) {
                    searchFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📹</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No videos to discover!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Be the first to upload a video!
                            </p>
                            <button onclick="showUploadModal()" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Upload Video
                            </button>
                        </div>
                    `;
                    return;
                }

                // Convert to array and shuffle for random discovery
                const videos = [];
                videosSnapshot.forEach((doc) => {
                    videos.push({ id: doc.id, ...doc.data() });
                });

                // Shuffle array for random order
                for (let i = videos.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [videos[i], videos[j]] = [videos[j], videos[i]];
                }

                // Clear feed
                searchFeed.innerHTML = '';

                // Add search bar at the top
                const searchBar = document.createElement('div');
                searchBar.style.cssText = 'padding: 15px; background: rgba(0,0,0,0.5); position: sticky; top: 0; z-index: 10; backdrop-filter: blur(10px);';
                searchBar.innerHTML = `
                    <input type="text" id="discoverSearchInput" placeholder="Search videos, users, or hashtags..." 
                           style="width: 100%; padding: 12px 20px; border: none; border-radius: 25px; background: rgba(255,255,255,0.1); color: white; font-size: 16px;"
                           onkeyup="filterDiscoverVideos(this.value)">
                    <div style="display: flex; gap: 10px; margin-top: 10px; flex-wrap: wrap;">
                        <button onclick="filterByTag('dance')" style="padding: 5px 15px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer;">#dance</button>
                        <button onclick="filterByTag('funny')" style="padding: 5px 15px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer;">#funny</button>
                        <button onclick="filterByTag('music')" style="padding: 5px 15px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer;">#music</button>
                        <button onclick="filterByTag('vlog')" style="padding: 5px 15px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer;">#vlog</button>
                    </div>
                `;
                searchFeed.appendChild(searchBar);

                // Create video items
                const videoPromises = videos.map(video => 
                    createVideoItemWithUserData(video, video.id)
                );
                
                const videoItems = await Promise.all(videoPromises);
                videoItems.forEach(videoItem => {
                    if (videoItem) {
                        videoItem.classList.add('discover-video-item');
                        searchFeed.appendChild(videoItem);
                    }
                });

                // Load profile pictures
                await loadAllUsersProfilePics();

                console.log(`Loaded ${videos.length} videos in discover feed`);

            } catch (error) {
                console.error('Error loading discover feed:', error);
                const searchFeed = document.getElementById('searchFeed');
                searchFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">⚠️</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Unable to load videos</h2>
                        <p style="font-size: 16px; margin-bottom: 30px; line-height: 1.5;">
                            There was a problem loading the discover feed.
                        </p>
                        <button onclick="loadSearchFeed()" style="padding: 15px 30px; font-size: 18px; background: #666; color: white; border: none; border-radius: 25px; cursor: pointer;">
                            🔄 Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Filter discover videos based on search input
        function filterDiscoverVideos(searchTerm) {
            const videos = document.querySelectorAll('.discover-video-item');
            const term = searchTerm.toLowerCase();

            videos.forEach(video => {
                const username = video.querySelector('.username')?.textContent.toLowerCase() || '';
                const description = video.querySelector('.description')?.textContent.toLowerCase() || '';
                
                if (username.includes(term) || description.includes(term)) {
                    video.style.display = 'block';
                } else {
                    video.style.display = 'none';
                }
            });
        }

        // Filter by hashtag
        function filterByTag(tag) {
            document.getElementById('discoverSearchInput').value = `#${tag}`;
            filterDiscoverVideos(`#${tag}`);
        }
        
        // Make filter functions globally available
        window.filterDiscoverVideos = filterDiscoverVideos;
        window.filterByTag = filterByTag;

        // Load pals feed (mutual followers)
        async function loadPalsFeed() {
            if (!window.currentUser) {
                const palsFeed = document.getElementById('palsFeed');
                palsFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">🔑</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Login to see pals!</h2>
                        <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                            Sign in to see videos from your mutual connections
                        </p>
                        <button onclick="showLogin()" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                            Login
                        </button>
                    </div>
                `;
                return;
            }

            try {
                const palsFeed = document.getElementById('palsFeed');
                palsFeed.innerHTML = '<div class="feed-loading">Finding your pals...</div>';

                // Get list of users the current user is following
                const followingQuery = query(
                    collection(db, 'following'),
                    where('followerId', '==', window.currentUser.uid)
                );
                const followingSnapshot = await getDocs(followingQuery);
                
                if (followingSnapshot.empty) {
                    palsFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">🤝</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No pals yet!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Follow people and have them follow you back to become pals!
                            </p>
                            <button onclick="switchFeedTab('foryou')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Discover People
                            </button>
                        </div>
                    `;
                    return;
                }

                // Get array of followed user IDs
                const followedUserIds = [];
                followingSnapshot.forEach(doc => {
                    const data = doc.data();
                    if (data.followingId) {
                        followedUserIds.push(data.followingId);
                    }
                });

                // Now check which of these users also follow the current user back (mutual followers)
                const followersQuery = query(
                    collection(db, 'following'),
                    where('followingId', '==', window.currentUser.uid)
                );
                const followersSnapshot = await getDocs(followersQuery);

                const followerIds = [];
                followersSnapshot.forEach(doc => {
                    const data = doc.data();
                    if (data.followerId) {
                        followerIds.push(data.followerId);
                    }
                });

                // Find mutual connections (people you follow who also follow you)
                const palIds = followedUserIds.filter(userId => followerIds.includes(userId));

                console.log('Following:', followedUserIds);
                console.log('Followers:', followerIds);
                console.log('Pals (mutual):', palIds);

                if (palIds.length === 0) {
                    palsFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">🤝</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No mutual connections!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                You need people to follow you back to become pals!
                            </p>
                            <button onclick="switchFeedTab('following')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                View Following
                            </button>
                        </div>
                    `;
                    return;
                }

                // Get videos from pals (mutual followers)
                const videosQuery = query(
                    collection(db, 'videos'),
                    where('userId', 'in', palIds)
                );
                const videosSnapshot = await getDocs(videosQuery);

                if (videosSnapshot.empty) {
                    palsFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📱</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No pal videos!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Your pals haven't posted any videos yet.
                            </p>
                            <button onclick="switchFeedTab('foryou')" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Browse All Videos
                            </button>
                        </div>
                    `;
                    return;
                }

                // Clear feed and load videos
                palsFeed.innerHTML = '';
                
                const videoPromises = [];
                videosSnapshot.forEach((doc) => {
                    const videoData = doc.data();
                    const videoId = doc.id;
                    videoPromises.push(createVideoItemWithUserData(videoData, videoId));
                });
                
                // Process all videos with proper user data
                const videoItems = await Promise.all(videoPromises);
                videoItems.forEach(videoItem => {
                    if (videoItem) {
                        palsFeed.appendChild(videoItem);
                    }
                });
                
                // Load profile pictures for all users
                await loadAllUsersProfilePics();
                
                console.log(`Loaded ${videoItems.length} videos from ${palIds.length} pals`);
                
            } catch (error) {
                console.error('Error loading pals feed:', error);
                const palsFeed = document.getElementById('palsFeed');
                palsFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">⚠️</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Unable to load pals</h2>
                        <p style="font-size: 16px; margin-bottom: 30px; line-height: 1.5;">
                            There was a problem loading your pals feed.
                        </p>
                        <button onclick="loadPalsFeed()" style="padding: 15px 30px; font-size: 18px; background: #666; color: white; border: none; border-radius: 25px; cursor: pointer;">
                            🔄 Try Again
                        </button>
                    </div>
                `;
            }
        }

        // Load discover feed with trending videos and search functionality
        async function loadDiscoverFeed() {
            try {
                const discoverFeed = document.getElementById('discoverFeed');
                if (!discoverFeed) return;

                discoverFeed.innerHTML = '<div class="feed-loading">Loading trending videos...</div>';

                // Get all videos
                const videosQuery = query(collection(db, 'videos'));
                const videosSnapshot = await getDocs(videosQuery);

                if (videosSnapshot.empty) {
                    discoverFeed.innerHTML = `
                        <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📹</div>
                            <h2 style="margin-bottom: 20px; font-size: 28px;">No videos yet!</h2>
                            <p style="font-size: 18px; margin-bottom: 30px; line-height: 1.5;">
                                Be the first to share something amazing.
                            </p>
                            <button onclick="showUploadModal()" style="padding: 15px 30px; font-size: 18px; background: linear-gradient(45deg, #ff006e, #8338ec); color: white; border: none; border-radius: 25px; cursor: pointer;">
                                Upload First Video
                            </button>
                        </div>
                    `;
                    return;
                }

                // Convert to array and sort by engagement (likes + comments + shares + views)
                const videos = [];
                videosSnapshot.forEach((doc) => {
                    const videoData = doc.data();
                    const engagement = (videoData.likes?.length || 0) + 
                                    (videoData.comments?.length || 0) + 
                                    (videoData.shares || 0) + 
                                    (videoData.views || 0);
                    videos.push({ 
                        id: doc.id, 
                        ...videoData, 
                        engagementScore: engagement 
                    });
                });

                // Sort by engagement score (trending)
                videos.sort((a, b) => b.engagementScore - a.engagementScore);

                // Clear feed
                discoverFeed.innerHTML = '';

                // Add search functionality at the top
                const searchSection = document.createElement('div');
                searchSection.style.cssText = 'position: sticky; top: 0; background: var(--bg-primary); padding: 20px; z-index: 10; border-bottom: 1px solid var(--border-primary);';
                searchSection.innerHTML = `
                    <input type="text" id="discoverSearchInput" placeholder="Search videos, users, or hashtags..." 
                           style="width: 100%; padding: 12px 20px; border: none; border-radius: 25px; background: rgba(255,255,255,0.1); color: white; font-size: 16px; margin-bottom: 15px;"
                           onkeyup="filterDiscoverVideos(this.value)">
                    <div style="display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap;">
                        <button onclick="filterByTag('dance')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#dance</button>
                        <button onclick="filterByTag('funny')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#funny</button>
                        <button onclick="filterByTag('music')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#music</button>
                        <button onclick="filterByTag('trending')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#trending</button>
                        <button onclick="filterByTag('viral')" style="padding: 8px 16px; background: rgba(255,255,255,0.1); color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">#viral</button>
                    </div>
                `;
                discoverFeed.appendChild(searchSection);

                // Add video feed container
                const videoFeedContainer = document.createElement('div');
                videoFeedContainer.id = 'discoverVideoFeed';
                discoverFeed.appendChild(videoFeedContainer);

                // Create video items with trending badges for top 3
                const videoPromises = videos.map((video, index) => 
                    createVideoItemWithUserData(video, video.id, index < 3 ? 'trending' : null)
                );
                
                const videoItems = await Promise.all(videoPromises);
                videoItems.forEach(videoItem => {
                    if (videoItem) {
                        videoItem.classList.add('discover-video-item');
                        videoFeedContainer.appendChild(videoItem);
                    }
                });

                // Load profile pictures
                await loadAllUsersProfilePics();

                console.log(`Loaded ${videos.length} trending videos in discover feed`);

            } catch (error) {
                console.error('Error loading discover feed:', error);
                const discoverFeed = document.getElementById('discoverFeed');
                discoverFeed.innerHTML = `
                    <div style="text-align: center; padding: 80px 20px; color: rgba(255,255,255,0.7);">
                        <div style="font-size: 72px; margin-bottom: 30px;">⚠️</div>
                        <h2 style="margin-bottom: 20px; font-size: 28px;">Unable to load videos</h2>
                        <p style="font-size: 16px; margin-bottom: 30px; line-height: 1.5;">
                            There was a problem loading the discover feed.
                        </p>
                        <button onclick="loadDiscoverFeed()" style="padding: 15px 30px; font-size: 18px; background: #666; color: white; border: none; border-radius: 25px; cursor: pointer;">
                            🔄 Try Again
                        </button>
                    </div>
                `;
            }
        }
        
        // Make sure loadDiscoverFeed is available globally
        window.loadDiscoverFeed = loadDiscoverFeed;

        // Function to show pals feed from bottom navigation
        function showPalsFeed() {
            // Switch to home page and then to pals tab
            showPage('home');
            setTimeout(() => {
                switchFeedTab('pals');
            }, 100);
        }

        // Load all videos for the main feed
        async function loadAllVideosForFeed() {
            try {
                const q = query(collection(db, 'videos'));
                const querySnapshot = await getDocs(q);
                
                const foryouFeed = document.getElementById('foryouFeed');
                
                // Clear existing videos to prevent duplicates
                foryouFeed.innerHTML = '';
                
                if (querySnapshot.empty) {
                    // Show empty state when no videos are found
                    foryouFeed.innerHTML = `
                        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: calc(100vh - 120px); text-align: center; padding: 40px 20px; color: var(--text-secondary);">
                            <div style="font-size: 72px; margin-bottom: 30px;">📱</div>
                            <h2 style="font-size: 24px; margin-bottom: 15px; color: var(--text-primary);">No videos yet!</h2>
                            <p style="font-size: 16px; margin-bottom: 30px; max-width: 300px; line-height: 1.5;">Be the first to share something amazing with the VIB3 community.</p>
                            <button onclick="showUploadModal()" style="padding: 15px 30px; background: var(--accent-primary); color: white; border: none; border-radius: 25px; font-size: 16px; font-weight: bold; cursor: pointer; transition: transform 0.2s ease;">
                                📹 Upload First Video
                            </button>
                        </div>
                    `;
                    return;
                }
                
                if (!querySnapshot.empty) {
                    const foryouFeed = document.getElementById('foryouFeed');
                    
                    // Keep the existing welcome videos and add user videos after
                    const videoPromises = [];
                    querySnapshot.forEach((doc) => {
                        const videoData = doc.data();
                        const videoId = doc.id;
                        videoPromises.push(createVideoItemWithUserData(videoData, videoId));
                    });
                    
                    // Process all videos with proper user data
                    Promise.all(videoPromises).then(async videoItems => {
                        // First, add all videos to the DOM
                        videoItems.forEach(videoItem => {
                            if (videoItem) {
                                foryouFeed.appendChild(videoItem);
                            }
                        });
                        
                        // Then, get unique user IDs and initialize follow buttons for each user
                        const uniqueUserIds = new Set();
                        videoItems.forEach(videoItem => {
                            if (videoItem && window.currentUser) {
                                const userId = videoItem.dataset.userId;
                                if (userId !== window.currentUser.uid) {
                                    uniqueUserIds.add(userId);
                                }
                            }
                        });
                        
                        // Initialize follow buttons for each unique user (this will update ALL their buttons)
                        for (const userId of uniqueUserIds) {
                            await initializeAllFollowButtonsForUser(userId);
                        }
                        
                        // Load profile pictures for all users
                        await loadAllUsersProfilePics();
                    });
                }
            } catch (error) {
                console.error('Error loading feed:', error);
            }
        }

        // Create video item with proper user data
        async function createVideoItemWithUserData(videoData, videoId, badgeType = null) {
            try {
                // Get user data from Firestore
                const userQuery = query(collection(db, 'users'), where('uid', '==', videoData.userId));
                const userSnapshot = await getDocs(userQuery);
                
                let userData = null;
                let username = `@${videoData.userId.substring(0, 8)}...`; // Fallback
                
                if (!userSnapshot.empty) {
                    userData = userSnapshot.docs[0].data();
                    
                    // Determine what name to display
                    let displayName;
                    if (userData.displayName) {
                        // Use displayName from Firestore if available
                        displayName = userData.displayName;
                    } else if (window.currentUser && videoData.userId === window.currentUser.uid) {
                        // For current user, check Firebase Auth displayName
                        displayName = window.currentUser.displayName || userData.username || 'You';
                        console.log('Current user video - using displayName:', displayName, 'from auth:', window.currentUser.displayName);
                    } else {
                        // For other users without displayName, show username with @ prefix
                        displayName = `@${userData.username}`;
                        console.log('Other user video - showing username with @:', displayName);
                    }
                    
                    username = displayName;
                    console.log('User', videoData.userId, '- displayName:', userData.displayName, 'username:', userData.username, 'showing:', displayName);
                } else {
                    console.log('No user data found for', videoData.userId);
                    username = 'Unknown User';
                }
                
                const videoItem = document.createElement('div');
                        videoItem.className = 'video-item';
                videoItem.setAttribute('data-video-id', videoId);
                videoItem.dataset.userId = videoData.userId;
                
                videoItem.innerHTML = `
                    <div class="video-container" onclick="toggleVideoPlayback(this)">
                        <video class="video-element" loop playsinline preload="metadata" src="${videoData.videoUrl}" onloadedmetadata="handleVideoMetadata(this)"></video>
                        <div class="video-info">
                            <div class="username">${username}</div>
                            <div class="description">${videoData.description || 'No description'}</div>
                        </div>
                        <div class="side-actions">
                            <div>
                                <button class="action-btn" onclick="event.stopPropagation(); openUserProfile('${videoData.userId}', '${username}')" style="overflow: hidden; position: relative;" data-user-id="${videoData.userId}" aria-label="User profile">
                                    ${userData?.avatarPicture || userData?.profilePicture ? `<div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-image: url('${userData.avatarPicture || userData.profilePicture}'); background-size: cover; background-position: center;"></div>` : ''}
                                    <span style="${userData?.avatarPicture || userData?.profilePicture ? 'position: relative; z-index: 1; display: none;' : 'font-size: 18px;'}">${(userData?.displayName || userData?.username || username)?.charAt(0)?.toUpperCase() || '👤'}</span>
                                    ${window.currentUser && videoData.userId !== window.currentUser.uid ? `<div id="followBtn_${videoData.userId}" onclick="event.stopPropagation(); toggleFollowButton('${videoData.userId}', this)" style="position: absolute; bottom: -5px; right: -5px; width: 16px; height: 16px; border-radius: 50%; background: #ff006e; border: 1px solid white; color: white; font-size: 10px; cursor: pointer; display: flex; align-items: center; justify-content: center;">+</div>` : ''}
                                </button>
                            </div>
                            <div>
                                <button class="action-btn like-btn ${videoData.likes && videoData.likes.includes(window.currentUser?.uid) ? 'liked' : ''}" onclick="event.stopPropagation(); showReactions(this)" aria-label="React to video">
                                    <span style="font-size: 28px;">${videoData.reactions && window.currentUser && videoData.reactions[window.currentUser.uid] ? videoData.reactions[window.currentUser.uid] : '❤️'}</span>
                                    <div class="action-count" onclick="event.stopPropagation(); showWhoLiked(this)" style="cursor: pointer; font-size: 14px;">${videoData.likes ? videoData.likes.length : 0}</div>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn" onclick="event.stopPropagation(); showComments('${videoId}')" aria-label="View comments">
                                    <span style="font-size: 28px; position: relative; display: inline-block;">
                                        <svg width="28" height="28" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
                                        </svg>
                                    </span>
                                    <div class="action-count" style="font-size: 14px;">${videoData.comments ? videoData.comments.length : 0}</div>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn" onclick="event.stopPropagation(); shareVideoById('${videoId}')" aria-label="Share video">
                                    <span style="font-size: 28px;">📤</span>
                                    <div class="action-count" style="font-size: 14px;">${videoData.shares || 0}</div>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn ${videoData.saves && videoData.saves.includes(window.currentUser?.uid) ? 'liked' : ''}" onclick="event.stopPropagation(); saveToCollection(this)" aria-label="Save to collection">
                                    <span style="font-size: 28px;">💾</span>
                                    <div class="action-count" style="font-size: 14px;">${videoData.saves ? videoData.saves.length : 0}</div>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn mute-btn unmuted" onclick="event.stopPropagation(); toggleMute(this)" aria-label="Toggle mute">
                                    <span style="font-size: 28px;">🔊</span>
                                    <div class="action-count" style="font-size: 14px;">SOUND</div>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn" onclick="event.stopPropagation(); showUploadModal()" aria-label="Upload video">
                                    <span style="font-size: 32px;">+</span>
                                </button>
                            </div>
                            <div>
                                <button class="action-btn" onclick="event.stopPropagation(); showMoreOptions(this)" aria-label="More options">
                                    <div style="font-size: 12px; font-weight: bold;">REPORT</div>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                const video = videoItem.querySelector('video');
                        
                        // Set up video for autoplay and audio
                        video.muted = false; // Default to unmuted
                        video.volume = 0.8; // Set reasonable volume level
                        
                        
                        // Handle autoplay restrictions
                        const playVideo = async (videoElement) => {
                            // Always set to unmuted unless manually muted by user
                            if (!videoElement.hasAttribute('data-manually-muted')) {
                                videoElement.muted = false;
                                videoElement.volume = 0.8;
                                
                                // Update mute button to show unmuted state
                                const muteBtn = videoElement.closest('.video-item').querySelector('.mute-btn');
                                if (muteBtn) {
                                    muteBtn.classList.add('unmuted');
                                    muteBtn.textContent = '🔊';
                                    muteBtn.style.background = 'rgba(0,0,0,0.9)';
                                }
                            }
                            
                            try {
                                videoElement.currentTime = 0; // Reset video to beginning
                                await videoElement.play();
                                console.log('Video playing with sound');
                                
                                // Mark that user interaction has occurred, enabling autoplay for future videos
                                window.userHasInteracted = true;
                                localStorage.setItem('vib3_user_interacted', 'true');
                                
                            } catch (error) {
                                // If user has interacted before, be more persistent about unmuted playback
                                if (window.userHasInteracted) {
                                    console.log('User has interacted before - forcing unmuted playback');
                                    try {
                                        // Force unmuted playback since user has interacted
                                        videoElement.muted = false;
                                        await videoElement.play();
                                        console.log('Successfully playing unmuted after user interaction');
                                    } catch (unmutedError) {
                                        console.log('Still blocked - falling back to muted');
                                        videoElement.muted = true;
                                        await videoElement.play().catch(() => {});
                                    }
                                } else {
                                    console.log('Autoplay with sound blocked, trying muted autoplay');
                                    // Try muted autoplay as fallback for first-time users
                                    try {
                                        videoElement.muted = true;
                                        await videoElement.play();
                                        console.log('Video playing muted - waiting for user interaction');
                                        
                                    } catch (mutedError) {
                                        console.log('All autoplay blocked, video will play when user interacts');
                                    }
                                }
                            }
                        };
                        
                        // Add intersection observer for video autoplay
                        const videoObserver = new IntersectionObserver((entries) => {
                            entries.forEach(entry => {
                                const videoElement = entry.target;
                                if (entry.isIntersecting && entry.intersectionRatio > 0.3) {
                                    // Pause any other currently playing videos
                                    document.querySelectorAll('.video-element').forEach(otherVideo => {
                                        if (otherVideo !== videoElement && !otherVideo.paused) {
                                            otherVideo.pause();
                                        }
                                    });
                                    
                                    // Check if this is the first video after login
                                    if (window.enableAudioAfterLogin) {
                                        // Force audio enabled for first video after login
                                        videoElement.muted = false;
                                        videoElement.volume = 0.8;
                                        // Update mute button to show unmuted state
                                        const muteBtn = videoElement.closest('.video-item').querySelector('.mute-btn');
                                        if (muteBtn) {
                                            muteBtn.classList.add('unmuted');
                                            muteBtn.textContent = '🔊';
                                            muteBtn.style.background = 'rgba(0,0,0,0.9)';
                                        }
                                        window.enableAudioAfterLogin = false; // Reset flag
                                    }
                                    
                                    // If we should try unmuting on next video, attempt it
                                    if (window.tryUnmuteNext && !videoElement.hasAttribute('data-manually-muted')) {
                                        console.log('Attempting to unmute video on scroll');
                                        videoElement.muted = false;
                                        videoElement.volume = 0.8;
                                        
                                        // Update mute button to show unmuted state
                                        const muteBtn = videoElement.closest('.video-item').querySelector('.mute-btn');
                                        if (muteBtn) {
                                            muteBtn.classList.add('unmuted');
                                            muteBtn.textContent = '🔊';
                                            muteBtn.style.background = 'rgba(0,0,0,0.9)';
                                        }
                                        
                                        // Clear the flag after first attempt
                                        window.tryUnmuteNext = false;
                                    }
                                    
                                    // Video is mostly visible, play it
                                    playVideo(videoElement);
                                } else {
                                    // Video is out of view, pause it
                                    videoElement.pause();
                                }
                            });
                        }, {
                            threshold: 0.3 // Play when 30% visible (more sensitive)
                        });
                        
                        videoObserver.observe(video);
                        
                        // Try to autoplay the first video immediately if it's the first in view
                        setTimeout(() => {
                            const rect = video.getBoundingClientRect();
                            const isInViewport = rect.top >= 0 && rect.top < window.innerHeight * 0.7;
                            if (isInViewport && video.paused) {
                                console.log('Attempting autoplay for first visible video');
                                playVideo(video);
                            }
                        }, 500); // Small delay to ensure everything is loaded
                        
                        video.addEventListener('error', () => {
                            video.style.display = 'none';
                            const container = video.closest('.video-container');
                            const fallback = document.createElement('div');
                            fallback.style.cssText = `width: 100%; height: 100%; background: linear-gradient(135deg, #ff006e, #8338ec); display: flex; align-items: center; justify-content: center; flex-direction: column;`;
                            fallback.innerHTML = `
                                <div style="font-size: 60px; margin-bottom: 20px;">📱</div>
                                <h3 style="color: white; font-size: 20px; margin-bottom: 10px;">User Content</h3>
                                <p style="color: rgba(255,255,255,0.8); text-align: center; padding: 0 40px;">Video temporarily unavailable</p>
                            `;
                            container.appendChild(fallback);
                        });
                        
                        return videoItem;
                        
                    } catch (error) {
                        console.error('Error creating video item:', error);
                        return null;
                    }
                }

        // Upload video function
        async function uploadVideo() {
            if (!window.currentUser || !window.selectedVideoFile) {
                showToast('Please select a video and sign in');
                return;
            }

            const title = document.getElementById('videoTitle').value.trim();
            const description = document.getElementById('videoDescription').value.trim();

            if (!title && !description) {
                showToast('Please enter a title or description');
                return;
            }

            document.getElementById('uploadStep2').style.display = 'none';
            document.getElementById('uploadStep3').style.display = 'block';

            try {
                const storageRef = ref(window.storage, `videos/${window.currentUser.uid}_${Date.now()}.mp4`);
                const uploadTask = uploadBytesResumable(storageRef, window.selectedVideoFile);

                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        document.getElementById('uploadStatus').textContent = `${Math.round(progress)}% complete`;
                    },
                    (error) => {
                        console.error('Upload error:', error);
                        showToast('Failed to upload video');
                        closeUploadModal();
                    },
                    async () => {
                        const videoUrl = await getDownloadURL(uploadTask.snapshot.ref);
                        await addDoc(collection(window.db, 'videos'), {
                            userId: window.currentUser.uid,
                            title: title,
                            description: description,
                            videoUrl,
                            likes: [],
                            comments: [],
                            shares: 0,
                            views: 0,
                            createdAt: new Date()
                        });
                        showToast('Video uploaded successfully!');
                        closeUploadModal();
                        
                        if (document.getElementById('profilePage').style.display === 'block') {
                            loadUserVideos(window.currentUser.uid);
                        }
                        loadAllVideosForFeed();
                    }
                );
            } catch (error) {
                console.error('Upload error:', error);
                showToast('Failed to upload video');
                closeUploadModal();
            }
        }

        // Delete video function
        async function confirmDeleteVideo() {
            if (!window.currentVideoId) return;
            
            try {
                const videoDoc = await getDoc(doc(window.db, 'videos', window.currentVideoId));
                if (videoDoc.exists()) {
                    const videoData = videoDoc.data();
                    
                    // Delete from storage
                    if (videoData.videoUrl) {
                        try {
                            const videoRef = ref(window.storage, videoData.videoUrl);
                            await deleteObject(videoRef);
                        } catch (storageError) {
                            console.error('Storage deletion error:', storageError);
                        }
                    }
                    
                    // Delete from Firestore
                    await window.deleteDoc(window.doc(window.db, 'videos', window.currentVideoId));
                }
                
                showToast('Video deleted successfully');
                closeDeleteModal();
                
                if (document.getElementById('profilePage').style.display === 'block' && window.currentUser) {
                    loadUserVideos(window.currentUser.uid);
                }
            } catch (error) {
                console.error('Delete error:', error);
                showToast('Failed to delete video');
            }
        }

        // Video player functions
        function playVideoFullScreen(videoUrl, title, description, videoIndex = 0, allVideos = []) {
            // Store current video data globally for navigation
            window.currentVideoIndex = videoIndex;
            window.currentVideoPlaylist = allVideos;
            
            // Create a responsive fullscreen video player with scroll support
            const modal = document.createElement('div');
            modal.className = 'video-player-modal';
            modal.style.cssText = `
                position: fixed; 
                top: 0; 
                left: 0; 
                width: 100%; 
                height: 100%; 
                background: rgba(0,0,0,0.95); 
                z-index: 9999; 
                display: flex; 
                align-items: center; 
                justify-content: center;
                padding: 20px;
                box-sizing: border-box;
            `;
            
            const hasMultipleVideos = allVideos.length > 1;
            const currentVideo = allVideos[videoIndex] || { url: videoUrl, title: title, description: description };
            
            modal.innerHTML = `
                <div style="position: relative; width: 100%; max-width: 500px; max-height: 90vh; display: flex; flex-direction: column;">
                    <!-- Close button - top right -->
                    <button onclick="closeVideoPlayer()" style="
                        position: absolute; 
                        top: -15px; 
                        right: -15px; 
                        width: 40px; 
                        height: 40px; 
                        background: rgba(0,0,0,0.8); 
                        border: 2px solid white; 
                        border-radius: 50%; 
                        color: white; 
                        font-size: 20px; 
                        cursor: pointer; 
                        display: flex; 
                        align-items: center; 
                        justify-content: center;
                        z-index: 10000;
                    ">×</button>
                    
                    ${hasMultipleVideos ? `
                    <!-- Video counter -->
                    <div style="position: absolute; top: -15px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,0.8); color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; border: 1px solid rgba(255,255,255,0.3);">
                        ${videoIndex + 1} of ${allVideos.length}
                    </div>
                    ` : ''}
                    
                    ${hasMultipleVideos ? `
                    <!-- Previous button (up) -->
                    <button onclick="previousVideo()" style="
                        position: absolute; 
                        top: -15px; 
                        left: 20px; 
                        width: 40px; 
                        height: 40px; 
                        background: rgba(0,0,0,0.8); 
                        border: 2px solid white; 
                        border-radius: 50%; 
                        color: white; 
                        font-size: 18px; 
                        cursor: pointer; 
                        display: ${videoIndex > 0 ? 'flex' : 'none'}; 
                        align-items: center; 
                        justify-content: center;
                        z-index: 10000;
                    ">↑</button>
                    
                    <!-- Next button (down) -->
                    <button onclick="nextVideo()" style="
                        position: absolute; 
                        bottom: -15px; 
                        left: 20px; 
                        width: 40px; 
                        height: 40px; 
                        background: rgba(0,0,0,0.8); 
                        border: 2px solid white; 
                        border-radius: 50%; 
                        color: white; 
                        font-size: 18px; 
                        cursor: pointer; 
                        display: ${videoIndex < allVideos.length - 1 ? 'flex' : 'none'}; 
                        align-items: center; 
                        justify-content: center;
                        z-index: 10000;
                    ">↓</button>
                    ` : ''}
                    
                    <!-- Video container with vertical swipe support -->
                    <div id="videoContainer" style="position: relative; width: 100%; aspect-ratio: 9/16; max-height: 70vh; overflow: hidden; border-radius: 15px; background: #000; touch-action: pan-x;">
                        <video 
                            id="currentVideo"
                            src="${currentVideo.url || videoUrl}" 
                            controls 
                            autoplay 
                            playsinline
                            style="
                                width: 100%; 
                                height: 100%; 
                                object-fit: contain; 
                                border-radius: 15px;
                            "
                            onended="${hasMultipleVideos ? 'nextVideo()' : 'closeVideoPlayer()'}"
                        ></video>
                    </div>
                    
                    <!-- Video info -->
                    <div id="videoInfo" style="color: white; margin-top: 15px; text-align: center;">
                        <h3 style="margin: 0; font-size: 18px; margin-bottom: 8px;">${currentVideo.title || title || 'Your Video'}</h3>
                        ${(currentVideo.description || description) ? `<p style="color: #ccc; margin: 0; font-size: 14px; line-height: 1.4;">${currentVideo.description || description}</p>` : ''}
                    </div>
                    
                    <!-- Navigation hint -->
                    <div style="color: rgba(255,255,255,0.6); text-align: center; margin-top: 15px; font-size: 12px;">
                        ${hasMultipleVideos ? 'Swipe up/down, scroll wheel, or use ↑↓ to browse • Tap × to close' : 'Tap outside or press × to close'}
                    </div>
                </div>
            `;
            
            // Close on background click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeVideoPlayer();
                }
            });
            
            // Close on Escape key, navigate with arrow keys (vertical)
            const handleKeyboard = (e) => {
                switch(e.key) {
                    case 'Escape':
                        closeVideoPlayer();
                        break;
                    case 'ArrowUp':
                        if (hasMultipleVideos && window.currentVideoIndex > 0) {
                            previousVideo();
                        }
                        e.preventDefault(); // Prevent page scroll
                        break;
                    case 'ArrowDown':
                        if (hasMultipleVideos && window.currentVideoIndex < window.currentVideoPlaylist.length - 1) {
                            nextVideo();
                        }
                        e.preventDefault(); // Prevent page scroll
                        break;
                }
            };
            document.addEventListener('keydown', handleKeyboard);

            // Add mouse wheel scrolling support
            const handleMouseWheel = (e) => {
                if (!hasMultipleVideos) return;
                
                e.preventDefault(); // Prevent page scroll
                
                // Normalize wheel delta across browsers
                const delta = e.deltaY || e.detail || e.wheelDelta;
                
                // Add delay to prevent rapid scrolling (TikTok-style)
                if (window.wheelScrolling) return;
                window.wheelScrolling = true;
                
                setTimeout(() => {
                    window.wheelScrolling = false;
                }, 800); // 800ms delay between wheel scrolls for smooth TikTok-like experience
                
                if (delta > 0) {
                    // Scroll down - next video
                    if (window.currentVideoIndex < window.currentVideoPlaylist.length - 1) {
                        nextVideo();
                    }
                } else if (delta < 0) {
                    // Scroll up - previous video
                    if (window.currentVideoIndex > 0) {
                        previousVideo();
                    }
                }
            };
            
            // Add wheel event listeners to modal and video container
            modal.addEventListener('wheel', handleMouseWheel, { passive: false });
            modal.addEventListener('DOMMouseScroll', handleMouseWheel, { passive: false }); // Firefox
            
            // Add vertical swipe support for mobile (TikTok-style)
            if (hasMultipleVideos) {
                let startX = 0;
                let startY = 0;
                
                const videoContainer = modal.querySelector('#videoContainer');
                
                videoContainer.addEventListener('touchstart', (e) => {
                    startX = e.touches[0].clientX;
                    startY = e.touches[0].clientY;
                });
                
                videoContainer.addEventListener('touchend', (e) => {
                    if (!startX || !startY) return;
                    
                    // Prevent rapid swiping like TikTok
                    if (window.touchScrolling) return;
                    
                    const endX = e.changedTouches[0].clientX;
                    const endY = e.changedTouches[0].clientY;
                    
                    const diffX = startX - endX;
                    const diffY = startY - endY;
                    
                    // Only trigger if vertical swipe is dominant (TikTok-style)
                    if (Math.abs(diffY) > Math.abs(diffX) && Math.abs(diffY) > 80) { // Increased threshold for more deliberate swipes
                        window.touchScrolling = true;
                        
                        setTimeout(() => {
                            window.touchScrolling = false;
                        }, 600); // 600ms delay for touch scrolling
                        
                        if (diffY > 0 && window.currentVideoIndex < window.currentVideoPlaylist.length - 1) {
                            // Swipe up - next video (down the list)
                            nextVideo();
                        } else if (diffY < 0 && window.currentVideoIndex > 0) {
                            // Swipe down - previous video (up the list)
                            previousVideo();
                        }
                    }
                    
                    startX = 0;
                    startY = 0;
                });
            }
            
            document.body.appendChild(modal);
            
            // Store modal reference and cleanup function
            window.currentVideoModal = modal;
            window.videoPlayerCleanup = () => {
                document.removeEventListener('keydown', handleKeyboard);
                modal.removeEventListener('wheel', handleMouseWheel);
                modal.removeEventListener('DOMMouseScroll', handleMouseWheel);
                window.wheelScrolling = false;
                window.touchScrolling = false;
            };
        }
        
        function closeVideoPlayer() {
            const modal = document.querySelector('.video-player-modal') || window.currentVideoModal;
            if (modal) {
                // Stop video playback
                const video = modal.querySelector('video');
                if (video) {
                    video.pause();
                    video.currentTime = 0;
                }
                
                // Clean up event listeners
                if (window.videoPlayerCleanup) {
                    window.videoPlayerCleanup();
                    window.videoPlayerCleanup = null;
                }
                
                // Remove modal
                modal.remove();
                window.currentVideoModal = null;
                window.currentVideoIndex = 0;
                window.currentVideoPlaylist = [];
                window.wheelScrolling = false;
                window.touchScrolling = false;
            }
        }
        
        function nextVideo() {
            if (window.currentVideoPlaylist && window.currentVideoIndex < window.currentVideoPlaylist.length - 1) {
                window.currentVideoIndex++;
                updateCurrentVideo();
            }
        }
        
        function previousVideo() {
            if (window.currentVideoPlaylist && window.currentVideoIndex > 0) {
                window.currentVideoIndex--;
                updateCurrentVideo();
            }
        }
        
        function updateCurrentVideo() {
            const currentVideo = window.currentVideoPlaylist[window.currentVideoIndex];
            if (!currentVideo) return;
            
            const modal = document.querySelector('.video-player-modal');
            if (!modal) return;
            
            const videoContainer = modal.querySelector('#videoContainer');
            const video = modal.querySelector('#currentVideo');
            const videoInfo = modal.querySelector('#videoInfo');
            
            if (!video || !videoContainer) return;
            
            // Add smooth transition effect
            videoContainer.style.transition = 'transform 0.3s ease-out, opacity 0.3s ease-out';
            videoInfo.style.transition = 'opacity 0.3s ease-out';
            
            // Fade out current content with subtle loading indicator
            videoContainer.style.opacity = '0.3';
            videoContainer.style.transform = 'scale(0.95)';
            videoInfo.style.opacity = '0';
            
            // Add subtle loading indicator
            const loadingOverlay = document.createElement('div');
            loadingOverlay.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                color: rgba(255,255,255,0.7);
                font-size: 14px;
                z-index: 10001;
                opacity: 0;
                transition: opacity 0.2s ease;
            `;
            loadingOverlay.textContent = '•••';
            videoContainer.appendChild(loadingOverlay);
            
            // Show loading indicator after a brief moment
            setTimeout(() => {
                if (loadingOverlay.parentNode) {
                    loadingOverlay.style.opacity = '1';
                }
            }, 200);
            
            // Pause current video
            video.pause();
            
            setTimeout(() => {
                // Update video source
                video.src = currentVideo.url;
                video.load();
                
                // Update video info
                videoInfo.innerHTML = `
                    <h3 style="margin: 0; font-size: 18px; margin-bottom: 8px;">${currentVideo.title || 'Your Video'}</h3>
                    ${currentVideo.description ? `<p style="color: #ccc; margin: 0; font-size: 14px; line-height: 1.4;">${currentVideo.description}</p>` : ''}
                `;
                
                // Update counter
                const counter = modal.querySelector('div[style*="top: -15px"][style*="left: 50%"]');
                if (counter) {
                    counter.textContent = `${window.currentVideoIndex + 1} of ${window.currentVideoPlaylist.length}`;
                }
                
                // Update navigation buttons (vertical)
                const prevBtn = modal.querySelector('button[onclick="previousVideo()"]'); // Up button
                const nextBtn = modal.querySelector('button[onclick="nextVideo()"]'); // Down button
                
                if (prevBtn) {
                    prevBtn.style.display = window.currentVideoIndex > 0 ? 'flex' : 'none';
                }
                if (nextBtn) {
                    nextBtn.style.display = window.currentVideoIndex < window.currentVideoPlaylist.length - 1 ? 'flex' : 'none';
                }
                
                // Wait for video to start loading
                video.addEventListener('loadstart', () => {
                    // Remove loading indicator
                    const overlay = videoContainer.querySelector('div[style*="•••"]');
                    if (overlay) overlay.remove();
                    
                    // Fade in new content
                    videoContainer.style.opacity = '1';
                    videoContainer.style.transform = 'scale(1)';
                    videoInfo.style.opacity = '1';
                    
                    // Play new video
                    video.play().catch(() => {});
                }, { once: true });
                
                // If video fails to load, still show the fade in
                setTimeout(() => {
                    const overlay = videoContainer.querySelector('div[style*="•••"]');
                    if (overlay) overlay.remove();
                    
                    videoContainer.style.opacity = '1';
                    videoContainer.style.transform = 'scale(1)';
                    videoInfo.style.opacity = '1';
                }, 500);
                
            }, 150); // Short delay for smooth transition
        }

        function closeVideoViewer() {
            const modal = document.querySelector('[onclick*="closeVideoViewer"]').closest('.modal');
            if (modal) modal.remove();
        }

        // Load user following
        function loadUserFollowing() {
            // Placeholder for following functionality
            if (window.currentUser) {
                const savedFollowing = localStorage.getItem(`following_${window.currentUser.uid}`);
                if (savedFollowing) {
                    try {
                        const followingList = JSON.parse(savedFollowing);
                        followedUsers.clear();
                        followingList.forEach(userId => followedUsers.add(userId));
                    } catch (error) {
                        console.error('Error loading following:', error);
                    }
                }
            }
        }

        // Global functions for the app
        window.showMainApp = showMainApp;
        window.showAuthScreen = showAuthScreen;
        window.loadUserVideos = loadUserVideos;
        window.loadAllVideosForFeed = loadAllVideosForFeed;
        window.loadFollowingFeed = loadFollowingFeed;
        window.loadSearchFeed = loadSearchFeed;
        window.loadPalsFeed = loadPalsFeed;
        window.showPalsFeed = showPalsFeed;
        window.filterDiscoverVideos = filterDiscoverVideos;
        window.filterByTag = filterByTag;
        window.uploadVideo = uploadVideo;
        window.confirmDeleteVideo = confirmDeleteVideo;
        window.playVideoFullScreen = playVideoFullScreen;
        window.closeVideoPlayer = closeVideoPlayer;
        window.nextVideo = nextVideo;
        window.previousVideo = previousVideo;
        window.updateCurrentVideo = updateCurrentVideo;
        window.closeVideoViewer = closeVideoViewer;
        window.loadUserFollowing = loadUserFollowing;
        window.getDoc = getDoc;
        window.collection = collection;
        window.query = query;
        window.where = where;
        window.getDocs = getDocs;
        window.addDoc = addDoc;
        window.ref = ref;
        window.uploadBytesResumable = uploadBytesResumable;
        window.getDownloadURL = getDownloadURL;
    </script>

    <script>
        // Global variables
        let userSettings = {
            privateAccount: false,
            allowComments: true,
            allowDownloads: false,
            pushNotifications: true,
            emailNotifications: false,
            darkMode: true
        };

        let isLoadingMore = false;
        let feedOffset = 0;
        const VIDEOS_PER_LOAD = 5;
        let followedUsers = new Set();
        let currentProfileUser = '';

        // Authentication functions
        function showError(message) {
            document.getElementById('authError').textContent = message;
        }

        function showLoading(show) {
            document.getElementById('authLoading').style.display = show ? 'block' : 'none';
        }

        function showLogin() {
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('signupForm').style.display = 'none';
            clearError();
        }

        function showSignup() {
            document.getElementById('loginForm').style.display = 'none';
            document.getElementById('signupForm').style.display = 'block';
            clearError();
        }

        function clearError() {
            document.getElementById('authError').textContent = '';
        }

        async function login() {
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;

            if (!email || !password) {
                showError('Please fill in all fields');
                return;
            }


            showLoading(true);
            clearError();

            try {
                // Set flag to indicate this is a manual login
                window.userJustLoggedIn = true;
                await window.signInWithEmailAndPassword(window.auth, email, password);
            } catch (error) {
                console.error('Login error:', error);
                showError(getErrorMessage(error.code || error.message));
            } finally {
                showLoading(false);
            }
        }

        async function signup() {
            const name = document.getElementById('signupName').value.trim();
            const email = document.getElementById('signupEmail').value.trim();
            const password = document.getElementById('signupPassword').value;

            if (!name || !email || !password) {
                showError('Please fill in all fields');
                return;
            }

            if (password.length < 6) {
                showError('Password must be at least 6 characters');
                return;
            }


            showLoading(true);
            clearError();

            try {
                // Set flag to indicate this is a manual signup
                window.userJustLoggedIn = true;
                const userCredential = await window.createUserWithEmailAndPassword(window.auth, email, password);
                await window.updateProfile(userCredential.user, { displayName: name });
            } catch (error) {
                console.error('Signup error:', error);
                showError(getErrorMessage(error.code || error.message));
            } finally {
                showLoading(false);
            }
        }

        async function logout() {
            try {
                await window.signOut(window.auth);
            } catch (error) {
                showError('Failed to sign out');
            }
        }

        function getErrorMessage(errorCode) {
            switch (errorCode) {
                case 'auth/user-not-found':
                    return 'No account found with this email';
                case 'auth/wrong-password':
                    return 'Incorrect password';
                case 'auth/email-already-in-use':
                    return 'Email is already registered';
                case 'auth/weak-password':
                    return 'Password is too weak';
                case 'auth/invalid-email':
                    return 'Invalid email address';
                case 'auth/network-request-failed':
                    return 'Network error. Check your connection.';
                default:
                    return 'An error occurred: ' + errorCode;
            }
        }

        // Navigation functions
        function showPage(page) {
            // Handle TikTok-style navigation
            if (page === 'explore') {
                // Switch to discover tab
                switchFeedTab('discover');
                return;
            }
            
            if (page === 'live') {
                showToast('Live streaming coming soon! 🎥');
                return;
            }
            
            const pages = ['videoFeed', 'searchPage', 'messagesPage', 'profilePage', 'settingsPage'];
            pages.forEach(p => {
                const element = document.getElementById(p);
                if (element) {
                    element.style.display = p === (page === 'home' ? 'videoFeed' : page + 'Page') ? 'block' : 'none';
                }
            });
            
            // Update sidebar active state
            document.querySelectorAll('.sidebar-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Update sidebar active state
            const sidebarMap = {
                'home': 'sidebarHome',
                'explore': 'sidebarExplore',
                'live': 'sidebarLive',
                'profile': 'sidebarProfile'
            };
            
            const sidebarButton = document.getElementById(sidebarMap[page]);
            if (sidebarButton) {
                sidebarButton.classList.add('active');
            }
            
            if (page === 'profile' && window.currentUser) {
                loadUserVideos(window.currentUser.uid);
            }
        }

        function switchFeedTab(tab) {
            isLoadingMore = false;
            feedOffset = 0;
            
            // Ensure video feed page is visible
            showPage('home');
            
            // Update sidebar active state for feed tabs
            document.querySelectorAll('.sidebar-item').forEach(item => {
                item.classList.remove('active');
            });
            
            if (tab === 'foryou') {
                document.getElementById('sidebarHome').classList.add('active');
            } else if (tab === 'following') {
                document.getElementById('sidebarFollowing').classList.add('active');
            } else if (tab === 'discover' || tab === 'explore') {
                document.getElementById('sidebarExplore').classList.add('active');
            }
            
            document.querySelectorAll('.feed-loading').forEach(el => el.remove());
            document.querySelectorAll('.feed-tab').forEach(t => t.classList.remove('active'));
            
            // Normalize tab names for element IDs
            const feedName = tab === 'explore' ? 'discover' : tab;
            const tabElement = document.getElementById(`${feedName}Tab`);
            if (tabElement) tabElement.classList.add('active');
            
            document.querySelectorAll('.feed-content').forEach(c => c.classList.remove('active'));
            const feedElement = document.getElementById(`${feedName}Feed`);
            if (feedElement) feedElement.classList.add('active');
            
            document.querySelectorAll('video').forEach(video => {
                video.pause();
            });
            
            // Load content for the selected tab
            if (tab === 'foryou') {
                // Always load For You videos when switching to this tab
                loadAllVideosForFeed();
            } else if (tab === 'following') {
                loadFollowingFeed();
            } else if (tab === 'discover' || tab === 'explore') {
                loadDiscoverFeed();
            }
            
            setTimeout(() => {
                const activeVideos = document.querySelectorAll(`#${feedName}Feed video`);
                activeVideos.forEach((video, index) => {
                    video.muted = false;
                    video.volume = 0.8;
                    if (index === 0) {
                        video.play().catch(() => {
                            // Fallback to muted if browser requires it
                            video.muted = true;
                            video.play().catch(() => {});
                        });
                    } else {
                        video.preload = 'metadata';
                    }
                });
            }, 100);
        }

        // Modal functions
        function showUploadModal() { 
            document.getElementById('uploadModal').classList.add('active'); 
        }

        function closeUploadModal() {
            document.getElementById('uploadModal').classList.remove('active');
            document.getElementById('uploadStep1').style.display = 'block';
            document.getElementById('uploadStep2').style.display = 'none';
            document.getElementById('uploadStep3').style.display = 'none';
            document.getElementById('videoPreview').src = '';
            document.getElementById('videoTitle').value = '';
            document.getElementById('videoDescription').value = '';
            window.selectedVideoFile = null;
        }

        // Show comments with real data
        async function showComments(videoId) {
            if (!videoId) {
                // Fallback for static content
                document.getElementById('commentsModal').classList.add('active');
                return;
            }

            // Handle demo videos
            if (videoId.startsWith('welcome-') || videoId.includes('demo')) {
                const modal = document.createElement('div');
                modal.className = 'modal active';
                modal.innerHTML = `
                    <div class="modal-content">
                        <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                        <h3>Comments</h3>
                        <div style="margin: 20px 0; max-height: 300px; overflow-y: auto;">
                            <div style="margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #333;">
                                <strong>@vib3_official</strong>
                                <p style="margin-top: 5px;">Welcome to VIB3! 🎉 Thanks for joining our community!</p>
                                <small style="color: #888;">2 days ago</small>
                            </div>
                            <div style="margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #333;">
                                <strong>@demo_user</strong>
                                <p style="margin-top: 5px;">This app is amazing! Can't wait to share my videos 📱</p>
                                <small style="color: #888;">1 day ago</small>
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px; margin-top: 20px;">
                            <input type="text" id="commentInput-${videoId}" placeholder="Add a comment..." style="flex: 1; padding: 10px; border: none; border-radius: 20px; background: #333; color: white;" onkeypress="if(event.key==='Enter') addComment('${videoId}')">
                            <button onclick="addComment('${videoId}')" style="padding: 10px 20px; background: #ff006e; color: white; border: none; border-radius: 20px; cursor: pointer;">Post</button>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                return;
            }

            try {
                const videoDoc = await window.getDoc(doc(window.db, 'videos', videoId));
                if (!videoDoc.exists()) return;
                
                const comments = videoDoc.data().comments || [];
                
                // Get display names for all commenters
                const commentsWithUserData = await Promise.all(comments.map(async (comment) => {
                    try {
                        const userQuery = query(collection(db, 'users'), where('uid', '==', comment.userId));
                        const userSnapshot = await getDocs(userQuery);
                        
                        let displayName;
                        if (!userSnapshot.empty) {
                            const userData = userSnapshot.docs[0].data();
                            if (userData.displayName) {
                                displayName = userData.displayName;
                            } else if (window.currentUser && comment.userId === window.currentUser.uid) {
                                displayName = window.currentUser.displayName || userData.username || 'You';
                            } else {
                                displayName = `@${userData.username}`;
                            }
                        } else {
                            displayName = `@${comment.userId.substring(0, 12)}...`;
                        }
                        
                        return { ...comment, displayName };
                    } catch (error) {
                        console.error('Error getting user data for comment:', error);
                        return { ...comment, displayName: `@${comment.userId.substring(0, 12)}...` };
                    }
                }));
                
                const modal = document.createElement('div');
                modal.className = 'modal active';
                modal.innerHTML = `
                    <div class="modal-content">
                        <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                        <h3>Comments</h3>
                        <div style="margin: 20px 0; max-height: 300px; overflow-y: auto;">
                            ${commentsWithUserData.length === 0 ? '<p style="color: #888; text-align: center;">No comments yet. Be the first!</p>' :
                              commentsWithUserData.map(comment => `
                                <div style="margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #333;">
                                    <strong>${comment.displayName}</strong>
                                    <p style="margin-top: 5px;">${comment.text}</p>
                                    <small style="color: #888;">${new Date(comment.createdAt.seconds * 1000).toLocaleDateString()}</small>
                                </div>
                              `).join('')}
                        </div>
                        <div style="display: flex; gap: 10px; margin-top: 20px;">
                            <input type="text" id="commentInput-${videoId}" placeholder="Add a comment..." style="flex: 1; padding: 10px; border: none; border-radius: 20px; background: #333; color: white;" onkeypress="if(event.key==='Enter') addComment('${videoId}')">
                            <button onclick="addComment('${videoId}')" style="padding: 10px 20px; background: #ff006e; color: white; border: none; border-radius: 20px; cursor: pointer;">Post</button>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
            } catch (error) {
                console.error('Error loading comments:', error);
                showToast('Failed to load comments');
            }
        }

        // Add comment to video
        async function addComment(videoId) {
            if (!window.currentUser) {
                showToast('Please sign in to comment');
                return;
            }

            const input = document.getElementById(`commentInput-${videoId}`);
            const commentText = input ? input.value.trim() : '';
            
            if (!commentText) {
                showToast('Please enter a comment');
                return;
            }

            // Handle demo videos
            if (videoId.startsWith('welcome-') || videoId.includes('demo')) {
                // Add the comment to the demo comments display
                const commentsContainer = document.querySelector('.modal .modal-content > div[style*="max-height"]');
                if (commentsContainer && window.currentUser) {
                    const newComment = document.createElement('div');
                    newComment.style.cssText = 'margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #333;';
                    newComment.innerHTML = `
                        <strong>@${window.currentUser.displayName || window.currentUser.email}</strong>
                        <p style="margin-top: 5px;">${commentText}</p>
                        <small style="color: #888;">Just now</small>
                    `;
                    commentsContainer.appendChild(newComment);
                    
                    // Clear the input
                    const input = document.getElementById(`commentInput-${videoId}`);
                    if (input) input.value = '';
                    
                    // Update comment count in the video
                    const videoElement = document.querySelector(`[data-video-id="${videoId}"]`);
                    if (videoElement) {
                        const commentCountElement = videoElement.querySelector('.action-btn[onclick*="showComments"] + .action-count');
                        if (commentCountElement) {
                            const currentCount = parseInt(commentCountElement.textContent) || 0;
                            commentCountElement.textContent = currentCount + 1;
                        }
                    }
                }
                showToast('Comment posted! 💬');
                return;
            }

            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const comment = {
                    userId: window.currentUser.uid,
                    text: commentText,
                    createdAt: new Date(),
                    id: Date.now().toString()
                };
                
                await updateDoc(videoRef, {
                    comments: arrayUnion(comment)
                });
                
                // Update comment count in the video
                const commentCountElements = document.querySelectorAll(`[data-video-id="${videoId}"] .action-btn[onclick*="showComments"] .action-count`);
                commentCountElements.forEach(element => {
                    const currentCount = parseInt(element.textContent) || 0;
                    element.textContent = currentCount + 1;
                });
                
                showToast('Comment posted! 💬');
                
                // Clear the input
                const input = document.getElementById(`commentInput-${videoId}`);
                if (input) input.value = '';
                
                // Add the new comment to the modal without recreating it
                const commentsContainer = document.querySelector('.modal.active [style*="max-height: 300px"]');
                if (commentsContainer) {
                    // Remove "no comments" message if it exists
                    const noCommentsMsg = commentsContainer.querySelector('p[style*="color: #888"]');
                    if (noCommentsMsg) noCommentsMsg.remove();
                    
                    // Create new comment element
                    const newCommentElement = document.createElement('div');
                    newCommentElement.style.cssText = 'margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #333;';
                    
                    // Get user display name
                    const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                    const userSnapshot = await getDocs(userQuery);
                    let displayName = window.currentUser.email;
                    
                    if (!userSnapshot.empty) {
                        const userData = userSnapshot.docs[0].data();
                        displayName = userData.displayName || userData.username || window.currentUser.email;
                    }
                    
                    newCommentElement.innerHTML = `
                        <strong>${displayName}</strong>
                        <p style="margin-top: 5px;">${comment.text}</p>
                        <small style="color: #888;">Just now</small>
                    `;
                    
                    // Add to top of comments list
                    commentsContainer.insertBefore(newCommentElement, commentsContainer.firstChild);
                }
            } catch (error) {
                console.error('Error posting comment:', error);
                showToast('Failed to post comment');
            }
        }

        function closeModal() { 
            document.getElementById('commentsModal').classList.remove('active'); 
        }

        function shareVideo(btn) { 
            window.currentShareVideo = btn;
            document.getElementById('shareModal').classList.add('active'); 
        }

        // Share video by ID with share count increment
        async function shareVideoById(videoId) {
            if (!videoId) {
                showToast('Unable to share video');
                return;
            }

            try {
                // Show share modal
                document.getElementById('shareModal').classList.add('active');
                window.currentShareVideoId = videoId;
                
                // Check if user has already reposted this video
                await updateRepostButton(videoId);
                
                // Don't increment here - wait for actual share action
            } catch (error) {
                console.error('Share error:', error);
                showToast('Failed to share video');
            }
        }

        // Update repost button state based on user's repost status
        async function updateRepostButton(videoId) {
            if (!window.currentUser) return;
            
            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    const reposts = userData.reposts || [];
                    const hasReposted = reposts.includes(videoId);
                    
                    const repostOption = document.getElementById('repostOption');
                    const repostLabel = document.getElementById('repostLabel');
                    
                    if (hasReposted) {
                        repostOption.classList.add('reposted');
                        repostLabel.textContent = 'Unrepost';
                    } else {
                        repostOption.classList.remove('reposted');
                        repostLabel.textContent = 'Repost';
                    }
                }
            } catch (error) {
                console.error('Error checking repost status:', error);
            }
        }

        // Toggle repost functionality
        async function toggleRepost() {
            if (!window.currentUser) {
                showToast('Please sign in to repost videos');
                return;
            }

            if (!window.currentShareVideoId) {
                showToast('No video selected');
                return;
            }

            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (userSnapshot.empty) {
                    showToast('User not found');
                    return;
                }

                const userDoc = userSnapshot.docs[0];
                const userData = userDoc.data();
                const reposts = userData.reposts || [];
                const hasReposted = reposts.includes(window.currentShareVideoId);
                
                const repostOption = document.getElementById('repostOption');
                const repostLabel = document.getElementById('repostLabel');

                if (hasReposted) {
                    // Unrepost - remove from user's reposts and decrease video repost count
                    await updateDoc(userDoc.ref, {
                        reposts: arrayRemove(window.currentShareVideoId)
                    });

                    // Decrease repost count on video
                    const videoRef = doc(window.db, 'videos', window.currentShareVideoId);
                    const videoDoc = await window.getDoc(videoRef);
                    if (videoDoc.exists()) {
                        const currentReposts = videoDoc.data().reposts || 0;
                        await updateDoc(videoRef, {
                            reposts: Math.max(0, currentReposts - 1)
                        });
                    }

                    repostOption.classList.remove('reposted');
                    repostLabel.textContent = 'Repost';
                    showToast('Video unreposted');
                    
                } else {
                    // Repost - add to user's reposts and increase video repost count
                    await updateDoc(userDoc.ref, {
                        reposts: arrayUnion(window.currentShareVideoId)
                    });

                    // Increase repost count on video
                    const videoRef = doc(window.db, 'videos', window.currentShareVideoId);
                    const videoDoc = await window.getDoc(videoRef);
                    if (videoDoc.exists()) {
                        const currentReposts = videoDoc.data().reposts || 0;
                        await updateDoc(videoRef, {
                            reposts: currentReposts + 1
                        });
                    }

                    repostOption.classList.add('reposted');
                    repostLabel.textContent = 'Unrepost';
                    showToast('Video reposted! 🔄');
                    trackShare('repost'); // Track as a share
                }

                // Update the share count (which includes reposts)
                await updateShareCount(window.currentShareVideoId);

            } catch (error) {
                console.error('Error toggling repost:', error);
                showToast('Failed to repost video');
            }
        }

        // Track share when actually shared
        async function trackShare(platform) {
            if (!window.currentShareVideoId) {
                console.error('No video ID for share tracking');
                return;
            }
            
            console.log(`Tracking share for platform: ${platform}, video: ${window.currentShareVideoId}`);
            
            try {
                const videoRef = doc(window.db, 'videos', window.currentShareVideoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (videoDoc.exists()) {
                    const currentShares = videoDoc.data().shares || 0;
                    console.log(`Current shares: ${currentShares}, incrementing...`);
                    
                    await updateDoc(videoRef, {
                        shares: currentShares + 1,
                        [`sharePlatforms.${platform}`]: increment(1)
                    });
                    
                    console.log('Share tracked, updating UI...');
                    // Update share count in UI
                    await updateShareCount(window.currentShareVideoId);
                    showToast(`Shared to ${platform}! 📤`);
                } else {
                    console.error('Video document not found');
                }
            } catch (error) {
                console.error('Error tracking share:', error);
                showToast('Failed to track share');
            }
        }

        // Update share count in real-time
        async function updateShareCount(videoId) {
            try {
                console.log(`Updating share count for video: ${videoId}`);
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (videoDoc.exists()) {
                    const shares = videoDoc.data().shares || 0;
                    console.log(`Updated share count: ${shares}`);
                    
                    // Find all share buttons for this video
                    const countElements = document.querySelectorAll(`[data-video-id="${videoId}"] .action-btn[onclick*="shareVideoById"] .action-count`);
                    console.log(`Found ${countElements.length} share count elements to update`);
                    
                    countElements.forEach(element => {
                        console.log(`Updating element from "${element.textContent}" to "${shares}"`);
                        element.textContent = shares;
                    });
                } else {
                    console.error('Video document does not exist');
                }
            } catch (error) {
                console.error('Error updating share count:', error);
            }
        }

        function closeShareModal() { 
            document.getElementById('shareModal').classList.remove('active'); 
        }

        function showDeleteModal(videoId) { 
            window.currentVideoId = videoId;
            document.getElementById('deleteModal').classList.add('active'); 
        }

        function closeDeleteModal() { 
            document.getElementById('deleteModal').classList.remove('active'); 
        }

        // Share functions
        function copyVideoLink() {
            const url = window.location.href;
            navigator.clipboard.writeText(url).then(() => {
                showToast('Link copied to clipboard! 📋');
                trackShare('clipboard');
                closeShareModal();
            }).catch(() => {
                showToast('Failed to copy link');
            });
        }

        function shareToTwitter() {
            const text = encodeURIComponent('Check out this amazing video on VIB3!');
            const url = encodeURIComponent(window.location.href);
            window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`, '_blank');
            trackShare('twitter');
            closeShareModal();
        }

        function shareToFacebook() {
            try {
                const currentUrl = window.location.href;
                
                // Check if this is a localhost/development URL
                if (currentUrl.includes('localhost') || currentUrl.includes('127.0.0.1') || currentUrl.includes('file://')) {
                    // For development/localhost, copy URL and open Facebook
                    navigator.clipboard.writeText(currentUrl).then(() => {
                        showToast('Link copied! Opening Facebook 📘');
                    }).catch(() => {
                        showToast('Opening Facebook 📘');
                    });
                    
                    // Open Facebook in a new tab
                    window.open('https://www.facebook.com/', '_blank');
                    
                } else {
                    // For production URLs, use Facebook's sharer
                    const url = encodeURIComponent(currentUrl);
                    const facebookShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
                    window.open(facebookShareUrl, '_blank', 'width=600,height=400');
                }
                
                trackShare('facebook');
                closeShareModal();
            } catch (error) {
                console.error('Facebook share error:', error);
                // Fallback: copy to clipboard and open Facebook
                navigator.clipboard.writeText(window.location.href).then(() => {
                    showToast('Link copied! Share manually on Facebook 📘');
                }).catch(() => {
                    showToast('Opening Facebook 📘');
                });
                window.open('https://www.facebook.com/', '_blank');
                trackShare('facebook');
                closeShareModal();
            }
        }

        function shareToWhatsApp() {
            const text = encodeURIComponent('Check out this video on VIB3: ' + window.location.href);
            window.open(`https://wa.me/?text=${text}`, '_blank');
            trackShare('whatsapp');
            closeShareModal();
        }

        function shareToTelegram() {
            const text = encodeURIComponent('Check out this video on VIB3');
            const url = encodeURIComponent(window.location.href);
            window.open(`https://t.me/share/url?url=${url}&text=${text}`, '_blank');
            trackShare('telegram');
            closeShareModal();
        }

        function shareViaEmail() {
            const subject = encodeURIComponent('Check out this VIB3 video');
            const body = encodeURIComponent(`I thought you'd like this video: ${window.location.href}`);
            window.open(`mailto:?subject=${subject}&body=${body}`);
            trackShare('email');
            closeShareModal();
        }

        function downloadVideo() {
            showToast('Download starting... ⬇️');
            closeShareModal();
        }

        function generateQRCode() {
            showToast('QR code generated! 📱');
            closeShareModal();
        }

        function shareNative() {
            if (navigator.share) {
                navigator.share({
                    title: 'VIB3 Video',
                    text: 'Check out this amazing video!',
                    url: window.location.href
                });
            } else {
                showToast('Native sharing not supported');
            }
            closeShareModal();
        }

        function shareToInstagram() {
            try {
                const url = window.location.href;
                
                // Copy URL to clipboard first
                navigator.clipboard.writeText(url).then(() => {
                    showToast('Link copied! Opening Instagram 📷');
                }).catch(() => {
                    showToast('Opening Instagram 📷');
                });
                
                // For mobile devices, try Instagram app deep link
                if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    // Try to open Instagram app
                    const instagramAppUrl = 'instagram://camera';
                    window.location.href = instagramAppUrl;
                    
                    // Fallback: open Instagram web if app doesn't open
                    setTimeout(() => {
                        window.open('https://www.instagram.com/', '_blank');
                    }, 1500);
                } else {
                    // For desktop, open Instagram web
                    window.open('https://www.instagram.com/', '_blank');
                }
                
                trackShare('instagram');
                closeShareModal();
            } catch (error) {
                console.error('Instagram share error:', error);
                // Fallback: just open Instagram
                window.open('https://www.instagram.com/', '_blank');
                showToast('Instagram opened! Share manually 📷');
                trackShare('instagram');
                closeShareModal();
            }
        }

        // Video upload functions
        async function recordVideo() {
            try {
                // Check if MediaRecorder is supported
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    showToast('Camera not supported on this device');
                    return;
                }

                showToast('Accessing camera... 📹');

                // Get camera stream
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { 
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'user' // Front camera by default
                    },
                    audio: true
                });

                // Create camera interface
                const cameraModal = document.createElement('div');
                cameraModal.className = 'modal active camera-modal';
                cameraModal.innerHTML = `
                    <div class="modal-content" style="max-width: 90%; height: 90%; background: #000;">
                        <div style="position: relative; width: 100%; height: 100%; display: flex; flex-direction: column;">
                            <video id="cameraPreview" autoplay playsinline muted style="flex: 1; width: 100%; object-fit: cover; border-radius: 10px;"></video>
                            
                            <div style="position: absolute; top: 20px; right: 20px; display: flex; gap: 10px;">
                                <button onclick="switchCamera()" style="background: rgba(0,0,0,0.7); color: white; border: none; padding: 10px; border-radius: 50%; cursor: pointer;">🔄</button>
                                <button onclick="closeCameraModal()" style="background: rgba(0,0,0,0.7); color: white; border: none; padding: 10px; border-radius: 50%; cursor: pointer;">✕</button>
                            </div>
                            
                            <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); display: flex; gap: 15px; align-items: center;">
                                <button id="recordBtn" onclick="toggleRecording()" style="width: 70px; height: 70px; background: #ff006e; border: none; border-radius: 50%; color: white; font-size: 24px; cursor: pointer; transition: all 0.3s;">📹</button>
                                <div id="recordingTimer" style="color: white; font-size: 18px; font-weight: bold; min-width: 60px; text-align: center; display: none;">00:00</div>
                            </div>
                            
                            <div id="recordingIndicator" style="position: absolute; top: 20px; left: 20px; background: #ff4444; color: white; padding: 8px 15px; border-radius: 20px; font-weight: bold; display: none;">
                                🔴 REC
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(cameraModal);
                
                // Set up camera preview
                const video = document.getElementById('cameraPreview');
                video.srcObject = stream;
                
                // Store stream globally for recording
                window.currentCameraStream = stream;
                window.isRecording = false;
                window.mediaRecorder = null;
                window.recordedChunks = [];
                window.recordingStartTime = null;
                
                showToast('Camera ready! Tap record to start 🎬');
                
            } catch (error) {
                console.error('Camera access error:', error);
                if (error.name === 'NotAllowedError') {
                    showToast('Camera permission denied. Please allow camera access.');
                } else if (error.name === 'NotFoundError') {
                    showToast('No camera found on this device.');
                } else {
                    showToast('Failed to access camera. Please try again.');
                }
            }
        }

        // Camera control functions
        function toggleRecording() {
            if (!window.isRecording) {
                startRecording();
            } else {
                stopRecording();
            }
        }

        function startRecording() {
            try {
                if (!window.currentCameraStream) {
                    showToast('Camera not available');
                    return;
                }

                // Create MediaRecorder
                window.mediaRecorder = new MediaRecorder(window.currentCameraStream, {
                    mimeType: 'video/webm;codecs=vp9'
                });

                window.recordedChunks = [];
                window.isRecording = true;
                window.recordingStartTime = Date.now();

                // Set up recording events
                window.mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        window.recordedChunks.push(event.data);
                    }
                };

                window.mediaRecorder.onstop = () => {
                    const blob = new Blob(window.recordedChunks, { type: 'video/webm' });
                    processRecordedVideo(blob);
                };

                // Start recording
                window.mediaRecorder.start();

                // Update UI
                const recordBtn = document.getElementById('recordBtn');
                const timer = document.getElementById('recordingTimer');
                const indicator = document.getElementById('recordingIndicator');

                recordBtn.style.background = '#ff4444';
                recordBtn.textContent = '⏹';
                timer.style.display = 'block';
                indicator.style.display = 'block';

                // Start timer
                window.recordingTimer = setInterval(updateRecordingTimer, 1000);

                showToast('Recording started! 🎬');

            } catch (error) {
                console.error('Recording start error:', error);
                showToast('Failed to start recording');
            }
        }

        function stopRecording() {
            if (window.mediaRecorder && window.isRecording) {
                window.mediaRecorder.stop();
                window.isRecording = false;

                // Clear timer
                if (window.recordingTimer) {
                    clearInterval(window.recordingTimer);
                }

                // Update UI
                const recordBtn = document.getElementById('recordBtn');
                const timer = document.getElementById('recordingTimer');
                const indicator = document.getElementById('recordingIndicator');

                recordBtn.style.background = '#ff006e';
                recordBtn.textContent = '📹';
                timer.style.display = 'none';
                indicator.style.display = 'none';

                showToast('Recording stopped! Processing... 🎬');
            }
        }

        function updateRecordingTimer() {
            if (window.recordingStartTime) {
                const elapsed = Math.floor((Date.now() - window.recordingStartTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                const timer = document.getElementById('recordingTimer');
                if (timer) {
                    timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
            }
        }

        function processRecordedVideo(blob) {
            // Close camera modal
            closeCameraModal();

            // Create a File object from the blob
            const file = new File([blob], `recorded_video_${Date.now()}.webm`, { type: 'video/webm' });
            
            // Set up for upload
            window.selectedVideoFile = file;
            
            // Create preview URL
            const videoUrl = URL.createObjectURL(blob);
            const preview = document.getElementById('videoPreview');
            if (preview) {
                preview.src = videoUrl;
            }

            // Show upload step 2
            document.getElementById('uploadStep1').style.display = 'none';
            document.getElementById('uploadStep2').style.display = 'block';

            showToast('Video ready for upload! 📤');
        }

        function switchCamera() {
            // This would switch between front and back camera
            // Implementation would require recreating the stream with different facingMode
            showToast('Camera switching coming soon! 🔄');
        }

        function closeCameraModal() {
            // Stop recording if active
            if (window.isRecording) {
                stopRecording();
            }

            // Stop camera stream
            if (window.currentCameraStream) {
                window.currentCameraStream.getTracks().forEach(track => track.stop());
                window.currentCameraStream = null;
            }

            // Clear timers
            if (window.recordingTimer) {
                clearInterval(window.recordingTimer);
            }

            // Remove modal
            const modal = document.querySelector('.camera-modal');
            if (modal) {
                modal.remove();
            }
        }

        function selectVideo() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'video/*';
            input.onchange = async (e) => {
                const file = e.target.files[0];
                if (file) {
                    const preview = document.getElementById('videoPreview');
                    preview.src = URL.createObjectURL(file);
                    window.selectedVideoFile = file;
                    document.getElementById('uploadStep1').style.display = 'none';
                    document.getElementById('uploadStep2').style.display = 'block';
                    showToast('Video ready for upload! 🎬');
                }
            };
            input.click();
        }

        function backToStep1() {
            document.getElementById('uploadStep2').style.display = 'none';
            document.getElementById('uploadStep1').style.display = 'block';
        }

        // Utility functions
        function showToast(message) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 3000);
        }

        function toggleSetting(toggle, settingName) {
            const isActive = toggle.classList.contains('active');
            
            if (isActive) {
                toggle.classList.remove('active');
                userSettings[settingName] = false;
            } else {
                toggle.classList.add('active');
                userSettings[settingName] = true;
            }
            
            showToast(`${settingName} ${userSettings[settingName] ? 'enabled' : 'disabled'}`);
        }

        // Follow/Unfollow user with Firebase persistence
        async function followUser(userId) {
            if (!window.currentUser) {
                showToast('Please sign in to follow users');
                return;
            }

            try {
                const followingRef = doc(window.db, 'following', `${window.currentUser.uid}_${userId}`);
                const followersRef = doc(window.db, 'followers', `${userId}_${window.currentUser.uid}`);
                
                if (followedUsers.has(userId)) {
                    // Unfollow
                    await window.deleteDoc(followingRef);
                    await window.deleteDoc(followersRef);
                    followedUsers.delete(userId);
                    
                    // Update UI
                    const followBtns = document.querySelectorAll('[onclick*="' + userId + '"]');
                    followBtns.forEach(btn => {
                        if (btn.textContent === '✓') {
                            btn.style.background = '#ff006e';
                            btn.textContent = '+';
                        }
                    });
                    
                    showToast(`Unfollowed user`);
                } else {
                    // Follow
                    await setDoc(doc(window.db, 'following', `${window.currentUser.uid}_${userId}`), {
                        followerId: window.currentUser.uid,
                        followingId: userId,
                        createdAt: new Date()
                    });
                    await setDoc(doc(window.db, 'followers', `${userId}_${window.currentUser.uid}`), {
                        followerId: window.currentUser.uid,
                        followingId: userId,
                        createdAt: new Date()
                    });
                    followedUsers.add(userId);
                    
                    // Update UI
                    const followBtns = document.querySelectorAll('[onclick*="' + userId + '"]');
                    followBtns.forEach(btn => {
                        if (btn.textContent === '+') {
                            btn.style.background = '#666';
                            btn.textContent = '✓';
                        }
                    });
                    
                    showToast(`Following user 👥`);
                }
                
                // Update following count
                const followingCount = document.getElementById('followingCount');
                if (followingCount) {
                    followingCount.textContent = followedUsers.size;
                }
                
                // Save to localStorage for quick loading
                localStorage.setItem(`following_${window.currentUser.uid}`, JSON.stringify(Array.from(followedUsers)));
            } catch (error) {
                console.error('Follow error:', error);
                showToast('Failed to update follow status');
            }
        }

        // Open user profile modal
        function openUserProfile(userId, displayName) {
            const modal = document.createElement('div');
            modal.className = 'modal active';
            modal.style.zIndex = '200';
            modal.innerHTML = `
                <div class="modal-content">
                    <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                    <div style="text-align: center; padding: 20px 0;">
                        <div style="width: 80px; height: 80px; border-radius: 50%; background: linear-gradient(45deg, #ff006e, #8338ec); margin: 0 auto 15px; display: flex; align-items: center; justify-content: center; font-size: 35px;">👤</div>
                        <h3>${displayName}</h3>
                        <p style="color: #888; margin: 10px 0;">Content creator on VIB3 ✨</p>
                        <button onclick="followUser('${userId}')" style="padding: 12px 40px; background: ${followedUsers.has(userId) ? '#666' : '#ff006e'}; color: white; border: none; border-radius: 25px; margin: 20px 0; cursor: pointer; font-weight: bold;">${followedUsers.has(userId) ? 'Following' : 'Follow'}</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Toggle like on video
        async function toggleLike(btn, videoId, reaction = '❤️') {
            if (!window.currentUser) {
                showToast('Please sign in to like videos');
                return;
            }

            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (!videoDoc.exists()) {
                    showToast('Video not found');
                    return;
                }
                
                const videoData = videoDoc.data();
                const likes = videoData.likes || [];
                const reactions = videoData.reactions || {};
                const userLiked = likes.includes(window.currentUser.uid);
                const countElement = btn.parentElement.querySelector('.action-count');
                
                if (userLiked) {
                    // Unlike - remove from likes array and reactions object
                    await updateDoc(videoRef, {
                        likes: arrayRemove(window.currentUser.uid),
                        [`reactions.${window.currentUser.uid}`]: deleteField()
                    });
                    btn.classList.remove('liked');
                    btn.querySelector('span').textContent = '❤️';
                    updateLikeCount(videoId);
                    showToast('Removed from likes');
                } else {
                    // Like - add to likes array and track reaction
                    await updateDoc(videoRef, {
                        likes: arrayUnion(window.currentUser.uid),
                        [`reactions.${window.currentUser.uid}`]: reaction
                    });
                    btn.classList.add('liked');
                    btn.querySelector('span').textContent = reaction;
                    updateLikeCount(videoId);
                    showToast(`Reacted with ${reaction}`);
                }
            } catch (error) {
                console.error('Like error:', error);
                showToast('Failed to update like');
            }
        }

        // Update like count in real-time
        async function updateLikeCount(videoId) {
            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (videoDoc.exists()) {
                    const likes = videoDoc.data().likes || [];
                    const countElements = document.querySelectorAll(`[data-video-id="${videoId}"] .like-btn .action-count`);
                    countElements.forEach(element => {
                        element.textContent = likes.length;
                    });
                }
            } catch (error) {
                console.error('Error updating like count:', error);
            }
        }

        // Update reaction (used when changing reaction)
        async function updateReaction(btn, videoId, reaction) {
            if (!window.currentUser) {
                showToast('Please sign in to react to videos');
                return;
            }

            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (!videoDoc.exists()) {
                    showToast('Video not found');
                    return;
                }
                
                const videoData = videoDoc.data();
                const likes = videoData.likes || [];
                const userLiked = likes.includes(window.currentUser.uid);
                
                if (!userLiked) {
                    // User hasn't liked yet, add them
                    await updateDoc(videoRef, {
                        likes: arrayUnion(window.currentUser.uid),
                        [`reactions.${window.currentUser.uid}`]: reaction
                    });
                } else {
                    // User already liked, just update the reaction
                    await updateDoc(videoRef, {
                        [`reactions.${window.currentUser.uid}`]: reaction
                    });
                }
                
                btn.classList.add('liked');
                btn.querySelector('span').textContent = reaction;
                updateLikeCount(videoId);
                showToast(`Reacted with ${reaction}`);
                
            } catch (error) {
                console.error('Reaction error:', error);
                showToast('Failed to update reaction');
            }
        }

        // Show reactions menu
        function showReactions(btn) {
            window.currentReactionBtn = btn;
            const videoId = btn.closest('.video-item').getAttribute('data-video-id');
            
            const modal = document.createElement('div');
            modal.className = 'modal active reactions-modal';
            modal.innerHTML = `
                <div class="modal-content" style="max-width: 300px;">
                    <h3 style="text-align: center; margin-bottom: 20px;">React to this video</h3>
                    <div style="display: flex; justify-content: space-around; gap: 15px; margin: 20px 0;">
                        <button onclick="addReaction('❤️', '${videoId}')" style="background: none; border: none; font-size: 40px; cursor: pointer;">❤️</button>
                        <button onclick="addReaction('😂', '${videoId}')" style="background: none; border: none; font-size: 40px; cursor: pointer;">😂</button>
                        <button onclick="addReaction('😮', '${videoId}')" style="background: none; border: none; font-size: 40px; cursor: pointer;">😮</button>
                        <button onclick="addReaction('🔥', '${videoId}')" style="background: none; border: none; font-size: 40px; cursor: pointer;">🔥</button>
                        <button onclick="addReaction('👏', '${videoId}')" style="background: none; border: none; font-size: 40px; cursor: pointer;">👏</button>
                    </div>
                    <button onclick="this.closest('.modal').remove()" style="width: 100%; padding: 12px; background: #666; color: white; border: none; border-radius: 25px; margin-top: 15px; cursor: pointer;">Cancel</button>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Add reaction to video
        async function addReaction(emoji, videoId) {
            if (window.currentReactionBtn) {
                // Handle demo videos (welcome videos)
                if (videoId && videoId.startsWith('welcome-')) {
                    window.currentReactionBtn.querySelector('span').textContent = emoji;
                    window.currentReactionBtn.classList.add('liked');
                    const countElement = window.currentReactionBtn.parentElement.querySelector('.action-count');
                    if (countElement) {
                        const currentCount = parseInt(countElement.textContent.replace(/[^0-9]/g, '')) || 0;
                        countElement.textContent = currentCount + 1;
                    }
                    showToast(`Reacted with ${emoji}!`);
                } else {
                    // Handle real videos - always update the reaction, don't toggle
                    await updateReaction(window.currentReactionBtn, videoId, emoji);
                }
            }
            
            // Close the reactions modal
            const modal = document.querySelector('.reactions-modal');
            if (modal) {
                modal.remove();
            }
        }

        // Show who liked the video
        async function showWhoLiked(element) {
            const videoId = element.closest('.video-item').getAttribute('data-video-id');
            if (!videoId) {
                showToast('Unable to load likes');
                return;
            }

            // Handle demo videos
            if (videoId.startsWith('welcome-') || videoId.includes('demo')) {
                const modal = document.createElement('div');
                modal.className = 'modal active';
                modal.innerHTML = `
                    <div class="modal-content">
                        <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                        <h3>Who liked this</h3>
                        <div style="margin: 20px 0; max-height: 300px; overflow-y: auto;">
                            <div style="display: flex; align-items: center; gap: 15px; padding: 10px 0; border-bottom: 1px solid #333;">
                                <div style="width: 40px; height: 40px; background: linear-gradient(45deg, #ff006e, #8338ec); border-radius: 50%; display: flex; align-items: center; justify-content: center;">👤</div>
                                <div style="flex: 1;">@vib3_community</div>
                                <button onclick="followUser('vib3_community')" style="padding: 8px 16px; background: #ff006e; color: white; border: none; border-radius: 20px; cursor: pointer;">Follow</button>
                            </div>
                            <div style="display: flex; align-items: center; gap: 15px; padding: 10px 0; border-bottom: 1px solid #333;">
                                <div style="width: 40px; height: 40px; background: linear-gradient(45deg, #ff006e, #8338ec); border-radius: 50%; display: flex; align-items: center; justify-content: center;">👤</div>
                                <div style="flex: 1;">@demo_user</div>
                                <button onclick="followUser('demo_user')" style="padding: 8px 16px; background: #ff006e; color: white; border: none; border-radius: 20px; cursor: pointer;">Follow</button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                return;
            }

            try {
                const videoDoc = await window.getDoc(doc(window.db, 'videos', videoId));
                if (!videoDoc.exists()) return;
                
                const likes = videoDoc.data().likes || [];
                
                const modal = document.createElement('div');
                modal.className = 'modal active';
                modal.innerHTML = `
                    <div class="modal-content">
                        <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                        <h3>Who liked this</h3>
                        <div style="margin: 20px 0; max-height: 300px; overflow-y: auto;">
                            ${likes.length === 0 ? '<p style="color: #888; text-align: center;">No likes yet</p>' : 
                              likes.map(userId => `
                                <div style="display: flex; align-items: center; gap: 15px; padding: 10px 0; border-bottom: 1px solid #333;">
                                    <div style="width: 40px; height: 40px; background: linear-gradient(45deg, #ff006e, #8338ec); border-radius: 50%; display: flex; align-items: center; justify-content: center;">👤</div>
                                    <div style="flex: 1;">@${userId.substring(0, 12)}...</div>
                                    <button onclick="followUser('${userId}')" style="padding: 8px 16px; background: ${followedUsers.has(userId) ? '#666' : '#ff006e'}; color: white; border: none; border-radius: 20px; cursor: pointer;">${followedUsers.has(userId) ? 'Following' : 'Follow'}</button>
                                </div>
                              `).join('')}
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
            } catch (error) {
                console.error('Error loading likes:', error);
                showToast('Failed to load likes');
            }
        }

        // Save video to collection
        async function saveToCollection(btn) {
            if (!window.currentUser) {
                showToast('Please sign in to save videos');
                return;
            }

            const videoId = btn.closest('.video-item').getAttribute('data-video-id');
            if (!videoId) return;

            // Handle demo videos
            if (videoId.startsWith('welcome-') || videoId.includes('demo')) {
                const isSaved = btn.classList.contains('liked');
                const countElement = btn.querySelector('.action-count');
                const currentCount = parseInt(countElement.textContent) || 0;
                
                if (isSaved) {
                    btn.classList.remove('liked');
                    countElement.textContent = Math.max(0, currentCount - 1);
                    showToast('Removed from saved videos');
                } else {
                    btn.classList.add('liked');
                    countElement.textContent = currentCount + 1;
                    showToast('Saved to collection! 💾');
                }
                return;
            }

            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (!videoDoc.exists()) {
                    showToast('Video not found');
                    return;
                }
                
                const videoData = videoDoc.data();
                const saves = videoData.saves || [];
                const userSaved = saves.includes(window.currentUser.uid);
                
                if (userSaved) {
                    // Unsave
                    await updateDoc(videoRef, {
                        saves: arrayRemove(window.currentUser.uid)
                    });
                    btn.classList.remove('liked');
                    updateSaveCount(videoId);
                    showToast('Removed from saved videos');
                } else {
                    // Save
                    await updateDoc(videoRef, {
                        saves: arrayUnion(window.currentUser.uid)
                    });
                    btn.classList.add('liked');
                    updateSaveCount(videoId);
                    showToast('Saved to collection! 💾');
                }
            } catch (error) {
                console.error('Save error:', error);
                showToast('Failed to save video');
            }
        }

        // Update save count in real-time
        async function updateSaveCount(videoId) {
            try {
                const videoRef = doc(window.db, 'videos', videoId);
                const videoDoc = await window.getDoc(videoRef);
                
                if (videoDoc.exists()) {
                    const saves = videoDoc.data().saves || [];
                    const countElements = document.querySelectorAll(`[data-video-id="${videoId}"] .action-btn[onclick*="saveToCollection"] .action-count`);
                    countElements.forEach(element => {
                        element.textContent = saves.length || 'SAVE';
                    });
                }
            } catch (error) {
                console.error('Error updating save count:', error);
            }
        }

        // Show more options menu
        function showMoreOptions(btn) {
            const videoId = btn.closest('.video-item').getAttribute('data-video-id');
            
            const modal = document.createElement('div');
            modal.className = 'modal active';
            modal.innerHTML = `
                <div class="modal-content">
                    <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                    <h3>More Options</h3>
                    <div style="margin: 20px 0;">
                        <button onclick="reportVideo('${videoId}')" style="width: 100%; padding: 15px; background: #333; color: white; border: none; border-radius: 10px; margin-bottom: 10px; text-align: left; cursor: pointer;">
                            🚨 Report inappropriate content
                        </button>
                        <button onclick="blockUserFromVideo('${videoId}')" style="width: 100%; padding: 15px; background: #333; color: white; border: none; border-radius: 10px; margin-bottom: 10px; text-align: left; cursor: pointer;">
                            🚫 Block this creator
                        </button>
                        <button onclick="notInterested('${videoId}')" style="width: 100%; padding: 15px; background: #333; color: white; border: none; border-radius: 10px; margin-bottom: 10px; text-align: left; cursor: pointer;">
                            👎 Not interested
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Report video
        async function reportVideo(videoId) {
            if (!window.currentUser) {
                showToast('Please sign in to report videos');
                return;
            }

            try {
                await addDoc(collection(window.db, 'reports'), {
                    videoId: videoId,
                    reportedBy: window.currentUser.uid,
                    reason: 'inappropriate',
                    createdAt: new Date()
                });
                showToast('Video reported. We will review it soon.');
                document.querySelector('.modal').remove();
            } catch (error) {
                console.error('Report error:', error);
                showToast('Failed to report video');
            }
        }

        // Block user
        async function blockUserFromVideo(videoId) {
            showToast('User blocked successfully 🚫');
            document.querySelector('.modal').remove();
        }

        // Not interested
        function notInterested(videoId) {
            showToast('We\'ll show you fewer videos like this 👎');
            document.querySelector('.modal').remove();
        }

        function performSearch() {
            const query = document.getElementById('searchInput').value.trim();
            showToast(`Searching for: ${query}`);
        }

        function searchTrendingTag(tag) {
            document.getElementById('searchInput').value = '#' + tag;
            performSearch();
        }

        function showTrendingSounds() {
            showToast('Trending sounds coming soon! 🎵');
        }

        function toggleMute(btn) {
            const isUnmuted = btn.classList.contains('unmuted');
            const videos = document.querySelectorAll('video');
            
            if (isUnmuted) {
                btn.classList.remove('unmuted');
                btn.textContent = '🔇';
                videos.forEach(video => video.muted = true);
                // Save muted preference
                localStorage.setItem('vib3_audio_enabled', 'false');
                showToast('Videos muted 🔇');
            } else {
                btn.classList.add('unmuted');
                btn.textContent = '🔊';
                videos.forEach(video => video.muted = false);
                // Save unmuted preference
                localStorage.setItem('vib3_audio_enabled', 'true');
                showToast('Audio enabled 🔊');
            }
        }

        // Initialize ALL follow buttons for a specific user
        async function initializeAllFollowButtonsForUser(userId) {
            console.log('Initializing ALL follow buttons for user:', userId);
            if (!window.currentUser) {
                console.log('No current user, skipping follow button init');
                return;
            }
            
            // Don't initialize follow buttons for the current user's own videos
            if (userId === window.currentUser.uid) {
                console.log('Skipping follow button init for current user videos');
                // Hide any follow buttons that might exist for current user's videos
                const ownFollowButtons = document.querySelectorAll(`[id^="followBtn_${userId}"]`);
                ownFollowButtons.forEach(button => {
                    button.style.display = 'none';
                });
                return;
            }
            
            try {
                const followingRef = doc(window.db, 'following', `${window.currentUser.uid}_${userId}`);
                const followingDoc = await getDoc(followingRef);
                const isFollowing = followingDoc.exists();
                console.log('User', userId, 'following status:', isFollowing);
                
                // Update ALL follow buttons for this user
                const allFollowButtons = document.querySelectorAll(`[id^="followBtn_${userId}"]`);
                console.log('Found', allFollowButtons.length, 'follow buttons for user', userId);
                
                allFollowButtons.forEach(button => {
                    if (isFollowing) {
                        // Show as following
                        button.style.background = '#4CAF50';
                        button.textContent = '✓';
                        button.title = 'Unfollow';
                    } else {
                        // Show as not following
                        button.style.background = '#ff006e';
                        button.textContent = '+';
                        button.title = 'Follow';
                    }
                });
            } catch (error) {
                console.error('Error initializing follow buttons for user:', userId, error);
            }
        }

        // Initialize follow button state (legacy function - keeping for compatibility)
        async function initializeFollowButtonState(userId) {
            console.log('Initializing follow button for user:', userId);
            if (!window.currentUser) {
                console.log('No current user, skipping follow button init');
                return;
            }
            
            try {
                const followingRef = doc(window.db, 'following', `${window.currentUser.uid}_${userId}`);
                const followingDoc = await getDoc(followingRef);
                const isFollowing = followingDoc.exists();
                console.log('User', userId, 'following status:', isFollowing);
                
                const button = document.getElementById(`followBtn_${userId}`);
                console.log('Found follow button for user', userId, ':', !!button);
                if (button) {
                    if (isFollowing) {
                        // Show as following
                        button.style.background = '#4CAF50';
                        button.textContent = '✓';
                        button.title = 'Unfollow';
                    } else {
                        // Show as not following
                        button.style.background = '#ff006e';
                        button.textContent = '+';
                        button.title = 'Follow';
                    }
                }
            } catch (error) {
                console.error('Error initializing follow button state:', error);
            }
        }

        // Toggle follow button function
        async function toggleFollowButton(userId, button) {
            console.log('toggleFollowButton called for user:', userId);
            if (!window.currentUser) {
                showToast('Please sign in to follow users');
                return;
            }

            try {
                const followingRef = doc(window.db, 'following', `${window.currentUser.uid}_${userId}`);
                const followersRef = doc(window.db, 'followers', `${userId}_${window.currentUser.uid}`);
                
                // Check current following status
                const followingDoc = await getDoc(followingRef);
                const isCurrentlyFollowing = followingDoc.exists();
                
                if (isCurrentlyFollowing) {
                    // Unfollow
                    await window.deleteDoc(followingRef);
                    await window.deleteDoc(followersRef);
                    
                    // Update ALL follow buttons for this user to show + (not following)
                    const allFollowButtons = document.querySelectorAll(`[id^="followBtn_${userId}"]`);
                    allFollowButtons.forEach(btn => {
                        btn.style.background = '#ff006e';
                        btn.textContent = '+';
                        btn.title = 'Follow';
                    });
                    
                    showToast('Unfollowed user');
                } else {
                    // Follow
                    await setDoc(followingRef, {
                        followerId: window.currentUser.uid,
                        followingId: userId,
                        createdAt: new Date()
                    });
                    await setDoc(followersRef, {
                        followerId: window.currentUser.uid,
                        followingId: userId,
                        createdAt: new Date()
                    });
                    
                    // Update ALL follow buttons for this user to show ✓ (following)
                    const allFollowButtons = document.querySelectorAll(`[id^="followBtn_${userId}"]`);
                    allFollowButtons.forEach(btn => {
                        btn.style.background = '#4CAF50';
                        btn.textContent = '✓';
                        btn.title = 'Unfollow';
                    });
                    
                    showToast('Following user');
                }
            } catch (error) {
                console.error('Follow toggle error:', error);
                showToast('Failed to update follow status');
            }
        }

        // Video playback toggle function
        function toggleVideoPlayback(wrapper) {
            const video = wrapper.querySelector('.video-element');
            const indicator = wrapper.querySelector('.play-pause-indicator');
            
            if (!video) return;
            
            // Mark user interaction
            if (!window.userHasInteracted) {
                window.userHasInteracted = true;
                localStorage.setItem('vib3_user_interacted', 'true');
                console.log('User interaction via video click - enabling audio');
            }
            
            if (video.paused) {
                // Ensure video is unmuted unless manually muted
                if (!video.hasAttribute('data-manually-muted')) {
                    video.muted = false;
                    video.volume = 0.8;
                    
                    // Update mute button
                    const muteBtn = wrapper.closest('.video-item')?.querySelector('.mute-btn');
                    if (muteBtn) {
                        muteBtn.classList.add('unmuted');
                        muteBtn.textContent = '🔊';
                        muteBtn.style.background = 'rgba(0,0,0,0.9)';
                    }
                }
                
                // Pause all other videos
                document.querySelectorAll('.video-element').forEach(v => {
                    if (v !== video && !v.paused) {
                        v.pause();
                    }
                });
                
                video.play().then(() => {
                    if (indicator) {
                        indicator.textContent = '▶️';
                        indicator.style.opacity = '1';
                        setTimeout(() => indicator.style.opacity = '0', 1000);
                    }
                    console.log('Video playing after click');
                }).catch(() => {
                    console.log('Playback failed');
                });
            } else {
                video.pause();
                if (indicator) {
                    indicator.textContent = '⏸️';
                    indicator.style.opacity = '1';
                    setTimeout(() => indicator.style.opacity = '0', 1000);
                }
            }
        }

        // Make all functions global
        window.showError = showError;
        window.showLoading = showLoading;
        window.showLogin = showLogin;
        window.showSignup = showSignup;
        window.clearError = clearError;
        window.login = login;
        window.signup = signup;
        window.logout = logout;
        window.showPage = showPage;
        window.switchFeedTab = switchFeedTab;
        window.showUploadModal = showUploadModal;
        window.closeUploadModal = closeUploadModal;
        window.showComments = showComments;
        window.closeModal = closeModal;
        window.shareVideo = shareVideo;
        window.closeShareModal = closeShareModal;
        window.showDeleteModal = showDeleteModal;
        window.closeDeleteModal = closeDeleteModal;
        window.copyVideoLink = copyVideoLink;
        window.shareToTwitter = shareToTwitter;
        window.shareToFacebook = shareToFacebook;
        window.shareToWhatsApp = shareToWhatsApp;
        window.shareToTelegram = shareToTelegram;
        window.shareViaEmail = shareViaEmail;
        window.downloadVideo = downloadVideo;
        window.generateQRCode = generateQRCode;
        window.shareNative = shareNative;
        window.shareToInstagram = shareToInstagram;
        window.recordVideo = recordVideo;
        window.toggleRecording = toggleRecording;
        window.startRecording = startRecording;
        window.stopRecording = stopRecording;
        window.switchCamera = switchCamera;
        window.closeCameraModal = closeCameraModal;
        window.selectVideo = selectVideo;
        window.backToStep1 = backToStep1;
        window.showToast = showToast;
        window.toggleSetting = toggleSetting;
        window.followUser = followUser;
        window.openUserProfile = openUserProfile;
        window.showReactions = showReactions;
        window.addReaction = addReaction;
        window.showWhoLiked = showWhoLiked;
        window.saveToCollection = saveToCollection;
        window.showMoreOptions = showMoreOptions;
        window.reportVideo = reportVideo;
        window.blockUserFromVideo = blockUserFromVideo;
        window.notInterested = notInterested;
        window.shareVideoById = shareVideoById;
        window.toggleLike = toggleLike;
        window.performSearch = performSearch;
        window.searchTrendingTag = searchTrendingTag;
        window.showTrendingSounds = showTrendingSounds;
        window.toggleMute = toggleMute;
        window.toggleVideoPlayback = toggleVideoPlayback;
        window.toggleFollowButton = toggleFollowButton;
        window.initializeFollowButtonState = initializeFollowButtonState;
        
        // Edit display name function
        async function editDisplayName() {
            console.log('editDisplayName function called');
            console.log('Current user:', window.currentUser);
            console.log('Auth current user:', auth.currentUser);
            
            if (!window.currentUser && !auth.currentUser) {
                console.log('No current user found, returning');
                return;
            }
            
            // Use auth.currentUser as fallback if window.currentUser is not set
            const user = window.currentUser || auth.currentUser;
            console.log('Using user:', user);
            
            const currentDisplayName = user.displayName || 'User';
            console.log('Current display name:', currentDisplayName);
            
            console.log('About to show prompt...');
            const newDisplayName = prompt('Enter your display name:', currentDisplayName);
            console.log('Prompt returned. Value:', newDisplayName);
            console.log('Type:', typeof newDisplayName);
            console.log('Is null?', newDisplayName === null);
            console.log('Is empty string?', newDisplayName === '');
            console.log('Length:', newDisplayName ? newDisplayName.length : 'N/A');
            
            if (newDisplayName === null) {
                console.log('User clicked Cancel');
                return;
            }
            
            if (newDisplayName && newDisplayName.trim()) {
                console.log('Proceeding with update...');
                try {
                    // Update Firebase Auth profile
                    await updateProfile(user, { displayName: newDisplayName.trim() });
                    console.log('Firebase Auth profile updated');
                    
                    // Update Firestore user document
                    const userQuery = query(collection(db, 'users'), where('uid', '==', user.uid));
                    const userSnapshot = await getDocs(userQuery);
                    
                    console.log('Found user documents:', userSnapshot.size);
                    
                    if (!userSnapshot.empty) {
                        const userDoc = userSnapshot.docs[0];
                        const userDocRef = userDoc.ref;
                        console.log('User document ID:', userDoc.id);
                        console.log('Current user data:', userDoc.data());
                        
                        // Try using updateDoc instead of setDoc
                        await updateDoc(userDocRef, { displayName: newDisplayName.trim() });
                        console.log('Updated Firestore user document with displayName:', newDisplayName.trim());
                        
                        // Verify the update worked
                        const updatedDoc = await getDoc(userDocRef);
                        console.log('Verified updated data:', updatedDoc.data());
                    } else {
                        console.log('No Firestore user document found for UID:', window.currentUser.uid);
                    }
                    
                    // Update UI
                    document.getElementById('profileName').textContent = newDisplayName.trim();
                    showToast('Display name updated! 🎉');
                    
                    // Reload videos to show updated name
                    loadAllVideosForFeed();
                } catch (error) {
                    console.error('Error updating display name:', error);
                    showToast('Failed to update display name');
                }
            }
        }
        window.editDisplayName = editDisplayName;

        // Profile picture upload functions
        function uploadProfilePicture() {
            document.getElementById('profilePicInput').click();
        }

        async function handleProfilePicUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            // Validate file type
            if (!file.type.startsWith('image/')) {
                showToast('Please select an image file');
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showToast('Image must be less than 5MB');
                return;
            }

            if (!window.currentUser) {
                showToast('Please sign in to upload profile picture');
                return;
            }

            try {
                showToast('Uploading profile picture...');

                // Upload to Firebase Storage
                const storageRef = ref(window.storage, `profile-pictures/${window.currentUser.uid}`);
                const uploadTask = uploadBytesResumable(storageRef, file);

                uploadTask.on('state_changed',
                    (snapshot) => {
                        // Progress feedback
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        console.log('Upload progress:', progress + '%');
                    },
                    (error) => {
                        console.error('Upload error:', error);
                        showToast('Failed to upload profile picture');
                    },
                    async () => {
                        // Upload completed successfully
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        
                        // Update Firestore user document
                        const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                        const userSnapshot = await getDocs(userQuery);
                        
                        if (!userSnapshot.empty) {
                            const userDoc = userSnapshot.docs[0];
                            const userDocRef = userDoc.ref;
                            
                            await updateDoc(userDocRef, { profilePicture: downloadURL });
                            
                            // Update UI
                            updateProfilePicDisplay(downloadURL);
                            // Don't update video avatars if user has a separate avatar set
                            const currentUserData = userSnapshot.docs[0].data();
                            if (!currentUserData.avatarPicture) {
                                updateAllVideoProfilePics(downloadURL);
                            }
                            showToast('Profile picture updated! 📸');
                        }
                    }
                );
            } catch (error) {
                console.error('Error uploading profile picture:', error);
                showToast('Failed to upload profile picture');
            }
        }

        function updateProfilePicDisplay(imageUrl) {
            const profilePic = document.getElementById('profilePic');
            const profilePicText = document.getElementById('profilePicText');
            
            if (imageUrl) {
                profilePic.style.backgroundImage = `url(${imageUrl})`;
                profilePicText.style.display = 'none';
            } else {
                profilePic.style.backgroundImage = '';
                profilePicText.style.display = 'block';
            }
        }

        // Load user profile picture on page load
        async function loadUserProfilePicture() {
            if (!window.currentUser) return;

            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    if (userData.profilePicture) {
                        updateProfilePicDisplay(userData.profilePicture);
                    }
                    if (userData.avatarPicture) {
                        updateAvatarDisplay(userData.avatarPicture);
                        updateAllVideoAvatars(userData.avatarPicture);
                    } else if (userData.profilePicture) {
                        updateAllVideoProfilePics(userData.profilePicture);
                    }
                }
            } catch (error) {
                console.error('Error loading profile picture:', error);
            }
        }

        // Update all video profile pictures for the current user
        async function updateAllVideoProfilePics(imageUrl) {
            if (!window.currentUser) return;

            // First check if user has an avatar set
            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    // If user has avatar, don't update with profile picture
                    if (userData.avatarPicture) {
                        return;
                    }
                }
            } catch (error) {
                console.error('Error checking for avatar:', error);
            }

            // Find all profile pictures for the current user's videos
            const userProfilePics = document.querySelectorAll(`[data-user-id="${window.currentUser.uid}"]`);
            
            userProfilePics.forEach(profilePic => {
                const textSpan = profilePic.querySelector('span');
                
                if (imageUrl) {
                    // Show profile image
                    let imgDiv = profilePic.querySelector('div[style*="background-image"]');
                    if (!imgDiv) {
                        imgDiv = document.createElement('div');
                        imgDiv.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%;';
                        profilePic.insertBefore(imgDiv, profilePic.firstChild);
                    }
                    imgDiv.style.backgroundImage = `url('${imageUrl}')`;
                    imgDiv.style.backgroundSize = 'cover';
                    imgDiv.style.backgroundPosition = 'center';
                    if (textSpan) {
                        textSpan.style.display = 'none';
                        textSpan.style.position = 'relative';
                        textSpan.style.zIndex = '1';
                    }
                } else {
                    // Show default text/icon
                    const imgDiv = profilePic.querySelector('div[style*="background-image"]');
                    if (imgDiv) imgDiv.remove();
                    if (textSpan) {
                        textSpan.style.display = 'block';
                    }
                }
            });
        }

        // Load profile pictures for all users when videos are loaded
        async function loadAllUsersProfilePics() {
            try {
                // Get all unique user IDs from video elements
                const userProfilePics = document.querySelectorAll('[data-user-id]');
                const userIds = new Set();
                
                userProfilePics.forEach(element => {
                    const userId = element.getAttribute('data-user-id');
                    if (userId) userIds.add(userId);
                });

                // Load profile pictures for all users
                for (const userId of userIds) {
                    try {
                        const userQuery = query(collection(db, 'users'), where('uid', '==', userId));
                        const userSnapshot = await getDocs(userQuery);
                        
                        if (!userSnapshot.empty) {
                            const userData = userSnapshot.docs[0].data();
                            // Check for avatar first, then profile picture
                            const imageUrl = userData.avatarPicture || userData.profilePicture;
                            if (imageUrl) {
                                // Update all profile pics for this user
                                const userElements = document.querySelectorAll(`[data-user-id="${userId}"]`);
                                userElements.forEach(element => {
                                    const textSpan = element.querySelector('span');
                                    let imgDiv = element.querySelector('div[style*="background-image"]');
                                    if (!imgDiv) {
                                        imgDiv = document.createElement('div');
                                        imgDiv.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%;';
                                        element.insertBefore(imgDiv, element.firstChild);
                                    }
                                    imgDiv.style.backgroundImage = `url('${imageUrl}')`;
                                    imgDiv.style.backgroundSize = 'cover';
                                    imgDiv.style.backgroundPosition = 'center';
                                    if (textSpan) {
                                        textSpan.style.display = 'none';
                                        textSpan.style.position = 'relative';
                                        textSpan.style.zIndex = '1';
                                    }
                                });
                            }
                        }
                    } catch (error) {
                        console.error(`Error loading profile picture for user ${userId}:`, error);
                    }
                }
            } catch (error) {
                console.error('Error loading profile pictures:', error);
            }
        }

        // Avatar picture upload functions
        function uploadAvatarPicture() {
            document.getElementById('avatarPicInput').click();
        }

        async function handleAvatarPicUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            // Validate file type
            if (!file.type.startsWith('image/')) {
                showToast('Please select an image file');
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                showToast('Image must be less than 5MB');
                return;
            }

            if (!window.currentUser) {
                showToast('Please sign in to upload avatar');
                return;
            }

            try {
                showToast('Uploading video avatar...');

                // Upload to Firebase Storage
                const storageRef = ref(window.storage, `avatars/${window.currentUser.uid}`);
                const uploadTask = uploadBytesResumable(storageRef, file);

                uploadTask.on('state_changed',
                    (snapshot) => {
                        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        console.log('Avatar upload progress:', progress + '%');
                    },
                    (error) => {
                        console.error('Avatar upload error:', error);
                        showToast('Failed to upload avatar');
                    },
                    async () => {
                        const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
                        
                        // Update Firestore user document
                        const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                        const userSnapshot = await getDocs(userQuery);
                        
                        if (!userSnapshot.empty) {
                            const userDoc = userSnapshot.docs[0];
                            const userDocRef = userDoc.ref;
                            
                            await updateDoc(userDocRef, { avatarPicture: downloadURL });
                            
                            // Update UI
                            updateAvatarDisplay(downloadURL);
                            updateAllVideoAvatars(downloadURL);
                            showToast('Video avatar updated! 🎭');
                        }
                    }
                );
            } catch (error) {
                console.error('Error uploading avatar:', error);
                showToast('Failed to upload avatar');
            }
        }

        function updateAvatarDisplay(imageUrl) {
            const avatarPreview = document.getElementById('avatarPreview');
            
            if (!avatarPreview) {
                console.log('Avatar preview element not found');
                return;
            }
            
            if (imageUrl) {
                avatarPreview.style.backgroundImage = `url('${imageUrl}')`;
                avatarPreview.style.border = '2px solid #ff006e';
            } else {
                avatarPreview.style.backgroundImage = '';
                avatarPreview.style.border = 'none';
            }
        }

        // Update all video avatars for the current user
        function updateAllVideoAvatars(avatarUrl) {
            if (!window.currentUser) return;

            // Find all profile pictures for the current user's videos
            const userProfilePics = document.querySelectorAll(`[data-user-id="${window.currentUser.uid}"]`);
            
            userProfilePics.forEach(profilePic => {
                const textSpan = profilePic.querySelector('span');
                
                if (avatarUrl) {
                    // Show avatar image
                    let imgDiv = profilePic.querySelector('div[style*="background-image"]');
                    if (!imgDiv) {
                        imgDiv = document.createElement('div');
                        imgDiv.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%;';
                        profilePic.insertBefore(imgDiv, profilePic.firstChild);
                    }
                    imgDiv.style.backgroundImage = `url('${avatarUrl}')`;
                    imgDiv.style.backgroundSize = 'cover';
                    imgDiv.style.backgroundPosition = 'center';
                    if (textSpan) {
                        textSpan.style.display = 'none';
                        textSpan.style.position = 'relative';
                        textSpan.style.zIndex = '1';
                    }
                } else {
                    // Fall back to profile picture or text
                    updateAllVideoProfilePics(null); // This will check for profilePicture
                }
            });
        }

        // Load user avatar on page load
        async function loadUserAvatar() {
            if (!window.currentUser) return;

            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    if (userData.avatarPicture) {
                        updateAvatarDisplay(userData.avatarPicture);
                        updateAllVideoAvatars(userData.avatarPicture);
                    }
                }
            } catch (error) {
                console.error('Error loading avatar:', error);
            }
        }

        // Cast video function
        function castVideo(button) {
            if (navigator.presentation && navigator.presentation.defaultRequest) {
                // Use Presentation API if available
                navigator.presentation.defaultRequest.start().then(() => {
                    showToast('Casting started! 📺');
                }).catch(() => {
                    showToast('Cast failed - device not found');
                });
            } else if (window.chrome && window.chrome.cast) {
                // Use Chrome Cast API if available
                showToast('Chromecast not available');
            } else {
                // Fallback
                showToast('Cast feature not supported on this device');
            }
        }

        // Bottom navigation functions
        function likeCurrentVideo() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    const likeBtn = video.closest('.video-item').querySelector('.like-btn');
                    if (likeBtn) {
                        likeBtn.click();
                    }
                }
            });
        }

        function castCurrentVideo() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    // Get the video URL and details for casting
                    const videoItem = video.closest('.video-item');
                    const videoId = videoItem?.getAttribute('data-video-id');
                    const videoSrc = video.src;
                    
                    if (videoSrc) {
                        // Use the same casting logic as the working cast button
                        if (navigator.presentation && navigator.presentation.defaultRequest) {
                            navigator.presentation.defaultRequest.start().then(() => {
                                showToast('Casting started! 📺');
                            }).catch(() => {
                                showToast('Cast failed - device not found');
                            });
                        } else if (window.chrome && window.chrome.cast) {
                            // Chrome Cast API
                            showToast('Chromecast not available');
                        } else {
                            // Web Share API fallback for mobile
                            if (navigator.share) {
                                navigator.share({
                                    title: 'VIB3 Video',
                                    text: 'Check out this video!',
                                    url: videoSrc
                                }).then(() => {
                                    showToast('Video shared! 📱');
                                }).catch(() => {
                                    showToast('Cast feature not supported on this device');
                                });
                            } else {
                                showToast('Cast feature not supported on this device');
                            }
                        }
                    } else {
                        showToast('No video to cast');
                    }
                }
            });
        }

        function shareCurrentVideo() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    const shareBtn = video.closest('.video-item').querySelector('[onclick*="shareVideoById"]');
                    if (shareBtn) {
                        shareBtn.click();
                    }
                }
            });
        }

        function toggleCurrentVideoMute() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    // Toggle mute state
                    video.muted = !video.muted;
                    
                    // Mark as manually muted/unmuted
                    if (video.muted) {
                        video.setAttribute('data-manually-muted', 'true');
                    } else {
                        video.removeAttribute('data-manually-muted');
                    }
                    
                    // Update button appearance
                    updateMuteButtonAppearance(video.muted);
                    
                    // Show toast notification
                    showToast(video.muted ? '🔇 Video Muted' : '🔊 Video Unmuted');
                }
            });
        }

        function updateMuteButtonAppearance(isMuted) {
            // Update bottom nav mute button
            const muteBtn = document.getElementById('muteBtn');
            if (muteBtn) {
                const icon = muteBtn.querySelector('.nav-icon');
                if (icon) {
                    icon.textContent = isMuted ? '🔇' : '🔊';
                }
            }
            
            // Update floating mute button if it exists
            const floatingMuteBtn = document.querySelector('.floating-nav-btn[data-action="mute"]');
            if (floatingMuteBtn) {
                const icon = floatingMuteBtn.querySelector('.nav-icon');
                if (icon) {
                    icon.textContent = isMuted ? '🔇' : '🔊';
                }
            }
        }

        // Check current video mute state and update button
        function syncMuteButtonWithCurrentVideo() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    updateMuteButtonAppearance(video.muted);
                }
            });
        }

        // Auto-sync mute button when scrolling between videos
        let lastSyncTime = 0;
        function autoSyncMuteButton() {
            const now = Date.now();
            if (now - lastSyncTime > 500) { // Throttle to every 500ms
                syncMuteButtonWithCurrentVideo();
                lastSyncTime = now;
            }
        }

        function viewCurrentVideoAccount() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    const videoItem = video.closest('.video-item');
                    const userId = videoItem.dataset.userId;
                    const username = videoItem.querySelector('.username').textContent;
                    if (userId) {
                        openUserProfile(userId, username);
                    }
                }
            });
        }

        function followCurrentVideoAccount() {
            const videos = document.querySelectorAll('.video-element');
            videos.forEach(video => {
                const rect = video.getBoundingClientRect();
                if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                    const videoItem = video.closest('.video-item');
                    const userId = videoItem.dataset.userId;
                    if (userId && window.currentUser && userId !== window.currentUser.uid) {
                        const followBtn = document.getElementById('followBtn');
                        toggleFollowButton(userId, followBtn);
                    } else if (!window.currentUser) {
                        showToast('Please sign in to follow users');
                    } else {
                        showToast('Cannot follow yourself');
                    }
                }
            });
        }

        // Update the bottom navigation profile button with user's profile picture
        function updateBottomNavProfile() {
            if (!window.currentUser) return;

            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                getDocs(userQuery).then(userSnapshot => {
                    if (!userSnapshot.empty) {
                        const userData = userSnapshot.docs[0].data();
                        const profileIcon = document.getElementById('yourProfileIcon');
                        
                        if (profileIcon) {
                            // Check for avatar first, then profile picture
                            const imageUrl = userData.avatarPicture || userData.profilePicture;
                            if (imageUrl) {
                                profileIcon.style.backgroundImage = `url('${imageUrl}')`;
                                profileIcon.style.backgroundSize = 'cover';
                                profileIcon.style.backgroundPosition = 'center';
                                profileIcon.textContent = '';
                            } else {
                                // Show first letter of username/display name
                                const displayName = userData.displayName || userData.username || window.currentUser.email;
                                profileIcon.textContent = displayName.charAt(0).toUpperCase();
                                profileIcon.style.backgroundImage = '';
                            }
                        }
                    }
                }).catch(error => {
                    console.error('Error loading profile for bottom nav:', error);
                });
            } catch (error) {
                console.error('Error updating bottom nav profile:', error);
            }
        }

        // Drag and drop functionality for bottom navigation
        function initBottomNavDragDrop() {
            const bottomNav = document.getElementById('bottomNav');
            if (!bottomNav) return;

            let draggedElement = null;

            bottomNav.addEventListener('dragstart', (e) => {
                if (e.target.classList.contains('draggable')) {
                    draggedElement = e.target;
                    e.target.classList.add('dragging');
                    e.dataTransfer.effectAllowed = 'move';
                    e.dataTransfer.setData('text/html', e.target.outerHTML);
                }
            });

            bottomNav.addEventListener('dragend', (e) => {
                if (e.target.classList.contains('draggable')) {
                    e.target.classList.remove('dragging');
                    // Remove any remaining drag-over classes
                    document.querySelectorAll('.drag-over').forEach(el => el.classList.remove('drag-over'));
                }
            });

            bottomNav.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                
                const afterElement = getDragAfterElement(bottomNav, e.clientX);
                const dragging = document.querySelector('.dragging');
                
                if (afterElement == null) {
                    bottomNav.appendChild(dragging);
                } else {
                    bottomNav.insertBefore(dragging, afterElement);
                }
            });

            bottomNav.addEventListener('dragenter', (e) => {
                e.preventDefault();
                if (e.target.classList.contains('draggable') && e.target !== draggedElement) {
                    e.target.classList.add('drag-over');
                }
            });

            bottomNav.addEventListener('dragleave', (e) => {
                if (e.target.classList.contains('draggable')) {
                    e.target.classList.remove('drag-over');
                }
            });

            bottomNav.addEventListener('drop', (e) => {
                e.preventDefault();
                document.querySelectorAll('.drag-over').forEach(el => el.classList.remove('drag-over'));
                saveBottomNavOrder();
                showToast('Navigation order saved! 📱');
            });
        }

        // Convert to floating buttons anywhere on page
        function enableFloatingMode() {
            const bottomNav = document.getElementById('bottomNav');
            const buttons = bottomNav.querySelectorAll('.draggable');
            
            console.log('Found buttons for floating mode:', buttons.length);
            
            document.body.classList.add('floating-mode');
            
            buttons.forEach((btn, index) => {
                console.log('Processing button', index, 'with action:', btn.getAttribute('data-action'));
                
                const floatingBtn = btn.cloneNode(true);
                floatingBtn.classList.remove('nav-item', 'draggable');
                floatingBtn.classList.add('floating-nav-btn');
                floatingBtn.draggable = false; // Use mouse events instead
                
                // Handle special profile button
                if (btn.id === 'yourProfileBtn') {
                    console.log('Setting up profile button for floating mode');
                    floatingBtn.id = 'yourProfileBtnFloating';
                    // Update the profile icon reference
                    const profileIcon = floatingBtn.querySelector('#yourProfileIcon');
                    if (profileIcon) {
                        profileIcon.id = 'yourProfileIconFloating';
                        console.log('Profile icon updated for floating mode');
                    }
                }
                
                // Default positions (right side of screen)
                const savedPos = getButtonPosition(btn.getAttribute('data-action'));
                if (savedPos) {
                    floatingBtn.style.left = savedPos.x + 'px';
                    floatingBtn.style.top = savedPos.y + 'px';
                    console.log('Using saved position for', btn.getAttribute('data-action'));
                } else {
                    floatingBtn.style.right = '20px';
                    floatingBtn.style.top = (100 + index * 80) + 'px';
                    console.log('Using default position for', btn.getAttribute('data-action'));
                }
                
                document.body.appendChild(floatingBtn);
                makeFloatingButtonDraggable(floatingBtn);
                console.log('Added floating button:', floatingBtn);
            });
            
            // Update floating profile button with current profile picture
            setTimeout(() => {
                updateFloatingProfileButton();
            }, 100);
            
            showToast(`Floating mode enabled! ${buttons.length} buttons created 🎯`);
        }

        function disableFloatingMode() {
            document.body.classList.remove('floating-mode');
            document.querySelectorAll('.floating-nav-btn').forEach(btn => btn.remove());
            showToast('Bottom navigation restored! 📱');
        }

        function makeFloatingButtonDraggable(element) {
            let isDragging = false;
            let startX, startY, initialX, initialY;

            element.addEventListener('mousedown', dragStart);
            element.addEventListener('touchstart', dragStart, { passive: false });

            function dragStart(e) {
                if (e.type === 'touchstart') {
                    initialX = e.touches[0].clientX - element.offsetLeft;
                    initialY = e.touches[0].clientY - element.offsetTop;
                } else {
                    initialX = e.clientX - element.offsetLeft;
                    initialY = e.clientY - element.offsetTop;
                }

                if (e.target === element) {
                    isDragging = true;
                    element.classList.add('dragging');
                    
                    document.addEventListener('mousemove', drag);
                    document.addEventListener('mouseup', dragEnd);
                    document.addEventListener('touchmove', drag, { passive: false });
                    document.addEventListener('touchend', dragEnd);
                }
            }

            function drag(e) {
                if (isDragging) {
                    e.preventDefault();
                    
                    if (e.type === 'touchmove') {
                        currentX = e.touches[0].clientX - initialX;
                        currentY = e.touches[0].clientY - initialY;
                    } else {
                        currentX = e.clientX - initialX;
                        currentY = e.clientY - initialY;
                    }

                    // Keep button within viewport
                    const maxX = window.innerWidth - element.offsetWidth;
                    const maxY = window.innerHeight - element.offsetHeight;
                    
                    currentX = Math.max(0, Math.min(currentX, maxX));
                    currentY = Math.max(0, Math.min(currentY, maxY));

                    element.style.left = currentX + 'px';
                    element.style.top = currentY + 'px';
                    element.style.right = 'auto';
                    element.style.bottom = 'auto';
                }
            }

            function dragEnd() {
                if (isDragging) {
                    isDragging = false;
                    element.classList.remove('dragging');
                    
                    // Save position
                    const action = element.getAttribute('data-action');
                    saveButtonPosition(action, {
                        x: parseInt(element.style.left),
                        y: parseInt(element.style.top)
                    });
                    
                    document.removeEventListener('mousemove', drag);
                    document.removeEventListener('mouseup', dragEnd);
                    document.removeEventListener('touchmove', drag);
                    document.removeEventListener('touchend', dragEnd);
                    
                    showToast('Position saved! 📍');
                }
            }
        }

        function saveButtonPosition(action, position) {
            const positions = JSON.parse(localStorage.getItem('floatingButtonPositions') || '{}');
            positions[action] = position;
            localStorage.setItem('floatingButtonPositions', JSON.stringify(positions));
        }

        function getButtonPosition(action) {
            const positions = JSON.parse(localStorage.getItem('floatingButtonPositions') || '{}');
            return positions[action];
        }

        function toggleFloatingMode() {
            if (document.body.classList.contains('floating-mode')) {
                disableFloatingMode();
            } else {
                enableFloatingMode();
            }
        }

        // Update floating profile button with user's profile picture
        function updateFloatingProfileButton() {
            if (!window.currentUser) return;

            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                getDocs(userQuery).then(userSnapshot => {
                    if (!userSnapshot.empty) {
                        const userData = userSnapshot.docs[0].data();
                        const profileIcon = document.getElementById('yourProfileIconFloating');
                        
                        if (profileIcon) {
                            // Check for avatar first, then profile picture
                            const imageUrl = userData.avatarPicture || userData.profilePicture;
                            if (imageUrl) {
                                profileIcon.style.backgroundImage = `url('${imageUrl}')`;
                                profileIcon.style.backgroundSize = 'cover';
                                profileIcon.style.backgroundPosition = 'center';
                                profileIcon.textContent = '';
                            } else {
                                // Show first letter of username/display name
                                const displayName = userData.displayName || userData.username || window.currentUser.email;
                                profileIcon.textContent = displayName.charAt(0).toUpperCase();
                                profileIcon.style.backgroundImage = '';
                            }
                        }
                    }
                }).catch(error => {
                    console.error('Error loading floating profile:', error);
                });
            } catch (error) {
                console.error('Error updating floating profile:', error);
            }
        }

        function getDragAfterElement(container, x) {
            const draggableElements = [...container.querySelectorAll('.draggable:not(.dragging)')];
            
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = x - box.left - box.width / 2;
                
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        function saveBottomNavOrder() {
            const buttons = document.querySelectorAll('#bottomNav .draggable');
            const order = Array.from(buttons).map(btn => btn.getAttribute('data-action'));
            localStorage.setItem('bottomNavOrder', JSON.stringify(order));
        }

        function loadBottomNavOrder() {
            const savedOrder = localStorage.getItem('bottomNavOrder');
            if (!savedOrder) return;

            try {
                const order = JSON.parse(savedOrder);
                const bottomNav = document.getElementById('bottomNav');
                const buttons = {};
                
                // Collect all buttons by their data-action
                bottomNav.querySelectorAll('.draggable').forEach(btn => {
                    buttons[btn.getAttribute('data-action')] = btn;
                });
                
                // Reorder buttons according to saved order
                order.forEach(action => {
                    if (buttons[action]) {
                        bottomNav.appendChild(buttons[action]);
                    }
                });
            } catch (error) {
                console.error('Error loading navigation order:', error);
            }
        }

        // Make functions global
        window.uploadProfilePicture = uploadProfilePicture;
        window.handleProfilePicUpload = handleProfilePicUpload;
        window.updateProfilePicDisplay = updateProfilePicDisplay;
        window.loadUserProfilePicture = loadUserProfilePicture;
        window.updateAllVideoProfilePics = updateAllVideoProfilePics;
        window.loadAllUsersProfilePics = loadAllUsersProfilePics;
        window.uploadAvatarPicture = uploadAvatarPicture;
        window.handleAvatarPicUpload = handleAvatarPicUpload;
        window.updateAvatarDisplay = updateAvatarDisplay;
        window.updateAllVideoAvatars = updateAllVideoAvatars;
        window.loadUserAvatar = loadUserAvatar;
        window.castVideo = castVideo;
        window.likeCurrentVideo = likeCurrentVideo;
        window.castCurrentVideo = castCurrentVideo;
        window.shareCurrentVideo = shareCurrentVideo;
        window.viewCurrentVideoAccount = viewCurrentVideoAccount;
        window.followCurrentVideoAccount = followCurrentVideoAccount;
        window.updateBottomNavProfile = updateBottomNavProfile;
        window.toggleCurrentVideoMute = toggleCurrentVideoMute;
        window.updateMuteButtonAppearance = updateMuteButtonAppearance;
        window.syncMuteButtonWithCurrentVideo = syncMuteButtonWithCurrentVideo;
        window.autoSyncMuteButton = autoSyncMuteButton;
        window.updateLikeCount = updateLikeCount;
        window.updateShareCount = updateShareCount;
        window.updateSaveCount = updateSaveCount;
        window.trackShare = trackShare;
        window.updateReaction = updateReaction;
        window.toggleRepost = toggleRepost;
        window.updateRepostButton = updateRepostButton;
        
        // Update header profile picture function
        async function updateHeaderProfile() {
            if (!window.currentUser) return;
            
            const headerProfileBtn = document.getElementById('headerProfileBtn');
            if (!headerProfileBtn) return;
            
            try {
                // Get user data to check for profile picture
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    if (userData.profilePicture || userData.avatarPicture) {
                        headerProfileBtn.innerHTML = `<img src="${userData.profilePicture || userData.avatarPicture}" alt="Profile" class="header-profile-img">`;
                    } else {
                        // Use first letter of display name
                        const displayName = userData.displayName || userData.username || 'User';
                        headerProfileBtn.innerHTML = `<div class="header-profile-placeholder">${displayName.charAt(0).toUpperCase()}</div>`;
                    }
                }
            } catch (error) {
                console.error('Error updating header profile:', error);
            }
        }
        
        window.updateHeaderProfile = updateHeaderProfile;
        
        // Show login screen function
        function showLoginScreen() {
            document.getElementById('authContainer').style.display = 'flex';
            document.getElementById('mainApp').style.display = 'none';
            showLogin();
        }
        
        window.showLoginScreen = showLoginScreen;
        
        // Theme Management Functions
        function changeTheme(themeName) {
            // Update theme on document
            document.documentElement.setAttribute('data-theme', themeName);
            
            // Save theme preference
            localStorage.setItem('vib3-theme', themeName);
            
            // Update active theme option
            document.querySelectorAll('.theme-option').forEach(option => {
                option.classList.remove('active');
            });
            document.querySelector(`[data-theme="${themeName}"]`).classList.add('active');
            
            // Show feedback
            showToast(`🎨 ${themeName.charAt(0).toUpperCase() + themeName.slice(1)} theme applied!`);
        }
        
        // Initialize theme on load
        function initializeTheme() {
            const savedTheme = localStorage.getItem('vib3-theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            
            // Set active theme option if on settings page
            const activeOption = document.querySelector(`[data-theme="${savedTheme}"]`);
            if (activeOption) {
                activeOption.classList.add('active');
            }
        }
        
        window.changeTheme = changeTheme;
        window.initializeTheme = initializeTheme;
        
        // TikTok-style functions
        function refreshForYou() {
            console.log('Refreshing For You feed...');
            switchFeedTab('foryou');
        }
        
        function performSearch(query) {
            console.log('Searching for:', query);
            // Implement search functionality
        }
        
        function showMoreOptions() {
            // Create more options modal with settings
            const modal = document.createElement('div');
            modal.className = 'modal active';
            modal.innerHTML = `
                <div class="modal-content">
                    <button class="close-btn" onclick="this.closest('.modal').remove()">×</button>
                    <h3>More Options</h3>
                    <div style="margin: 20px 0;">
                        <button onclick="showPage('settings')" style="width: 100%; padding: 15px; background: var(--bg-tertiary); color: var(--text-primary); border: none; border-radius: 8px; margin-bottom: 10px; cursor: pointer;">⚙️ Settings</button>
                        <button onclick="showPage('help')" style="width: 100%; padding: 15px; background: var(--bg-tertiary); color: var(--text-primary); border: none; border-radius: 8px; margin-bottom: 10px; cursor: pointer;">❓ Help</button>
                        <button onclick="showPage('about')" style="width: 100%; padding: 15px; background: var(--bg-tertiary); color: var(--text-primary); border: none; border-radius: 8px; cursor: pointer;">ℹ️ About</button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        // Load following accounts for sidebar
        async function loadFollowingAccountsForSidebar() {
            if (!window.currentUser) return;
            
            try {
                const userQuery = query(collection(db, 'users'), where('uid', '==', window.currentUser.uid));
                const userSnapshot = await getDocs(userQuery);
                
                if (!userSnapshot.empty) {
                    const userData = userSnapshot.docs[0].data();
                    const following = userData.following || [];
                    
                    const followingAccountsList = document.getElementById('followingAccountsList');
                    
                    if (following.length === 0) {
                        followingAccountsList.innerHTML = '<p style="color: var(--text-tertiary); font-size: 12px;">No accounts followed yet</p>';
                        return;
                    }
                    
                    // Get user data for each followed account
                    const followingUsers = [];
                    for (const followedUserId of following.slice(0, 5)) { // Show max 5
                        try {
                            const followedUserQuery = query(collection(db, 'users'), where('uid', '==', followedUserId));
                            const followedUserSnapshot = await getDocs(followedUserQuery);
                            
                            if (!followedUserSnapshot.empty) {
                                const followedUserData = followedUserSnapshot.docs[0].data();
                                followingUsers.push({
                                    uid: followedUserId,
                                    displayName: followedUserData.displayName,
                                    username: followedUserData.username,
                                    profilePicture: followedUserData.profilePicture || followedUserData.avatarPicture
                                });
                            }
                        } catch (error) {
                            console.log('Error getting followed user data:', error);
                        }
                    }
                    
                    if (followingUsers.length === 0) {
                        followingAccountsList.innerHTML = '<p style="color: var(--text-tertiary); font-size: 12px;">Following accounts not found</p>';
                        return;
                    }
                    
                    // Display following accounts
                    followingAccountsList.innerHTML = followingUsers.map(user => `
                        <div style="display: flex; align-items: center; padding: 8px 0; cursor: pointer; border-radius: 8px; transition: background 0.2s;" 
                             onclick="openUserProfile('${user.uid}', '${user.displayName || user.username}')"
                             onmouseover="this.style.background='var(--bg-tertiary)'"
                             onmouseout="this.style.background='transparent'">
                            <div style="width: 32px; height: 32px; border-radius: 50%; background: linear-gradient(45deg, #ff006e, #8338ec); display: flex; align-items: center; justify-content: center; margin-right: 12px; overflow: hidden;">
                                ${user.profilePicture ? 
                                    `<img src="${user.profilePicture}" style="width: 100%; height: 100%; object-fit: cover;">` :
                                    `<span style="color: white; font-size: 14px; font-weight: bold;">${(user.displayName || user.username)?.charAt(0)?.toUpperCase() || '?'}</span>`
                                }
                            </div>
                            <div style="flex: 1; min-width: 0;">
                                <div style="font-size: 14px; font-weight: 600; color: var(--text-primary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    ${user.displayName || user.username || 'Unknown User'}
                                </div>
                                <div style="font-size: 12px; color: var(--text-secondary); white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @${user.username || 'unknown'}
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    // Add "See all" link if there are more than 5
                    if (following.length > 5) {
                        followingAccountsList.innerHTML += `
                            <div style="text-align: center; margin-top: 12px;">
                                <button onclick="showAllFollowing()" style="color: var(--text-secondary); font-size: 12px; background: none; border: none; cursor: pointer; text-decoration: underline;">
                                    See all ${following.length} accounts
                                </button>
                            </div>
                        `;
                    }
                }
            } catch (error) {
                console.error('Error loading following accounts:', error);
                document.getElementById('followingAccountsList').innerHTML = '<p style="color: var(--text-tertiary); font-size: 12px;">Error loading accounts</p>';
            }
        }
        
        function showAllFollowing() {
            // Show modal with all following accounts
            console.log('Show all following accounts');
        }
        
        function editDisplayName() {
            const newDisplayName = prompt('Enter your new display name:', document.getElementById('userDisplayName').textContent);
            if (newDisplayName && newDisplayName.trim()) {
                document.getElementById('userDisplayName').textContent = newDisplayName.trim();
                // Here you would typically save to Firebase/database
                showToast('Display name updated!');
            }
        }
        
        window.refreshForYou = refreshForYou;
        window.performSearch = performSearch;
        window.showMoreOptions = showMoreOptions;
        window.loadFollowingAccountsForSidebar = loadFollowingAccountsForSidebar;
        window.showAllFollowing = showAllFollowing;
        window.editDisplayName = editDisplayName;

        // Initialize app

        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded. Firebase functions available:', !!window.signInWithEmailAndPassword);
            
            // Initialize autoplay flags
            window.userHasInteracted = localStorage.getItem('vib3_user_interacted') === 'true';
            window.tryUnmuteNext = false;
            
            // Add global interaction listeners to unmute videos
            function enableAudioOnInteraction(event) {
                // Don't trigger on video container clicks (let toggleVideoPlayback handle that)
                if (event && event.target.closest('.video-container')) {
                    return;
                }
                
                console.log('User interaction detected - enabling audio for all videos');
                window.userHasInteracted = true;
                localStorage.setItem('vib3_user_interacted', 'true');
                
                // Unmute and play the currently visible video
                const videos = document.querySelectorAll('.video-element');
                videos.forEach(video => {
                    const rect = video.getBoundingClientRect();
                    const isVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
                    
                    if (isVisible && !video.hasAttribute('data-manually-muted')) {
                        video.muted = false;
                        video.volume = 0.8;
                        
                        // Try to play the video if it's paused
                        if (video.paused) {
                            video.play().then(() => {
                                console.log('Started playing video with sound after interaction');
                            }).catch(err => {
                                console.log('Could not autoplay even after interaction:', err);
                            });
                        }
                        
                        // Update mute button appearance
                        const muteBtn = video.closest('.video-item')?.querySelector('.mute-btn');
                        if (muteBtn) {
                            muteBtn.classList.add('unmuted');
                            muteBtn.textContent = '🔊';
                            muteBtn.style.background = 'rgba(0,0,0,0.9)';
                        }
                    }
                });
                
                // Remove the listeners after first interaction
                document.removeEventListener('click', enableAudioOnInteraction);
                document.removeEventListener('touchstart', enableAudioOnInteraction);
                document.removeEventListener('scroll', enableAudioOnInteraction);
                document.removeEventListener('keydown', enableAudioOnInteraction);
            }
            
            // Only add listeners if user hasn't interacted before
            if (!window.userHasInteracted) {
                // Use capture phase for click to run before other handlers
                document.addEventListener('click', enableAudioOnInteraction, true);
                document.addEventListener('touchstart', enableAudioOnInteraction, true);
                document.addEventListener('scroll', enableAudioOnInteraction);
                document.addEventListener('keydown', enableAudioOnInteraction);
                console.log('Added interaction listeners to enable audio');
            }
            
            // Initialize theme system
            initializeTheme();
            // Start auto-sync for mute button
            setInterval(autoSyncMuteButton, 1000);
        });

        // Tab pause/resume functionality
        (function() {
            let playingVideos = [];
            
            function handleVisibilityChange() {
                console.log('Page visibility changed:', document.hidden ? 'hidden' : 'visible');
                
                if (document.hidden) {
                    // Page is hidden - pause all playing videos
                    playingVideos = [];
                    const videos = document.querySelectorAll('.video-element');
                    console.log('Found', videos.length, 'videos to check');
                    
                    videos.forEach(video => {
                        if (!video.paused) {
                            console.log('Pausing video');
                            playingVideos.push(video);
                            video.pause();
                        }
                    });
                    console.log('Paused', playingVideos.length, 'videos');
                } else {
                    // Page is visible - resume videos that were playing
                    console.log('Resuming', playingVideos.length, 'videos');
                    playingVideos.forEach(video => {
                        console.log('Resuming video');
                        video.play().catch(e => console.log('Failed to resume video:', e));
                    });
                    playingVideos = [];
                }
            }
            
            // Add the event listener immediately
            document.addEventListener('visibilitychange', handleVisibilityChange);
            console.log('Visibility change listener added');
            
            // Also add focus/blur as backup
            window.addEventListener('blur', function() {
                console.log('Window blur event');
                handleVisibilityChange();
            });
            
            window.addEventListener('focus', function() {
                console.log('Window focus event');
                handleVisibilityChange();
            });
        })();
    </script>
</body>
</html>